
03_UART_TX_Printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000127c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080013ac  080013ac  000113ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013f0  080013f0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080013f0  080013f0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013f0  080013f0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013f0  080013f0  000113f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013f4  080013f4  000113f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080013f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001454  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001454  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f47  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000607  00000000  00000000  0002100f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000188  00000000  00000000  00021618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000105  00000000  00000000  000217a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011f8c  00000000  00000000  000218a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000024e1  00000000  00000000  00033831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005a06a  00000000  00000000  00035d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000c10  00000000  00000000  0008fd7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0009098c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000005c 	.word	0x2000005c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001394 	.word	0x08001394

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000060 	.word	0x20000060
 800016c:	08001394 	.word	0x08001394

08000170 <main>:
#include "rcc.h"
#include "systick.h"
#include "uart.h"
#include "stdio.h"

int main(void) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0

	int counter = 0;
 8000176:	2300      	movs	r3, #0
 8000178:	607b      	str	r3, [r7, #4]
	//set sysclock to 72MHZ
	HSE_PLL_SYS_CLK_MAX();
 800017a:	f000 f825 	bl	80001c8 <HSE_PLL_SYS_CLK_MAX>
	//Enable PC13 LED
	RCC->APB2ENR |=RCC_APB2ENR_IOPCEN;
 800017e:	4b0f      	ldr	r3, [pc, #60]	; (80001bc <main+0x4c>)
 8000180:	699b      	ldr	r3, [r3, #24]
 8000182:	4a0e      	ldr	r2, [pc, #56]	; (80001bc <main+0x4c>)
 8000184:	f043 0310 	orr.w	r3, r3, #16
 8000188:	6193      	str	r3, [r2, #24]
	GPIOC->CRH |= GPIO_CRH_MODE13;
 800018a:	4b0d      	ldr	r3, [pc, #52]	; (80001c0 <main+0x50>)
 800018c:	685b      	ldr	r3, [r3, #4]
 800018e:	4a0c      	ldr	r2, [pc, #48]	; (80001c0 <main+0x50>)
 8000190:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000194:	6053      	str	r3, [r2, #4]

	UART1_Init();
 8000196:	f000 f92f 	bl	80003f8 <UART1_Init>
	DelayMS(1000);
 800019a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800019e:	f000 f8fd 	bl	800039c <DelayMS>
	while (1) {
		counter++;
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	3301      	adds	r3, #1
 80001a6:	607b      	str	r3, [r7, #4]
		printf("Counter : %d\r\n",counter);
 80001a8:	6879      	ldr	r1, [r7, #4]
 80001aa:	4806      	ldr	r0, [pc, #24]	; (80001c4 <main+0x54>)
 80001ac:	f000 fa74 	bl	8000698 <iprintf>
		DelayMS(1000);
 80001b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001b4:	f000 f8f2 	bl	800039c <DelayMS>
		counter++;
 80001b8:	e7f3      	b.n	80001a2 <main+0x32>
 80001ba:	bf00      	nop
 80001bc:	40021000 	.word	0x40021000
 80001c0:	40011000 	.word	0x40011000
 80001c4:	080013ac 	.word	0x080013ac

080001c8 <HSE_PLL_SYS_CLK_MAX>:
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSE);

}

void HSE_PLL_SYS_CLK_MAX(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON;
 80001cc:	4b21      	ldr	r3, [pc, #132]	; (8000254 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a20      	ldr	r2, [pc, #128]	; (8000254 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80001d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001d6:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80001d8:	bf00      	nop
 80001da:	4b1e      	ldr	r3, [pc, #120]	; (8000254 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d0f9      	beq.n	80001da <HSE_PLL_SYS_CLK_MAX+0x12>
		;

	FLASH->ACR |=FLASH_ACR_LATENCY_2 |FLASH_ACR_PRFTBE;
 80001e6:	4b1c      	ldr	r3, [pc, #112]	; (8000258 <HSE_PLL_SYS_CLK_MAX+0x90>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a1b      	ldr	r2, [pc, #108]	; (8000258 <HSE_PLL_SYS_CLK_MAX+0x90>)
 80001ec:	f043 0314 	orr.w	r3, r3, #20
 80001f0:	6013      	str	r3, [r2, #0]


	RCC->CFGR |= RCC_CFGR_PLLSRC;
 80001f2:	4b18      	ldr	r3, [pc, #96]	; (8000254 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80001f4:	685b      	ldr	r3, [r3, #4]
 80001f6:	4a17      	ldr	r2, [pc, #92]	; (8000254 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80001f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001fc:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLMULL9;
 80001fe:	4b15      	ldr	r3, [pc, #84]	; (8000254 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000200:	685b      	ldr	r3, [r3, #4]
 8000202:	4a14      	ldr	r2, [pc, #80]	; (8000254 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000204:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000208:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800020a:	4b12      	ldr	r3, [pc, #72]	; (8000254 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 800020c:	685b      	ldr	r3, [r3, #4]
 800020e:	4a11      	ldr	r2, [pc, #68]	; (8000254 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000210:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000214:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_ADCPRE_DIV6;
 8000216:	4b0f      	ldr	r3, [pc, #60]	; (8000254 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000218:	685b      	ldr	r3, [r3, #4]
 800021a:	4a0e      	ldr	r2, [pc, #56]	; (8000254 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 800021c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000220:	6053      	str	r3, [r2, #4]

	RCC->CR |= RCC_CR_PLLON;
 8000222:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a0b      	ldr	r2, [pc, #44]	; (8000254 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000228:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800022c:	6013      	str	r3, [r2, #0]

	//RCC->CFGR &= ~RCC_CFGR_SW;
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800022e:	4b09      	ldr	r3, [pc, #36]	; (8000254 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	4a08      	ldr	r2, [pc, #32]	; (8000254 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000234:	f043 0302 	orr.w	r3, r3, #2
 8000238:	6053      	str	r3, [r2, #4]

	while ((RCC->CR & RCC_CR_PLLRDY) == 0)
 800023a:	bf00      	nop
 800023c:	4b05      	ldr	r3, [pc, #20]	; (8000254 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000244:	2b00      	cmp	r3, #0
 8000246:	d0f9      	beq.n	800023c <HSE_PLL_SYS_CLK_MAX+0x74>
		;
}
 8000248:	bf00      	nop
 800024a:	bf00      	nop
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	40021000 	.word	0x40021000
 8000258:	40022000 	.word	0x40022000

0800025c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b086      	sub	sp, #24
 8000260:	af00      	add	r7, sp, #0
 8000262:	60f8      	str	r0, [r7, #12]
 8000264:	60b9      	str	r1, [r7, #8]
 8000266:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000268:	2300      	movs	r3, #0
 800026a:	617b      	str	r3, [r7, #20]
 800026c:	e00a      	b.n	8000284 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800026e:	f3af 8000 	nop.w
 8000272:	4601      	mov	r1, r0
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	1c5a      	adds	r2, r3, #1
 8000278:	60ba      	str	r2, [r7, #8]
 800027a:	b2ca      	uxtb	r2, r1
 800027c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800027e:	697b      	ldr	r3, [r7, #20]
 8000280:	3301      	adds	r3, #1
 8000282:	617b      	str	r3, [r7, #20]
 8000284:	697a      	ldr	r2, [r7, #20]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	429a      	cmp	r2, r3
 800028a:	dbf0      	blt.n	800026e <_read+0x12>
  }

  return len;
 800028c:	687b      	ldr	r3, [r7, #4]
}
 800028e:	4618      	mov	r0, r3
 8000290:	3718      	adds	r7, #24
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}

08000296 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000296:	b580      	push	{r7, lr}
 8000298:	b086      	sub	sp, #24
 800029a:	af00      	add	r7, sp, #0
 800029c:	60f8      	str	r0, [r7, #12]
 800029e:	60b9      	str	r1, [r7, #8]
 80002a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002a2:	2300      	movs	r3, #0
 80002a4:	617b      	str	r3, [r7, #20]
 80002a6:	e009      	b.n	80002bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	1c5a      	adds	r2, r3, #1
 80002ac:	60ba      	str	r2, [r7, #8]
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 f8f9 	bl	80004a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	3301      	adds	r3, #1
 80002ba:	617b      	str	r3, [r7, #20]
 80002bc:	697a      	ldr	r2, [r7, #20]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	dbf1      	blt.n	80002a8 <_write+0x12>
  }
  return len;
 80002c4:	687b      	ldr	r3, [r7, #4]
}
 80002c6:	4618      	mov	r0, r3
 80002c8:	3718      	adds	r7, #24
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}

080002ce <_close>:

int _close(int file)
{
 80002ce:	b480      	push	{r7}
 80002d0:	b083      	sub	sp, #12
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80002d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80002da:	4618      	mov	r0, r3
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr

080002e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002f4:	605a      	str	r2, [r3, #4]
  return 0;
 80002f6:	2300      	movs	r3, #0
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr

08000302 <_isatty>:

int _isatty(int file)
{
 8000302:	b480      	push	{r7}
 8000304:	b083      	sub	sp, #12
 8000306:	af00      	add	r7, sp, #0
 8000308:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800030a:	2301      	movs	r3, #1
}
 800030c:	4618      	mov	r0, r3
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr

08000316 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000316:	b480      	push	{r7}
 8000318:	b085      	sub	sp, #20
 800031a:	af00      	add	r7, sp, #0
 800031c:	60f8      	str	r0, [r7, #12]
 800031e:	60b9      	str	r1, [r7, #8]
 8000320:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000322:	2300      	movs	r3, #0
}
 8000324:	4618      	mov	r0, r3
 8000326:	3714      	adds	r7, #20
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr
	...

08000330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b086      	sub	sp, #24
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000338:	4a14      	ldr	r2, [pc, #80]	; (800038c <_sbrk+0x5c>)
 800033a:	4b15      	ldr	r3, [pc, #84]	; (8000390 <_sbrk+0x60>)
 800033c:	1ad3      	subs	r3, r2, r3
 800033e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000340:	697b      	ldr	r3, [r7, #20]
 8000342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000344:	4b13      	ldr	r3, [pc, #76]	; (8000394 <_sbrk+0x64>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d102      	bne.n	8000352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <_sbrk+0x64>)
 800034e:	4a12      	ldr	r2, [pc, #72]	; (8000398 <_sbrk+0x68>)
 8000350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000352:	4b10      	ldr	r3, [pc, #64]	; (8000394 <_sbrk+0x64>)
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4413      	add	r3, r2
 800035a:	693a      	ldr	r2, [r7, #16]
 800035c:	429a      	cmp	r2, r3
 800035e:	d207      	bcs.n	8000370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000360:	f000 fa3e 	bl	80007e0 <__errno>
 8000364:	4603      	mov	r3, r0
 8000366:	220c      	movs	r2, #12
 8000368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800036a:	f04f 33ff 	mov.w	r3, #4294967295
 800036e:	e009      	b.n	8000384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000370:	4b08      	ldr	r3, [pc, #32]	; (8000394 <_sbrk+0x64>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000376:	4b07      	ldr	r3, [pc, #28]	; (8000394 <_sbrk+0x64>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4413      	add	r3, r2
 800037e:	4a05      	ldr	r2, [pc, #20]	; (8000394 <_sbrk+0x64>)
 8000380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000382:	68fb      	ldr	r3, [r7, #12]
}
 8000384:	4618      	mov	r0, r3
 8000386:	3718      	adds	r7, #24
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	20005000 	.word	0x20005000
 8000390:	00000400 	.word	0x00000400
 8000394:	20000078 	.word	0x20000078
 8000398:	200001c8 	.word	0x200001c8

0800039c <DelayMS>:


#define CORE_CLOCK_FREQ 72000000

void DelayMS(uint32_t delay)
{
 800039c:	b480      	push	{r7}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
	SysTick->LOAD = (CORE_CLOCK_FREQ/1000) - 1;
 80003a4:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <DelayMS+0x54>)
 80003a6:	4a13      	ldr	r2, [pc, #76]	; (80003f4 <DelayMS+0x58>)
 80003a8:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; //set the current value of the systick;
 80003aa:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <DelayMS+0x54>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk ; //set processor clock source and enable systick
 80003b0:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <DelayMS+0x54>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a0e      	ldr	r2, [pc, #56]	; (80003f0 <DelayMS+0x54>)
 80003b6:	f043 0305 	orr.w	r3, r3, #5
 80003ba:	6013      	str	r3, [r2, #0]
	
	for(uint32_t i =0;i<delay;i++)
 80003bc:	2300      	movs	r3, #0
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	e009      	b.n	80003d6 <DelayMS+0x3a>
	{
		while(((SysTick->CTRL)&SysTick_CTRL_COUNTFLAG_Msk) == 0);
 80003c2:	bf00      	nop
 80003c4:	4b0a      	ldr	r3, [pc, #40]	; (80003f0 <DelayMS+0x54>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d0f9      	beq.n	80003c4 <DelayMS+0x28>
	for(uint32_t i =0;i<delay;i++)
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	3301      	adds	r3, #1
 80003d4:	60fb      	str	r3, [r7, #12]
 80003d6:	68fa      	ldr	r2, [r7, #12]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	429a      	cmp	r2, r3
 80003dc:	d3f1      	bcc.n	80003c2 <DelayMS+0x26>
	}
	SysTick->CTRL = 0;
 80003de:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <DelayMS+0x54>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
}
 80003e4:	bf00      	nop
 80003e6:	3714      	adds	r7, #20
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	e000e010 	.word	0xe000e010
 80003f4:	0001193f 	.word	0x0001193f

080003f8 <UART1_Init>:
 *      Author: Janith Sinhapura
 */
#include "stm32f1xx.h"
#include "stdio.h"

void UART1_Init(void) {
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
	//uart1 is under apb2 bus
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80003fc:	4b1b      	ldr	r3, [pc, #108]	; (800046c <UART1_Init+0x74>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a1a      	ldr	r2, [pc, #104]	; (800046c <UART1_Init+0x74>)
 8000402:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000406:	6193      	str	r3, [r2, #24]

	//uart1 TX-PA9
	//uart1	RX-PA10
	//Enable gpio pins for uart1 in apb2 bus
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000408:	4b18      	ldr	r3, [pc, #96]	; (800046c <UART1_Init+0x74>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a17      	ldr	r2, [pc, #92]	; (800046c <UART1_Init+0x74>)
 800040e:	f043 0304 	orr.w	r3, r3, #4
 8000412:	6193      	str	r3, [r2, #24]

	//enable gpio alternate funtions
	GPIOA->CRH |= GPIO_CRH_MODE9 | GPIO_CRH_MODE10;
 8000414:	4b16      	ldr	r3, [pc, #88]	; (8000470 <UART1_Init+0x78>)
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	4a15      	ldr	r2, [pc, #84]	; (8000470 <UART1_Init+0x78>)
 800041a:	f443 734c 	orr.w	r3, r3, #816	; 0x330
 800041e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF9_1 | GPIO_CRH_CNF10_1;
 8000420:	4b13      	ldr	r3, [pc, #76]	; (8000470 <UART1_Init+0x78>)
 8000422:	685b      	ldr	r3, [r3, #4]
 8000424:	4a12      	ldr	r2, [pc, #72]	; (8000470 <UART1_Init+0x78>)
 8000426:	f443 6308 	orr.w	r3, r3, #2176	; 0x880
 800042a:	6053      	str	r3, [r2, #4]

	//enable uart1
	USART1->CR1 |= USART_CR1_UE;
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <UART1_Init+0x7c>)
 800042e:	68db      	ldr	r3, [r3, #12]
 8000430:	4a10      	ldr	r2, [pc, #64]	; (8000474 <UART1_Init+0x7c>)
 8000432:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000436:	60d3      	str	r3, [r2, #12]

	//8 data bits
	USART1->CR1 &= ~USART_CR1_M;
 8000438:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <UART1_Init+0x7c>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	4a0d      	ldr	r2, [pc, #52]	; (8000474 <UART1_Init+0x7c>)
 800043e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000442:	60d3      	str	r3, [r2, #12]

	//2 stop bits
	USART1->CR2 |= USART_CR2_STOP_1;
 8000444:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <UART1_Init+0x7c>)
 8000446:	691b      	ldr	r3, [r3, #16]
 8000448:	4a0a      	ldr	r2, [pc, #40]	; (8000474 <UART1_Init+0x7c>)
 800044a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800044e:	6113      	str	r3, [r2, #16]

	//set baud rate to 115200
	//mantissa is 39 = 0x27
	//fractional part is 0.625 ~ 0.6 = 0x06
	USART1->BRR = (0x27U << 4) | (0x06 << 0);
 8000450:	4b08      	ldr	r3, [pc, #32]	; (8000474 <UART1_Init+0x7c>)
 8000452:	f240 2276 	movw	r2, #630	; 0x276
 8000456:	609a      	str	r2, [r3, #8]

	//enable tx
	USART1->CR1 |= USART_CR1_TE;
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <UART1_Init+0x7c>)
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	4a05      	ldr	r2, [pc, #20]	; (8000474 <UART1_Init+0x7c>)
 800045e:	f043 0308 	orr.w	r3, r3, #8
 8000462:	60d3      	str	r3, [r2, #12]
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr
 800046c:	40021000 	.word	0x40021000
 8000470:	40010800 	.word	0x40010800
 8000474:	40013800 	.word	0x40013800

08000478 <UART1_Write_Char>:

void UART1_Write_Char(int data)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	USART1->DR = data & 0xff;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a08      	ldr	r2, [pc, #32]	; (80004a4 <UART1_Write_Char+0x2c>)
 8000484:	b2db      	uxtb	r3, r3
 8000486:	6053      	str	r3, [r2, #4]

	//check data is transmitted out from the data register
	while((USART1->SR & USART_SR_TXE)==0);
 8000488:	bf00      	nop
 800048a:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <UART1_Write_Char+0x2c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000492:	2b00      	cmp	r3, #0
 8000494:	d0f9      	beq.n	800048a <UART1_Write_Char+0x12>
}
 8000496:	bf00      	nop
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40013800 	.word	0x40013800

080004a8 <__io_putchar>:

int __io_putchar(int ch){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	UART1_Write_Char(ch);
 80004b0:	6878      	ldr	r0, [r7, #4]
 80004b2:	f7ff ffe1 	bl	8000478 <UART1_Write_Char>
	return ch;
 80004b6:	687b      	ldr	r3, [r7, #4]
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}

080004c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004c0:	480d      	ldr	r0, [pc, #52]	; (80004f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c8:	480c      	ldr	r0, [pc, #48]	; (80004fc <LoopForever+0x6>)
  ldr r1, =_edata
 80004ca:	490d      	ldr	r1, [pc, #52]	; (8000500 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004cc:	4a0d      	ldr	r2, [pc, #52]	; (8000504 <LoopForever+0xe>)
  movs r3, #0
 80004ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d0:	e002      	b.n	80004d8 <LoopCopyDataInit>

080004d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004d6:	3304      	adds	r3, #4

080004d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004dc:	d3f9      	bcc.n	80004d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004de:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004e0:	4c0a      	ldr	r4, [pc, #40]	; (800050c <LoopForever+0x16>)
  movs r3, #0
 80004e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e4:	e001      	b.n	80004ea <LoopFillZerobss>

080004e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e8:	3204      	adds	r2, #4

080004ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004ec:	d3fb      	bcc.n	80004e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ee:	f000 f97d 	bl	80007ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004f2:	f7ff fe3d 	bl	8000170 <main>

080004f6 <LoopForever>:

LoopForever:
  b LoopForever
 80004f6:	e7fe      	b.n	80004f6 <LoopForever>
  ldr   r0, =_estack
 80004f8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80004fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000500:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000504:	080013f8 	.word	0x080013f8
  ldr r2, =_sbss
 8000508:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800050c:	200001c8 	.word	0x200001c8

08000510 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000510:	e7fe      	b.n	8000510 <ADC1_2_IRQHandler>
	...

08000514 <std>:
 8000514:	2300      	movs	r3, #0
 8000516:	b510      	push	{r4, lr}
 8000518:	4604      	mov	r4, r0
 800051a:	e9c0 3300 	strd	r3, r3, [r0]
 800051e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000522:	6083      	str	r3, [r0, #8]
 8000524:	8181      	strh	r1, [r0, #12]
 8000526:	6643      	str	r3, [r0, #100]	; 0x64
 8000528:	81c2      	strh	r2, [r0, #14]
 800052a:	6183      	str	r3, [r0, #24]
 800052c:	4619      	mov	r1, r3
 800052e:	2208      	movs	r2, #8
 8000530:	305c      	adds	r0, #92	; 0x5c
 8000532:	f000 f906 	bl	8000742 <memset>
 8000536:	4b0d      	ldr	r3, [pc, #52]	; (800056c <std+0x58>)
 8000538:	6224      	str	r4, [r4, #32]
 800053a:	6263      	str	r3, [r4, #36]	; 0x24
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <std+0x5c>)
 800053e:	62a3      	str	r3, [r4, #40]	; 0x28
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <std+0x60>)
 8000542:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <std+0x64>)
 8000546:	6323      	str	r3, [r4, #48]	; 0x30
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <std+0x68>)
 800054a:	429c      	cmp	r4, r3
 800054c:	d006      	beq.n	800055c <std+0x48>
 800054e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000552:	4294      	cmp	r4, r2
 8000554:	d002      	beq.n	800055c <std+0x48>
 8000556:	33d0      	adds	r3, #208	; 0xd0
 8000558:	429c      	cmp	r4, r3
 800055a:	d105      	bne.n	8000568 <std+0x54>
 800055c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000564:	f000 b966 	b.w	8000834 <__retarget_lock_init_recursive>
 8000568:	bd10      	pop	{r4, pc}
 800056a:	bf00      	nop
 800056c:	080006bd 	.word	0x080006bd
 8000570:	080006df 	.word	0x080006df
 8000574:	08000717 	.word	0x08000717
 8000578:	0800073b 	.word	0x0800073b
 800057c:	2000007c 	.word	0x2000007c

08000580 <stdio_exit_handler>:
 8000580:	4a02      	ldr	r2, [pc, #8]	; (800058c <stdio_exit_handler+0xc>)
 8000582:	4903      	ldr	r1, [pc, #12]	; (8000590 <stdio_exit_handler+0x10>)
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <stdio_exit_handler+0x14>)
 8000586:	f000 b869 	b.w	800065c <_fwalk_sglue>
 800058a:	bf00      	nop
 800058c:	20000000 	.word	0x20000000
 8000590:	080010d5 	.word	0x080010d5
 8000594:	2000000c 	.word	0x2000000c

08000598 <cleanup_stdio>:
 8000598:	6841      	ldr	r1, [r0, #4]
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <cleanup_stdio+0x34>)
 800059c:	b510      	push	{r4, lr}
 800059e:	4299      	cmp	r1, r3
 80005a0:	4604      	mov	r4, r0
 80005a2:	d001      	beq.n	80005a8 <cleanup_stdio+0x10>
 80005a4:	f000 fd96 	bl	80010d4 <_fflush_r>
 80005a8:	68a1      	ldr	r1, [r4, #8]
 80005aa:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <cleanup_stdio+0x38>)
 80005ac:	4299      	cmp	r1, r3
 80005ae:	d002      	beq.n	80005b6 <cleanup_stdio+0x1e>
 80005b0:	4620      	mov	r0, r4
 80005b2:	f000 fd8f 	bl	80010d4 <_fflush_r>
 80005b6:	68e1      	ldr	r1, [r4, #12]
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <cleanup_stdio+0x3c>)
 80005ba:	4299      	cmp	r1, r3
 80005bc:	d004      	beq.n	80005c8 <cleanup_stdio+0x30>
 80005be:	4620      	mov	r0, r4
 80005c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005c4:	f000 bd86 	b.w	80010d4 <_fflush_r>
 80005c8:	bd10      	pop	{r4, pc}
 80005ca:	bf00      	nop
 80005cc:	2000007c 	.word	0x2000007c
 80005d0:	200000e4 	.word	0x200000e4
 80005d4:	2000014c 	.word	0x2000014c

080005d8 <global_stdio_init.part.0>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <global_stdio_init.part.0+0x30>)
 80005dc:	4c0b      	ldr	r4, [pc, #44]	; (800060c <global_stdio_init.part.0+0x34>)
 80005de:	4a0c      	ldr	r2, [pc, #48]	; (8000610 <global_stdio_init.part.0+0x38>)
 80005e0:	4620      	mov	r0, r4
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	2104      	movs	r1, #4
 80005e6:	2200      	movs	r2, #0
 80005e8:	f7ff ff94 	bl	8000514 <std>
 80005ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80005f0:	2201      	movs	r2, #1
 80005f2:	2109      	movs	r1, #9
 80005f4:	f7ff ff8e 	bl	8000514 <std>
 80005f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80005fc:	2202      	movs	r2, #2
 80005fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000602:	2112      	movs	r1, #18
 8000604:	f7ff bf86 	b.w	8000514 <std>
 8000608:	200001b4 	.word	0x200001b4
 800060c:	2000007c 	.word	0x2000007c
 8000610:	08000581 	.word	0x08000581

08000614 <__sfp_lock_acquire>:
 8000614:	4801      	ldr	r0, [pc, #4]	; (800061c <__sfp_lock_acquire+0x8>)
 8000616:	f000 b90e 	b.w	8000836 <__retarget_lock_acquire_recursive>
 800061a:	bf00      	nop
 800061c:	200001bd 	.word	0x200001bd

08000620 <__sfp_lock_release>:
 8000620:	4801      	ldr	r0, [pc, #4]	; (8000628 <__sfp_lock_release+0x8>)
 8000622:	f000 b909 	b.w	8000838 <__retarget_lock_release_recursive>
 8000626:	bf00      	nop
 8000628:	200001bd 	.word	0x200001bd

0800062c <__sinit>:
 800062c:	b510      	push	{r4, lr}
 800062e:	4604      	mov	r4, r0
 8000630:	f7ff fff0 	bl	8000614 <__sfp_lock_acquire>
 8000634:	6a23      	ldr	r3, [r4, #32]
 8000636:	b11b      	cbz	r3, 8000640 <__sinit+0x14>
 8000638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800063c:	f7ff bff0 	b.w	8000620 <__sfp_lock_release>
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <__sinit+0x28>)
 8000642:	6223      	str	r3, [r4, #32]
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <__sinit+0x2c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d1f5      	bne.n	8000638 <__sinit+0xc>
 800064c:	f7ff ffc4 	bl	80005d8 <global_stdio_init.part.0>
 8000650:	e7f2      	b.n	8000638 <__sinit+0xc>
 8000652:	bf00      	nop
 8000654:	08000599 	.word	0x08000599
 8000658:	200001b4 	.word	0x200001b4

0800065c <_fwalk_sglue>:
 800065c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000660:	4607      	mov	r7, r0
 8000662:	4688      	mov	r8, r1
 8000664:	4614      	mov	r4, r2
 8000666:	2600      	movs	r6, #0
 8000668:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800066c:	f1b9 0901 	subs.w	r9, r9, #1
 8000670:	d505      	bpl.n	800067e <_fwalk_sglue+0x22>
 8000672:	6824      	ldr	r4, [r4, #0]
 8000674:	2c00      	cmp	r4, #0
 8000676:	d1f7      	bne.n	8000668 <_fwalk_sglue+0xc>
 8000678:	4630      	mov	r0, r6
 800067a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800067e:	89ab      	ldrh	r3, [r5, #12]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d907      	bls.n	8000694 <_fwalk_sglue+0x38>
 8000684:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000688:	3301      	adds	r3, #1
 800068a:	d003      	beq.n	8000694 <_fwalk_sglue+0x38>
 800068c:	4629      	mov	r1, r5
 800068e:	4638      	mov	r0, r7
 8000690:	47c0      	blx	r8
 8000692:	4306      	orrs	r6, r0
 8000694:	3568      	adds	r5, #104	; 0x68
 8000696:	e7e9      	b.n	800066c <_fwalk_sglue+0x10>

08000698 <iprintf>:
 8000698:	b40f      	push	{r0, r1, r2, r3}
 800069a:	b507      	push	{r0, r1, r2, lr}
 800069c:	4906      	ldr	r1, [pc, #24]	; (80006b8 <iprintf+0x20>)
 800069e:	ab04      	add	r3, sp, #16
 80006a0:	6808      	ldr	r0, [r1, #0]
 80006a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80006a6:	6881      	ldr	r1, [r0, #8]
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	f000 f9e3 	bl	8000a74 <_vfiprintf_r>
 80006ae:	b003      	add	sp, #12
 80006b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr
 80006b8:	20000058 	.word	0x20000058

080006bc <__sread>:
 80006bc:	b510      	push	{r4, lr}
 80006be:	460c      	mov	r4, r1
 80006c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80006c4:	f000 f868 	bl	8000798 <_read_r>
 80006c8:	2800      	cmp	r0, #0
 80006ca:	bfab      	itete	ge
 80006cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80006ce:	89a3      	ldrhlt	r3, [r4, #12]
 80006d0:	181b      	addge	r3, r3, r0
 80006d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80006d6:	bfac      	ite	ge
 80006d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80006da:	81a3      	strhlt	r3, [r4, #12]
 80006dc:	bd10      	pop	{r4, pc}

080006de <__swrite>:
 80006de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006e2:	461f      	mov	r7, r3
 80006e4:	898b      	ldrh	r3, [r1, #12]
 80006e6:	4605      	mov	r5, r0
 80006e8:	05db      	lsls	r3, r3, #23
 80006ea:	460c      	mov	r4, r1
 80006ec:	4616      	mov	r6, r2
 80006ee:	d505      	bpl.n	80006fc <__swrite+0x1e>
 80006f0:	2302      	movs	r3, #2
 80006f2:	2200      	movs	r2, #0
 80006f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80006f8:	f000 f83c 	bl	8000774 <_lseek_r>
 80006fc:	89a3      	ldrh	r3, [r4, #12]
 80006fe:	4632      	mov	r2, r6
 8000700:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000704:	81a3      	strh	r3, [r4, #12]
 8000706:	4628      	mov	r0, r5
 8000708:	463b      	mov	r3, r7
 800070a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800070e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000712:	f000 b853 	b.w	80007bc <_write_r>

08000716 <__sseek>:
 8000716:	b510      	push	{r4, lr}
 8000718:	460c      	mov	r4, r1
 800071a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800071e:	f000 f829 	bl	8000774 <_lseek_r>
 8000722:	1c43      	adds	r3, r0, #1
 8000724:	89a3      	ldrh	r3, [r4, #12]
 8000726:	bf15      	itete	ne
 8000728:	6560      	strne	r0, [r4, #84]	; 0x54
 800072a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800072e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000732:	81a3      	strheq	r3, [r4, #12]
 8000734:	bf18      	it	ne
 8000736:	81a3      	strhne	r3, [r4, #12]
 8000738:	bd10      	pop	{r4, pc}

0800073a <__sclose>:
 800073a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800073e:	f000 b809 	b.w	8000754 <_close_r>

08000742 <memset>:
 8000742:	4603      	mov	r3, r0
 8000744:	4402      	add	r2, r0
 8000746:	4293      	cmp	r3, r2
 8000748:	d100      	bne.n	800074c <memset+0xa>
 800074a:	4770      	bx	lr
 800074c:	f803 1b01 	strb.w	r1, [r3], #1
 8000750:	e7f9      	b.n	8000746 <memset+0x4>
	...

08000754 <_close_r>:
 8000754:	b538      	push	{r3, r4, r5, lr}
 8000756:	2300      	movs	r3, #0
 8000758:	4d05      	ldr	r5, [pc, #20]	; (8000770 <_close_r+0x1c>)
 800075a:	4604      	mov	r4, r0
 800075c:	4608      	mov	r0, r1
 800075e:	602b      	str	r3, [r5, #0]
 8000760:	f7ff fdb5 	bl	80002ce <_close>
 8000764:	1c43      	adds	r3, r0, #1
 8000766:	d102      	bne.n	800076e <_close_r+0x1a>
 8000768:	682b      	ldr	r3, [r5, #0]
 800076a:	b103      	cbz	r3, 800076e <_close_r+0x1a>
 800076c:	6023      	str	r3, [r4, #0]
 800076e:	bd38      	pop	{r3, r4, r5, pc}
 8000770:	200001b8 	.word	0x200001b8

08000774 <_lseek_r>:
 8000774:	b538      	push	{r3, r4, r5, lr}
 8000776:	4604      	mov	r4, r0
 8000778:	4608      	mov	r0, r1
 800077a:	4611      	mov	r1, r2
 800077c:	2200      	movs	r2, #0
 800077e:	4d05      	ldr	r5, [pc, #20]	; (8000794 <_lseek_r+0x20>)
 8000780:	602a      	str	r2, [r5, #0]
 8000782:	461a      	mov	r2, r3
 8000784:	f7ff fdc7 	bl	8000316 <_lseek>
 8000788:	1c43      	adds	r3, r0, #1
 800078a:	d102      	bne.n	8000792 <_lseek_r+0x1e>
 800078c:	682b      	ldr	r3, [r5, #0]
 800078e:	b103      	cbz	r3, 8000792 <_lseek_r+0x1e>
 8000790:	6023      	str	r3, [r4, #0]
 8000792:	bd38      	pop	{r3, r4, r5, pc}
 8000794:	200001b8 	.word	0x200001b8

08000798 <_read_r>:
 8000798:	b538      	push	{r3, r4, r5, lr}
 800079a:	4604      	mov	r4, r0
 800079c:	4608      	mov	r0, r1
 800079e:	4611      	mov	r1, r2
 80007a0:	2200      	movs	r2, #0
 80007a2:	4d05      	ldr	r5, [pc, #20]	; (80007b8 <_read_r+0x20>)
 80007a4:	602a      	str	r2, [r5, #0]
 80007a6:	461a      	mov	r2, r3
 80007a8:	f7ff fd58 	bl	800025c <_read>
 80007ac:	1c43      	adds	r3, r0, #1
 80007ae:	d102      	bne.n	80007b6 <_read_r+0x1e>
 80007b0:	682b      	ldr	r3, [r5, #0]
 80007b2:	b103      	cbz	r3, 80007b6 <_read_r+0x1e>
 80007b4:	6023      	str	r3, [r4, #0]
 80007b6:	bd38      	pop	{r3, r4, r5, pc}
 80007b8:	200001b8 	.word	0x200001b8

080007bc <_write_r>:
 80007bc:	b538      	push	{r3, r4, r5, lr}
 80007be:	4604      	mov	r4, r0
 80007c0:	4608      	mov	r0, r1
 80007c2:	4611      	mov	r1, r2
 80007c4:	2200      	movs	r2, #0
 80007c6:	4d05      	ldr	r5, [pc, #20]	; (80007dc <_write_r+0x20>)
 80007c8:	602a      	str	r2, [r5, #0]
 80007ca:	461a      	mov	r2, r3
 80007cc:	f7ff fd63 	bl	8000296 <_write>
 80007d0:	1c43      	adds	r3, r0, #1
 80007d2:	d102      	bne.n	80007da <_write_r+0x1e>
 80007d4:	682b      	ldr	r3, [r5, #0]
 80007d6:	b103      	cbz	r3, 80007da <_write_r+0x1e>
 80007d8:	6023      	str	r3, [r4, #0]
 80007da:	bd38      	pop	{r3, r4, r5, pc}
 80007dc:	200001b8 	.word	0x200001b8

080007e0 <__errno>:
 80007e0:	4b01      	ldr	r3, [pc, #4]	; (80007e8 <__errno+0x8>)
 80007e2:	6818      	ldr	r0, [r3, #0]
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	20000058 	.word	0x20000058

080007ec <__libc_init_array>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	2600      	movs	r6, #0
 80007f0:	4d0c      	ldr	r5, [pc, #48]	; (8000824 <__libc_init_array+0x38>)
 80007f2:	4c0d      	ldr	r4, [pc, #52]	; (8000828 <__libc_init_array+0x3c>)
 80007f4:	1b64      	subs	r4, r4, r5
 80007f6:	10a4      	asrs	r4, r4, #2
 80007f8:	42a6      	cmp	r6, r4
 80007fa:	d109      	bne.n	8000810 <__libc_init_array+0x24>
 80007fc:	f000 fdca 	bl	8001394 <_init>
 8000800:	2600      	movs	r6, #0
 8000802:	4d0a      	ldr	r5, [pc, #40]	; (800082c <__libc_init_array+0x40>)
 8000804:	4c0a      	ldr	r4, [pc, #40]	; (8000830 <__libc_init_array+0x44>)
 8000806:	1b64      	subs	r4, r4, r5
 8000808:	10a4      	asrs	r4, r4, #2
 800080a:	42a6      	cmp	r6, r4
 800080c:	d105      	bne.n	800081a <__libc_init_array+0x2e>
 800080e:	bd70      	pop	{r4, r5, r6, pc}
 8000810:	f855 3b04 	ldr.w	r3, [r5], #4
 8000814:	4798      	blx	r3
 8000816:	3601      	adds	r6, #1
 8000818:	e7ee      	b.n	80007f8 <__libc_init_array+0xc>
 800081a:	f855 3b04 	ldr.w	r3, [r5], #4
 800081e:	4798      	blx	r3
 8000820:	3601      	adds	r6, #1
 8000822:	e7f2      	b.n	800080a <__libc_init_array+0x1e>
 8000824:	080013f0 	.word	0x080013f0
 8000828:	080013f0 	.word	0x080013f0
 800082c:	080013f0 	.word	0x080013f0
 8000830:	080013f4 	.word	0x080013f4

08000834 <__retarget_lock_init_recursive>:
 8000834:	4770      	bx	lr

08000836 <__retarget_lock_acquire_recursive>:
 8000836:	4770      	bx	lr

08000838 <__retarget_lock_release_recursive>:
 8000838:	4770      	bx	lr
	...

0800083c <_free_r>:
 800083c:	b538      	push	{r3, r4, r5, lr}
 800083e:	4605      	mov	r5, r0
 8000840:	2900      	cmp	r1, #0
 8000842:	d040      	beq.n	80008c6 <_free_r+0x8a>
 8000844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000848:	1f0c      	subs	r4, r1, #4
 800084a:	2b00      	cmp	r3, #0
 800084c:	bfb8      	it	lt
 800084e:	18e4      	addlt	r4, r4, r3
 8000850:	f000 f8dc 	bl	8000a0c <__malloc_lock>
 8000854:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <_free_r+0x8c>)
 8000856:	6813      	ldr	r3, [r2, #0]
 8000858:	b933      	cbnz	r3, 8000868 <_free_r+0x2c>
 800085a:	6063      	str	r3, [r4, #4]
 800085c:	6014      	str	r4, [r2, #0]
 800085e:	4628      	mov	r0, r5
 8000860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000864:	f000 b8d8 	b.w	8000a18 <__malloc_unlock>
 8000868:	42a3      	cmp	r3, r4
 800086a:	d908      	bls.n	800087e <_free_r+0x42>
 800086c:	6820      	ldr	r0, [r4, #0]
 800086e:	1821      	adds	r1, r4, r0
 8000870:	428b      	cmp	r3, r1
 8000872:	bf01      	itttt	eq
 8000874:	6819      	ldreq	r1, [r3, #0]
 8000876:	685b      	ldreq	r3, [r3, #4]
 8000878:	1809      	addeq	r1, r1, r0
 800087a:	6021      	streq	r1, [r4, #0]
 800087c:	e7ed      	b.n	800085a <_free_r+0x1e>
 800087e:	461a      	mov	r2, r3
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	b10b      	cbz	r3, 8000888 <_free_r+0x4c>
 8000884:	42a3      	cmp	r3, r4
 8000886:	d9fa      	bls.n	800087e <_free_r+0x42>
 8000888:	6811      	ldr	r1, [r2, #0]
 800088a:	1850      	adds	r0, r2, r1
 800088c:	42a0      	cmp	r0, r4
 800088e:	d10b      	bne.n	80008a8 <_free_r+0x6c>
 8000890:	6820      	ldr	r0, [r4, #0]
 8000892:	4401      	add	r1, r0
 8000894:	1850      	adds	r0, r2, r1
 8000896:	4283      	cmp	r3, r0
 8000898:	6011      	str	r1, [r2, #0]
 800089a:	d1e0      	bne.n	800085e <_free_r+0x22>
 800089c:	6818      	ldr	r0, [r3, #0]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	4408      	add	r0, r1
 80008a2:	6010      	str	r0, [r2, #0]
 80008a4:	6053      	str	r3, [r2, #4]
 80008a6:	e7da      	b.n	800085e <_free_r+0x22>
 80008a8:	d902      	bls.n	80008b0 <_free_r+0x74>
 80008aa:	230c      	movs	r3, #12
 80008ac:	602b      	str	r3, [r5, #0]
 80008ae:	e7d6      	b.n	800085e <_free_r+0x22>
 80008b0:	6820      	ldr	r0, [r4, #0]
 80008b2:	1821      	adds	r1, r4, r0
 80008b4:	428b      	cmp	r3, r1
 80008b6:	bf01      	itttt	eq
 80008b8:	6819      	ldreq	r1, [r3, #0]
 80008ba:	685b      	ldreq	r3, [r3, #4]
 80008bc:	1809      	addeq	r1, r1, r0
 80008be:	6021      	streq	r1, [r4, #0]
 80008c0:	6063      	str	r3, [r4, #4]
 80008c2:	6054      	str	r4, [r2, #4]
 80008c4:	e7cb      	b.n	800085e <_free_r+0x22>
 80008c6:	bd38      	pop	{r3, r4, r5, pc}
 80008c8:	200001c0 	.word	0x200001c0

080008cc <sbrk_aligned>:
 80008cc:	b570      	push	{r4, r5, r6, lr}
 80008ce:	4e0e      	ldr	r6, [pc, #56]	; (8000908 <sbrk_aligned+0x3c>)
 80008d0:	460c      	mov	r4, r1
 80008d2:	6831      	ldr	r1, [r6, #0]
 80008d4:	4605      	mov	r5, r0
 80008d6:	b911      	cbnz	r1, 80008de <sbrk_aligned+0x12>
 80008d8:	f000 fcba 	bl	8001250 <_sbrk_r>
 80008dc:	6030      	str	r0, [r6, #0]
 80008de:	4621      	mov	r1, r4
 80008e0:	4628      	mov	r0, r5
 80008e2:	f000 fcb5 	bl	8001250 <_sbrk_r>
 80008e6:	1c43      	adds	r3, r0, #1
 80008e8:	d00a      	beq.n	8000900 <sbrk_aligned+0x34>
 80008ea:	1cc4      	adds	r4, r0, #3
 80008ec:	f024 0403 	bic.w	r4, r4, #3
 80008f0:	42a0      	cmp	r0, r4
 80008f2:	d007      	beq.n	8000904 <sbrk_aligned+0x38>
 80008f4:	1a21      	subs	r1, r4, r0
 80008f6:	4628      	mov	r0, r5
 80008f8:	f000 fcaa 	bl	8001250 <_sbrk_r>
 80008fc:	3001      	adds	r0, #1
 80008fe:	d101      	bne.n	8000904 <sbrk_aligned+0x38>
 8000900:	f04f 34ff 	mov.w	r4, #4294967295
 8000904:	4620      	mov	r0, r4
 8000906:	bd70      	pop	{r4, r5, r6, pc}
 8000908:	200001c4 	.word	0x200001c4

0800090c <_malloc_r>:
 800090c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000910:	1ccd      	adds	r5, r1, #3
 8000912:	f025 0503 	bic.w	r5, r5, #3
 8000916:	3508      	adds	r5, #8
 8000918:	2d0c      	cmp	r5, #12
 800091a:	bf38      	it	cc
 800091c:	250c      	movcc	r5, #12
 800091e:	2d00      	cmp	r5, #0
 8000920:	4607      	mov	r7, r0
 8000922:	db01      	blt.n	8000928 <_malloc_r+0x1c>
 8000924:	42a9      	cmp	r1, r5
 8000926:	d905      	bls.n	8000934 <_malloc_r+0x28>
 8000928:	230c      	movs	r3, #12
 800092a:	2600      	movs	r6, #0
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	4630      	mov	r0, r6
 8000930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000934:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000a08 <_malloc_r+0xfc>
 8000938:	f000 f868 	bl	8000a0c <__malloc_lock>
 800093c:	f8d8 3000 	ldr.w	r3, [r8]
 8000940:	461c      	mov	r4, r3
 8000942:	bb5c      	cbnz	r4, 800099c <_malloc_r+0x90>
 8000944:	4629      	mov	r1, r5
 8000946:	4638      	mov	r0, r7
 8000948:	f7ff ffc0 	bl	80008cc <sbrk_aligned>
 800094c:	1c43      	adds	r3, r0, #1
 800094e:	4604      	mov	r4, r0
 8000950:	d155      	bne.n	80009fe <_malloc_r+0xf2>
 8000952:	f8d8 4000 	ldr.w	r4, [r8]
 8000956:	4626      	mov	r6, r4
 8000958:	2e00      	cmp	r6, #0
 800095a:	d145      	bne.n	80009e8 <_malloc_r+0xdc>
 800095c:	2c00      	cmp	r4, #0
 800095e:	d048      	beq.n	80009f2 <_malloc_r+0xe6>
 8000960:	6823      	ldr	r3, [r4, #0]
 8000962:	4631      	mov	r1, r6
 8000964:	4638      	mov	r0, r7
 8000966:	eb04 0903 	add.w	r9, r4, r3
 800096a:	f000 fc71 	bl	8001250 <_sbrk_r>
 800096e:	4581      	cmp	r9, r0
 8000970:	d13f      	bne.n	80009f2 <_malloc_r+0xe6>
 8000972:	6821      	ldr	r1, [r4, #0]
 8000974:	4638      	mov	r0, r7
 8000976:	1a6d      	subs	r5, r5, r1
 8000978:	4629      	mov	r1, r5
 800097a:	f7ff ffa7 	bl	80008cc <sbrk_aligned>
 800097e:	3001      	adds	r0, #1
 8000980:	d037      	beq.n	80009f2 <_malloc_r+0xe6>
 8000982:	6823      	ldr	r3, [r4, #0]
 8000984:	442b      	add	r3, r5
 8000986:	6023      	str	r3, [r4, #0]
 8000988:	f8d8 3000 	ldr.w	r3, [r8]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d038      	beq.n	8000a02 <_malloc_r+0xf6>
 8000990:	685a      	ldr	r2, [r3, #4]
 8000992:	42a2      	cmp	r2, r4
 8000994:	d12b      	bne.n	80009ee <_malloc_r+0xe2>
 8000996:	2200      	movs	r2, #0
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	e00f      	b.n	80009bc <_malloc_r+0xb0>
 800099c:	6822      	ldr	r2, [r4, #0]
 800099e:	1b52      	subs	r2, r2, r5
 80009a0:	d41f      	bmi.n	80009e2 <_malloc_r+0xd6>
 80009a2:	2a0b      	cmp	r2, #11
 80009a4:	d917      	bls.n	80009d6 <_malloc_r+0xca>
 80009a6:	1961      	adds	r1, r4, r5
 80009a8:	42a3      	cmp	r3, r4
 80009aa:	6025      	str	r5, [r4, #0]
 80009ac:	bf18      	it	ne
 80009ae:	6059      	strne	r1, [r3, #4]
 80009b0:	6863      	ldr	r3, [r4, #4]
 80009b2:	bf08      	it	eq
 80009b4:	f8c8 1000 	streq.w	r1, [r8]
 80009b8:	5162      	str	r2, [r4, r5]
 80009ba:	604b      	str	r3, [r1, #4]
 80009bc:	4638      	mov	r0, r7
 80009be:	f104 060b 	add.w	r6, r4, #11
 80009c2:	f000 f829 	bl	8000a18 <__malloc_unlock>
 80009c6:	f026 0607 	bic.w	r6, r6, #7
 80009ca:	1d23      	adds	r3, r4, #4
 80009cc:	1af2      	subs	r2, r6, r3
 80009ce:	d0ae      	beq.n	800092e <_malloc_r+0x22>
 80009d0:	1b9b      	subs	r3, r3, r6
 80009d2:	50a3      	str	r3, [r4, r2]
 80009d4:	e7ab      	b.n	800092e <_malloc_r+0x22>
 80009d6:	42a3      	cmp	r3, r4
 80009d8:	6862      	ldr	r2, [r4, #4]
 80009da:	d1dd      	bne.n	8000998 <_malloc_r+0x8c>
 80009dc:	f8c8 2000 	str.w	r2, [r8]
 80009e0:	e7ec      	b.n	80009bc <_malloc_r+0xb0>
 80009e2:	4623      	mov	r3, r4
 80009e4:	6864      	ldr	r4, [r4, #4]
 80009e6:	e7ac      	b.n	8000942 <_malloc_r+0x36>
 80009e8:	4634      	mov	r4, r6
 80009ea:	6876      	ldr	r6, [r6, #4]
 80009ec:	e7b4      	b.n	8000958 <_malloc_r+0x4c>
 80009ee:	4613      	mov	r3, r2
 80009f0:	e7cc      	b.n	800098c <_malloc_r+0x80>
 80009f2:	230c      	movs	r3, #12
 80009f4:	4638      	mov	r0, r7
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	f000 f80e 	bl	8000a18 <__malloc_unlock>
 80009fc:	e797      	b.n	800092e <_malloc_r+0x22>
 80009fe:	6025      	str	r5, [r4, #0]
 8000a00:	e7dc      	b.n	80009bc <_malloc_r+0xb0>
 8000a02:	605b      	str	r3, [r3, #4]
 8000a04:	deff      	udf	#255	; 0xff
 8000a06:	bf00      	nop
 8000a08:	200001c0 	.word	0x200001c0

08000a0c <__malloc_lock>:
 8000a0c:	4801      	ldr	r0, [pc, #4]	; (8000a14 <__malloc_lock+0x8>)
 8000a0e:	f7ff bf12 	b.w	8000836 <__retarget_lock_acquire_recursive>
 8000a12:	bf00      	nop
 8000a14:	200001bc 	.word	0x200001bc

08000a18 <__malloc_unlock>:
 8000a18:	4801      	ldr	r0, [pc, #4]	; (8000a20 <__malloc_unlock+0x8>)
 8000a1a:	f7ff bf0d 	b.w	8000838 <__retarget_lock_release_recursive>
 8000a1e:	bf00      	nop
 8000a20:	200001bc 	.word	0x200001bc

08000a24 <__sfputc_r>:
 8000a24:	6893      	ldr	r3, [r2, #8]
 8000a26:	b410      	push	{r4}
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	6093      	str	r3, [r2, #8]
 8000a2e:	da07      	bge.n	8000a40 <__sfputc_r+0x1c>
 8000a30:	6994      	ldr	r4, [r2, #24]
 8000a32:	42a3      	cmp	r3, r4
 8000a34:	db01      	blt.n	8000a3a <__sfputc_r+0x16>
 8000a36:	290a      	cmp	r1, #10
 8000a38:	d102      	bne.n	8000a40 <__sfputc_r+0x1c>
 8000a3a:	bc10      	pop	{r4}
 8000a3c:	f000 bb72 	b.w	8001124 <__swbuf_r>
 8000a40:	6813      	ldr	r3, [r2, #0]
 8000a42:	1c58      	adds	r0, r3, #1
 8000a44:	6010      	str	r0, [r2, #0]
 8000a46:	7019      	strb	r1, [r3, #0]
 8000a48:	4608      	mov	r0, r1
 8000a4a:	bc10      	pop	{r4}
 8000a4c:	4770      	bx	lr

08000a4e <__sfputs_r>:
 8000a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a50:	4606      	mov	r6, r0
 8000a52:	460f      	mov	r7, r1
 8000a54:	4614      	mov	r4, r2
 8000a56:	18d5      	adds	r5, r2, r3
 8000a58:	42ac      	cmp	r4, r5
 8000a5a:	d101      	bne.n	8000a60 <__sfputs_r+0x12>
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	e007      	b.n	8000a70 <__sfputs_r+0x22>
 8000a60:	463a      	mov	r2, r7
 8000a62:	4630      	mov	r0, r6
 8000a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a68:	f7ff ffdc 	bl	8000a24 <__sfputc_r>
 8000a6c:	1c43      	adds	r3, r0, #1
 8000a6e:	d1f3      	bne.n	8000a58 <__sfputs_r+0xa>
 8000a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000a74 <_vfiprintf_r>:
 8000a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a78:	460d      	mov	r5, r1
 8000a7a:	4614      	mov	r4, r2
 8000a7c:	4698      	mov	r8, r3
 8000a7e:	4606      	mov	r6, r0
 8000a80:	b09d      	sub	sp, #116	; 0x74
 8000a82:	b118      	cbz	r0, 8000a8c <_vfiprintf_r+0x18>
 8000a84:	6a03      	ldr	r3, [r0, #32]
 8000a86:	b90b      	cbnz	r3, 8000a8c <_vfiprintf_r+0x18>
 8000a88:	f7ff fdd0 	bl	800062c <__sinit>
 8000a8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000a8e:	07d9      	lsls	r1, r3, #31
 8000a90:	d405      	bmi.n	8000a9e <_vfiprintf_r+0x2a>
 8000a92:	89ab      	ldrh	r3, [r5, #12]
 8000a94:	059a      	lsls	r2, r3, #22
 8000a96:	d402      	bmi.n	8000a9e <_vfiprintf_r+0x2a>
 8000a98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000a9a:	f7ff fecc 	bl	8000836 <__retarget_lock_acquire_recursive>
 8000a9e:	89ab      	ldrh	r3, [r5, #12]
 8000aa0:	071b      	lsls	r3, r3, #28
 8000aa2:	d501      	bpl.n	8000aa8 <_vfiprintf_r+0x34>
 8000aa4:	692b      	ldr	r3, [r5, #16]
 8000aa6:	b99b      	cbnz	r3, 8000ad0 <_vfiprintf_r+0x5c>
 8000aa8:	4629      	mov	r1, r5
 8000aaa:	4630      	mov	r0, r6
 8000aac:	f000 fb78 	bl	80011a0 <__swsetup_r>
 8000ab0:	b170      	cbz	r0, 8000ad0 <_vfiprintf_r+0x5c>
 8000ab2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ab4:	07dc      	lsls	r4, r3, #31
 8000ab6:	d504      	bpl.n	8000ac2 <_vfiprintf_r+0x4e>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	b01d      	add	sp, #116	; 0x74
 8000abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ac2:	89ab      	ldrh	r3, [r5, #12]
 8000ac4:	0598      	lsls	r0, r3, #22
 8000ac6:	d4f7      	bmi.n	8000ab8 <_vfiprintf_r+0x44>
 8000ac8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000aca:	f7ff feb5 	bl	8000838 <__retarget_lock_release_recursive>
 8000ace:	e7f3      	b.n	8000ab8 <_vfiprintf_r+0x44>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8000ad4:	2320      	movs	r3, #32
 8000ad6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000ada:	2330      	movs	r3, #48	; 0x30
 8000adc:	f04f 0901 	mov.w	r9, #1
 8000ae0:	f8cd 800c 	str.w	r8, [sp, #12]
 8000ae4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000c94 <_vfiprintf_r+0x220>
 8000ae8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000aec:	4623      	mov	r3, r4
 8000aee:	469a      	mov	sl, r3
 8000af0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000af4:	b10a      	cbz	r2, 8000afa <_vfiprintf_r+0x86>
 8000af6:	2a25      	cmp	r2, #37	; 0x25
 8000af8:	d1f9      	bne.n	8000aee <_vfiprintf_r+0x7a>
 8000afa:	ebba 0b04 	subs.w	fp, sl, r4
 8000afe:	d00b      	beq.n	8000b18 <_vfiprintf_r+0xa4>
 8000b00:	465b      	mov	r3, fp
 8000b02:	4622      	mov	r2, r4
 8000b04:	4629      	mov	r1, r5
 8000b06:	4630      	mov	r0, r6
 8000b08:	f7ff ffa1 	bl	8000a4e <__sfputs_r>
 8000b0c:	3001      	adds	r0, #1
 8000b0e:	f000 80a9 	beq.w	8000c64 <_vfiprintf_r+0x1f0>
 8000b12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000b14:	445a      	add	r2, fp
 8000b16:	9209      	str	r2, [sp, #36]	; 0x24
 8000b18:	f89a 3000 	ldrb.w	r3, [sl]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	f000 80a1 	beq.w	8000c64 <_vfiprintf_r+0x1f0>
 8000b22:	2300      	movs	r3, #0
 8000b24:	f04f 32ff 	mov.w	r2, #4294967295
 8000b28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b2c:	f10a 0a01 	add.w	sl, sl, #1
 8000b30:	9304      	str	r3, [sp, #16]
 8000b32:	9307      	str	r3, [sp, #28]
 8000b34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000b38:	931a      	str	r3, [sp, #104]	; 0x68
 8000b3a:	4654      	mov	r4, sl
 8000b3c:	2205      	movs	r2, #5
 8000b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b42:	4854      	ldr	r0, [pc, #336]	; (8000c94 <_vfiprintf_r+0x220>)
 8000b44:	f000 fb94 	bl	8001270 <memchr>
 8000b48:	9a04      	ldr	r2, [sp, #16]
 8000b4a:	b9d8      	cbnz	r0, 8000b84 <_vfiprintf_r+0x110>
 8000b4c:	06d1      	lsls	r1, r2, #27
 8000b4e:	bf44      	itt	mi
 8000b50:	2320      	movmi	r3, #32
 8000b52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b56:	0713      	lsls	r3, r2, #28
 8000b58:	bf44      	itt	mi
 8000b5a:	232b      	movmi	r3, #43	; 0x2b
 8000b5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b60:	f89a 3000 	ldrb.w	r3, [sl]
 8000b64:	2b2a      	cmp	r3, #42	; 0x2a
 8000b66:	d015      	beq.n	8000b94 <_vfiprintf_r+0x120>
 8000b68:	4654      	mov	r4, sl
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f04f 0c0a 	mov.w	ip, #10
 8000b70:	9a07      	ldr	r2, [sp, #28]
 8000b72:	4621      	mov	r1, r4
 8000b74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b78:	3b30      	subs	r3, #48	; 0x30
 8000b7a:	2b09      	cmp	r3, #9
 8000b7c:	d94d      	bls.n	8000c1a <_vfiprintf_r+0x1a6>
 8000b7e:	b1b0      	cbz	r0, 8000bae <_vfiprintf_r+0x13a>
 8000b80:	9207      	str	r2, [sp, #28]
 8000b82:	e014      	b.n	8000bae <_vfiprintf_r+0x13a>
 8000b84:	eba0 0308 	sub.w	r3, r0, r8
 8000b88:	fa09 f303 	lsl.w	r3, r9, r3
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	46a2      	mov	sl, r4
 8000b90:	9304      	str	r3, [sp, #16]
 8000b92:	e7d2      	b.n	8000b3a <_vfiprintf_r+0xc6>
 8000b94:	9b03      	ldr	r3, [sp, #12]
 8000b96:	1d19      	adds	r1, r3, #4
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	9103      	str	r1, [sp, #12]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	bfbb      	ittet	lt
 8000ba0:	425b      	neglt	r3, r3
 8000ba2:	f042 0202 	orrlt.w	r2, r2, #2
 8000ba6:	9307      	strge	r3, [sp, #28]
 8000ba8:	9307      	strlt	r3, [sp, #28]
 8000baa:	bfb8      	it	lt
 8000bac:	9204      	strlt	r2, [sp, #16]
 8000bae:	7823      	ldrb	r3, [r4, #0]
 8000bb0:	2b2e      	cmp	r3, #46	; 0x2e
 8000bb2:	d10c      	bne.n	8000bce <_vfiprintf_r+0x15a>
 8000bb4:	7863      	ldrb	r3, [r4, #1]
 8000bb6:	2b2a      	cmp	r3, #42	; 0x2a
 8000bb8:	d134      	bne.n	8000c24 <_vfiprintf_r+0x1b0>
 8000bba:	9b03      	ldr	r3, [sp, #12]
 8000bbc:	3402      	adds	r4, #2
 8000bbe:	1d1a      	adds	r2, r3, #4
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	9203      	str	r2, [sp, #12]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	bfb8      	it	lt
 8000bc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8000bcc:	9305      	str	r3, [sp, #20]
 8000bce:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000c98 <_vfiprintf_r+0x224>
 8000bd2:	2203      	movs	r2, #3
 8000bd4:	4650      	mov	r0, sl
 8000bd6:	7821      	ldrb	r1, [r4, #0]
 8000bd8:	f000 fb4a 	bl	8001270 <memchr>
 8000bdc:	b138      	cbz	r0, 8000bee <_vfiprintf_r+0x17a>
 8000bde:	2240      	movs	r2, #64	; 0x40
 8000be0:	9b04      	ldr	r3, [sp, #16]
 8000be2:	eba0 000a 	sub.w	r0, r0, sl
 8000be6:	4082      	lsls	r2, r0
 8000be8:	4313      	orrs	r3, r2
 8000bea:	3401      	adds	r4, #1
 8000bec:	9304      	str	r3, [sp, #16]
 8000bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bf2:	2206      	movs	r2, #6
 8000bf4:	4829      	ldr	r0, [pc, #164]	; (8000c9c <_vfiprintf_r+0x228>)
 8000bf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000bfa:	f000 fb39 	bl	8001270 <memchr>
 8000bfe:	2800      	cmp	r0, #0
 8000c00:	d03f      	beq.n	8000c82 <_vfiprintf_r+0x20e>
 8000c02:	4b27      	ldr	r3, [pc, #156]	; (8000ca0 <_vfiprintf_r+0x22c>)
 8000c04:	bb1b      	cbnz	r3, 8000c4e <_vfiprintf_r+0x1da>
 8000c06:	9b03      	ldr	r3, [sp, #12]
 8000c08:	3307      	adds	r3, #7
 8000c0a:	f023 0307 	bic.w	r3, r3, #7
 8000c0e:	3308      	adds	r3, #8
 8000c10:	9303      	str	r3, [sp, #12]
 8000c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c14:	443b      	add	r3, r7
 8000c16:	9309      	str	r3, [sp, #36]	; 0x24
 8000c18:	e768      	b.n	8000aec <_vfiprintf_r+0x78>
 8000c1a:	460c      	mov	r4, r1
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c22:	e7a6      	b.n	8000b72 <_vfiprintf_r+0xfe>
 8000c24:	2300      	movs	r3, #0
 8000c26:	f04f 0c0a 	mov.w	ip, #10
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	3401      	adds	r4, #1
 8000c2e:	9305      	str	r3, [sp, #20]
 8000c30:	4620      	mov	r0, r4
 8000c32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c36:	3a30      	subs	r2, #48	; 0x30
 8000c38:	2a09      	cmp	r2, #9
 8000c3a:	d903      	bls.n	8000c44 <_vfiprintf_r+0x1d0>
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d0c6      	beq.n	8000bce <_vfiprintf_r+0x15a>
 8000c40:	9105      	str	r1, [sp, #20]
 8000c42:	e7c4      	b.n	8000bce <_vfiprintf_r+0x15a>
 8000c44:	4604      	mov	r4, r0
 8000c46:	2301      	movs	r3, #1
 8000c48:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c4c:	e7f0      	b.n	8000c30 <_vfiprintf_r+0x1bc>
 8000c4e:	ab03      	add	r3, sp, #12
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	462a      	mov	r2, r5
 8000c54:	4630      	mov	r0, r6
 8000c56:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <_vfiprintf_r+0x230>)
 8000c58:	a904      	add	r1, sp, #16
 8000c5a:	f3af 8000 	nop.w
 8000c5e:	4607      	mov	r7, r0
 8000c60:	1c78      	adds	r0, r7, #1
 8000c62:	d1d6      	bne.n	8000c12 <_vfiprintf_r+0x19e>
 8000c64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c66:	07d9      	lsls	r1, r3, #31
 8000c68:	d405      	bmi.n	8000c76 <_vfiprintf_r+0x202>
 8000c6a:	89ab      	ldrh	r3, [r5, #12]
 8000c6c:	059a      	lsls	r2, r3, #22
 8000c6e:	d402      	bmi.n	8000c76 <_vfiprintf_r+0x202>
 8000c70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c72:	f7ff fde1 	bl	8000838 <__retarget_lock_release_recursive>
 8000c76:	89ab      	ldrh	r3, [r5, #12]
 8000c78:	065b      	lsls	r3, r3, #25
 8000c7a:	f53f af1d 	bmi.w	8000ab8 <_vfiprintf_r+0x44>
 8000c7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000c80:	e71c      	b.n	8000abc <_vfiprintf_r+0x48>
 8000c82:	ab03      	add	r3, sp, #12
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	462a      	mov	r2, r5
 8000c88:	4630      	mov	r0, r6
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <_vfiprintf_r+0x230>)
 8000c8c:	a904      	add	r1, sp, #16
 8000c8e:	f000 f87d 	bl	8000d8c <_printf_i>
 8000c92:	e7e4      	b.n	8000c5e <_vfiprintf_r+0x1ea>
 8000c94:	080013bb 	.word	0x080013bb
 8000c98:	080013c1 	.word	0x080013c1
 8000c9c:	080013c5 	.word	0x080013c5
 8000ca0:	00000000 	.word	0x00000000
 8000ca4:	08000a4f 	.word	0x08000a4f

08000ca8 <_printf_common>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	4616      	mov	r6, r2
 8000cae:	4699      	mov	r9, r3
 8000cb0:	688a      	ldr	r2, [r1, #8]
 8000cb2:	690b      	ldr	r3, [r1, #16]
 8000cb4:	4607      	mov	r7, r0
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	bfb8      	it	lt
 8000cba:	4613      	movlt	r3, r2
 8000cbc:	6033      	str	r3, [r6, #0]
 8000cbe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000cc2:	460c      	mov	r4, r1
 8000cc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000cc8:	b10a      	cbz	r2, 8000cce <_printf_common+0x26>
 8000cca:	3301      	adds	r3, #1
 8000ccc:	6033      	str	r3, [r6, #0]
 8000cce:	6823      	ldr	r3, [r4, #0]
 8000cd0:	0699      	lsls	r1, r3, #26
 8000cd2:	bf42      	ittt	mi
 8000cd4:	6833      	ldrmi	r3, [r6, #0]
 8000cd6:	3302      	addmi	r3, #2
 8000cd8:	6033      	strmi	r3, [r6, #0]
 8000cda:	6825      	ldr	r5, [r4, #0]
 8000cdc:	f015 0506 	ands.w	r5, r5, #6
 8000ce0:	d106      	bne.n	8000cf0 <_printf_common+0x48>
 8000ce2:	f104 0a19 	add.w	sl, r4, #25
 8000ce6:	68e3      	ldr	r3, [r4, #12]
 8000ce8:	6832      	ldr	r2, [r6, #0]
 8000cea:	1a9b      	subs	r3, r3, r2
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	dc2b      	bgt.n	8000d48 <_printf_common+0xa0>
 8000cf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000cf4:	1e13      	subs	r3, r2, #0
 8000cf6:	6822      	ldr	r2, [r4, #0]
 8000cf8:	bf18      	it	ne
 8000cfa:	2301      	movne	r3, #1
 8000cfc:	0692      	lsls	r2, r2, #26
 8000cfe:	d430      	bmi.n	8000d62 <_printf_common+0xba>
 8000d00:	4649      	mov	r1, r9
 8000d02:	4638      	mov	r0, r7
 8000d04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d08:	47c0      	blx	r8
 8000d0a:	3001      	adds	r0, #1
 8000d0c:	d023      	beq.n	8000d56 <_printf_common+0xae>
 8000d0e:	6823      	ldr	r3, [r4, #0]
 8000d10:	6922      	ldr	r2, [r4, #16]
 8000d12:	f003 0306 	and.w	r3, r3, #6
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	bf14      	ite	ne
 8000d1a:	2500      	movne	r5, #0
 8000d1c:	6833      	ldreq	r3, [r6, #0]
 8000d1e:	f04f 0600 	mov.w	r6, #0
 8000d22:	bf08      	it	eq
 8000d24:	68e5      	ldreq	r5, [r4, #12]
 8000d26:	f104 041a 	add.w	r4, r4, #26
 8000d2a:	bf08      	it	eq
 8000d2c:	1aed      	subeq	r5, r5, r3
 8000d2e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8000d32:	bf08      	it	eq
 8000d34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	bfc4      	itt	gt
 8000d3c:	1a9b      	subgt	r3, r3, r2
 8000d3e:	18ed      	addgt	r5, r5, r3
 8000d40:	42b5      	cmp	r5, r6
 8000d42:	d11a      	bne.n	8000d7a <_printf_common+0xd2>
 8000d44:	2000      	movs	r0, #0
 8000d46:	e008      	b.n	8000d5a <_printf_common+0xb2>
 8000d48:	2301      	movs	r3, #1
 8000d4a:	4652      	mov	r2, sl
 8000d4c:	4649      	mov	r1, r9
 8000d4e:	4638      	mov	r0, r7
 8000d50:	47c0      	blx	r8
 8000d52:	3001      	adds	r0, #1
 8000d54:	d103      	bne.n	8000d5e <_printf_common+0xb6>
 8000d56:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	3501      	adds	r5, #1
 8000d60:	e7c1      	b.n	8000ce6 <_printf_common+0x3e>
 8000d62:	2030      	movs	r0, #48	; 0x30
 8000d64:	18e1      	adds	r1, r4, r3
 8000d66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000d6a:	1c5a      	adds	r2, r3, #1
 8000d6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000d70:	4422      	add	r2, r4
 8000d72:	3302      	adds	r3, #2
 8000d74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000d78:	e7c2      	b.n	8000d00 <_printf_common+0x58>
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	4622      	mov	r2, r4
 8000d7e:	4649      	mov	r1, r9
 8000d80:	4638      	mov	r0, r7
 8000d82:	47c0      	blx	r8
 8000d84:	3001      	adds	r0, #1
 8000d86:	d0e6      	beq.n	8000d56 <_printf_common+0xae>
 8000d88:	3601      	adds	r6, #1
 8000d8a:	e7d9      	b.n	8000d40 <_printf_common+0x98>

08000d8c <_printf_i>:
 8000d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d90:	7e0f      	ldrb	r7, [r1, #24]
 8000d92:	4691      	mov	r9, r2
 8000d94:	2f78      	cmp	r7, #120	; 0x78
 8000d96:	4680      	mov	r8, r0
 8000d98:	460c      	mov	r4, r1
 8000d9a:	469a      	mov	sl, r3
 8000d9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000d9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000da2:	d807      	bhi.n	8000db4 <_printf_i+0x28>
 8000da4:	2f62      	cmp	r7, #98	; 0x62
 8000da6:	d80a      	bhi.n	8000dbe <_printf_i+0x32>
 8000da8:	2f00      	cmp	r7, #0
 8000daa:	f000 80d5 	beq.w	8000f58 <_printf_i+0x1cc>
 8000dae:	2f58      	cmp	r7, #88	; 0x58
 8000db0:	f000 80c1 	beq.w	8000f36 <_printf_i+0x1aa>
 8000db4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000db8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000dbc:	e03a      	b.n	8000e34 <_printf_i+0xa8>
 8000dbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000dc2:	2b15      	cmp	r3, #21
 8000dc4:	d8f6      	bhi.n	8000db4 <_printf_i+0x28>
 8000dc6:	a101      	add	r1, pc, #4	; (adr r1, 8000dcc <_printf_i+0x40>)
 8000dc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000dcc:	08000e25 	.word	0x08000e25
 8000dd0:	08000e39 	.word	0x08000e39
 8000dd4:	08000db5 	.word	0x08000db5
 8000dd8:	08000db5 	.word	0x08000db5
 8000ddc:	08000db5 	.word	0x08000db5
 8000de0:	08000db5 	.word	0x08000db5
 8000de4:	08000e39 	.word	0x08000e39
 8000de8:	08000db5 	.word	0x08000db5
 8000dec:	08000db5 	.word	0x08000db5
 8000df0:	08000db5 	.word	0x08000db5
 8000df4:	08000db5 	.word	0x08000db5
 8000df8:	08000f3f 	.word	0x08000f3f
 8000dfc:	08000e65 	.word	0x08000e65
 8000e00:	08000ef9 	.word	0x08000ef9
 8000e04:	08000db5 	.word	0x08000db5
 8000e08:	08000db5 	.word	0x08000db5
 8000e0c:	08000f61 	.word	0x08000f61
 8000e10:	08000db5 	.word	0x08000db5
 8000e14:	08000e65 	.word	0x08000e65
 8000e18:	08000db5 	.word	0x08000db5
 8000e1c:	08000db5 	.word	0x08000db5
 8000e20:	08000f01 	.word	0x08000f01
 8000e24:	682b      	ldr	r3, [r5, #0]
 8000e26:	1d1a      	adds	r2, r3, #4
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	602a      	str	r2, [r5, #0]
 8000e2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000e34:	2301      	movs	r3, #1
 8000e36:	e0a0      	b.n	8000f7a <_printf_i+0x1ee>
 8000e38:	6820      	ldr	r0, [r4, #0]
 8000e3a:	682b      	ldr	r3, [r5, #0]
 8000e3c:	0607      	lsls	r7, r0, #24
 8000e3e:	f103 0104 	add.w	r1, r3, #4
 8000e42:	6029      	str	r1, [r5, #0]
 8000e44:	d501      	bpl.n	8000e4a <_printf_i+0xbe>
 8000e46:	681e      	ldr	r6, [r3, #0]
 8000e48:	e003      	b.n	8000e52 <_printf_i+0xc6>
 8000e4a:	0646      	lsls	r6, r0, #25
 8000e4c:	d5fb      	bpl.n	8000e46 <_printf_i+0xba>
 8000e4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	da03      	bge.n	8000e5e <_printf_i+0xd2>
 8000e56:	232d      	movs	r3, #45	; 0x2d
 8000e58:	4276      	negs	r6, r6
 8000e5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e5e:	230a      	movs	r3, #10
 8000e60:	4859      	ldr	r0, [pc, #356]	; (8000fc8 <_printf_i+0x23c>)
 8000e62:	e012      	b.n	8000e8a <_printf_i+0xfe>
 8000e64:	682b      	ldr	r3, [r5, #0]
 8000e66:	6820      	ldr	r0, [r4, #0]
 8000e68:	1d19      	adds	r1, r3, #4
 8000e6a:	6029      	str	r1, [r5, #0]
 8000e6c:	0605      	lsls	r5, r0, #24
 8000e6e:	d501      	bpl.n	8000e74 <_printf_i+0xe8>
 8000e70:	681e      	ldr	r6, [r3, #0]
 8000e72:	e002      	b.n	8000e7a <_printf_i+0xee>
 8000e74:	0641      	lsls	r1, r0, #25
 8000e76:	d5fb      	bpl.n	8000e70 <_printf_i+0xe4>
 8000e78:	881e      	ldrh	r6, [r3, #0]
 8000e7a:	2f6f      	cmp	r7, #111	; 0x6f
 8000e7c:	bf0c      	ite	eq
 8000e7e:	2308      	moveq	r3, #8
 8000e80:	230a      	movne	r3, #10
 8000e82:	4851      	ldr	r0, [pc, #324]	; (8000fc8 <_printf_i+0x23c>)
 8000e84:	2100      	movs	r1, #0
 8000e86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000e8a:	6865      	ldr	r5, [r4, #4]
 8000e8c:	2d00      	cmp	r5, #0
 8000e8e:	bfa8      	it	ge
 8000e90:	6821      	ldrge	r1, [r4, #0]
 8000e92:	60a5      	str	r5, [r4, #8]
 8000e94:	bfa4      	itt	ge
 8000e96:	f021 0104 	bicge.w	r1, r1, #4
 8000e9a:	6021      	strge	r1, [r4, #0]
 8000e9c:	b90e      	cbnz	r6, 8000ea2 <_printf_i+0x116>
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d04b      	beq.n	8000f3a <_printf_i+0x1ae>
 8000ea2:	4615      	mov	r5, r2
 8000ea4:	fbb6 f1f3 	udiv	r1, r6, r3
 8000ea8:	fb03 6711 	mls	r7, r3, r1, r6
 8000eac:	5dc7      	ldrb	r7, [r0, r7]
 8000eae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000eb2:	4637      	mov	r7, r6
 8000eb4:	42bb      	cmp	r3, r7
 8000eb6:	460e      	mov	r6, r1
 8000eb8:	d9f4      	bls.n	8000ea4 <_printf_i+0x118>
 8000eba:	2b08      	cmp	r3, #8
 8000ebc:	d10b      	bne.n	8000ed6 <_printf_i+0x14a>
 8000ebe:	6823      	ldr	r3, [r4, #0]
 8000ec0:	07de      	lsls	r6, r3, #31
 8000ec2:	d508      	bpl.n	8000ed6 <_printf_i+0x14a>
 8000ec4:	6923      	ldr	r3, [r4, #16]
 8000ec6:	6861      	ldr	r1, [r4, #4]
 8000ec8:	4299      	cmp	r1, r3
 8000eca:	bfde      	ittt	le
 8000ecc:	2330      	movle	r3, #48	; 0x30
 8000ece:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000ed2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000ed6:	1b52      	subs	r2, r2, r5
 8000ed8:	6122      	str	r2, [r4, #16]
 8000eda:	464b      	mov	r3, r9
 8000edc:	4621      	mov	r1, r4
 8000ede:	4640      	mov	r0, r8
 8000ee0:	f8cd a000 	str.w	sl, [sp]
 8000ee4:	aa03      	add	r2, sp, #12
 8000ee6:	f7ff fedf 	bl	8000ca8 <_printf_common>
 8000eea:	3001      	adds	r0, #1
 8000eec:	d14a      	bne.n	8000f84 <_printf_i+0x1f8>
 8000eee:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef2:	b004      	add	sp, #16
 8000ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef8:	6823      	ldr	r3, [r4, #0]
 8000efa:	f043 0320 	orr.w	r3, r3, #32
 8000efe:	6023      	str	r3, [r4, #0]
 8000f00:	2778      	movs	r7, #120	; 0x78
 8000f02:	4832      	ldr	r0, [pc, #200]	; (8000fcc <_printf_i+0x240>)
 8000f04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000f08:	6823      	ldr	r3, [r4, #0]
 8000f0a:	6829      	ldr	r1, [r5, #0]
 8000f0c:	061f      	lsls	r7, r3, #24
 8000f0e:	f851 6b04 	ldr.w	r6, [r1], #4
 8000f12:	d402      	bmi.n	8000f1a <_printf_i+0x18e>
 8000f14:	065f      	lsls	r7, r3, #25
 8000f16:	bf48      	it	mi
 8000f18:	b2b6      	uxthmi	r6, r6
 8000f1a:	07df      	lsls	r7, r3, #31
 8000f1c:	bf48      	it	mi
 8000f1e:	f043 0320 	orrmi.w	r3, r3, #32
 8000f22:	6029      	str	r1, [r5, #0]
 8000f24:	bf48      	it	mi
 8000f26:	6023      	strmi	r3, [r4, #0]
 8000f28:	b91e      	cbnz	r6, 8000f32 <_printf_i+0x1a6>
 8000f2a:	6823      	ldr	r3, [r4, #0]
 8000f2c:	f023 0320 	bic.w	r3, r3, #32
 8000f30:	6023      	str	r3, [r4, #0]
 8000f32:	2310      	movs	r3, #16
 8000f34:	e7a6      	b.n	8000e84 <_printf_i+0xf8>
 8000f36:	4824      	ldr	r0, [pc, #144]	; (8000fc8 <_printf_i+0x23c>)
 8000f38:	e7e4      	b.n	8000f04 <_printf_i+0x178>
 8000f3a:	4615      	mov	r5, r2
 8000f3c:	e7bd      	b.n	8000eba <_printf_i+0x12e>
 8000f3e:	682b      	ldr	r3, [r5, #0]
 8000f40:	6826      	ldr	r6, [r4, #0]
 8000f42:	1d18      	adds	r0, r3, #4
 8000f44:	6961      	ldr	r1, [r4, #20]
 8000f46:	6028      	str	r0, [r5, #0]
 8000f48:	0635      	lsls	r5, r6, #24
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	d501      	bpl.n	8000f52 <_printf_i+0x1c6>
 8000f4e:	6019      	str	r1, [r3, #0]
 8000f50:	e002      	b.n	8000f58 <_printf_i+0x1cc>
 8000f52:	0670      	lsls	r0, r6, #25
 8000f54:	d5fb      	bpl.n	8000f4e <_printf_i+0x1c2>
 8000f56:	8019      	strh	r1, [r3, #0]
 8000f58:	2300      	movs	r3, #0
 8000f5a:	4615      	mov	r5, r2
 8000f5c:	6123      	str	r3, [r4, #16]
 8000f5e:	e7bc      	b.n	8000eda <_printf_i+0x14e>
 8000f60:	682b      	ldr	r3, [r5, #0]
 8000f62:	2100      	movs	r1, #0
 8000f64:	1d1a      	adds	r2, r3, #4
 8000f66:	602a      	str	r2, [r5, #0]
 8000f68:	681d      	ldr	r5, [r3, #0]
 8000f6a:	6862      	ldr	r2, [r4, #4]
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	f000 f97f 	bl	8001270 <memchr>
 8000f72:	b108      	cbz	r0, 8000f78 <_printf_i+0x1ec>
 8000f74:	1b40      	subs	r0, r0, r5
 8000f76:	6060      	str	r0, [r4, #4]
 8000f78:	6863      	ldr	r3, [r4, #4]
 8000f7a:	6123      	str	r3, [r4, #16]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f82:	e7aa      	b.n	8000eda <_printf_i+0x14e>
 8000f84:	462a      	mov	r2, r5
 8000f86:	4649      	mov	r1, r9
 8000f88:	4640      	mov	r0, r8
 8000f8a:	6923      	ldr	r3, [r4, #16]
 8000f8c:	47d0      	blx	sl
 8000f8e:	3001      	adds	r0, #1
 8000f90:	d0ad      	beq.n	8000eee <_printf_i+0x162>
 8000f92:	6823      	ldr	r3, [r4, #0]
 8000f94:	079b      	lsls	r3, r3, #30
 8000f96:	d413      	bmi.n	8000fc0 <_printf_i+0x234>
 8000f98:	68e0      	ldr	r0, [r4, #12]
 8000f9a:	9b03      	ldr	r3, [sp, #12]
 8000f9c:	4298      	cmp	r0, r3
 8000f9e:	bfb8      	it	lt
 8000fa0:	4618      	movlt	r0, r3
 8000fa2:	e7a6      	b.n	8000ef2 <_printf_i+0x166>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	4632      	mov	r2, r6
 8000fa8:	4649      	mov	r1, r9
 8000faa:	4640      	mov	r0, r8
 8000fac:	47d0      	blx	sl
 8000fae:	3001      	adds	r0, #1
 8000fb0:	d09d      	beq.n	8000eee <_printf_i+0x162>
 8000fb2:	3501      	adds	r5, #1
 8000fb4:	68e3      	ldr	r3, [r4, #12]
 8000fb6:	9903      	ldr	r1, [sp, #12]
 8000fb8:	1a5b      	subs	r3, r3, r1
 8000fba:	42ab      	cmp	r3, r5
 8000fbc:	dcf2      	bgt.n	8000fa4 <_printf_i+0x218>
 8000fbe:	e7eb      	b.n	8000f98 <_printf_i+0x20c>
 8000fc0:	2500      	movs	r5, #0
 8000fc2:	f104 0619 	add.w	r6, r4, #25
 8000fc6:	e7f5      	b.n	8000fb4 <_printf_i+0x228>
 8000fc8:	080013cc 	.word	0x080013cc
 8000fcc:	080013dd 	.word	0x080013dd

08000fd0 <__sflush_r>:
 8000fd0:	898a      	ldrh	r2, [r1, #12]
 8000fd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fd4:	4605      	mov	r5, r0
 8000fd6:	0710      	lsls	r0, r2, #28
 8000fd8:	460c      	mov	r4, r1
 8000fda:	d457      	bmi.n	800108c <__sflush_r+0xbc>
 8000fdc:	684b      	ldr	r3, [r1, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	dc04      	bgt.n	8000fec <__sflush_r+0x1c>
 8000fe2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	dc01      	bgt.n	8000fec <__sflush_r+0x1c>
 8000fe8:	2000      	movs	r0, #0
 8000fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000fee:	2e00      	cmp	r6, #0
 8000ff0:	d0fa      	beq.n	8000fe8 <__sflush_r+0x18>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000ff8:	682f      	ldr	r7, [r5, #0]
 8000ffa:	6a21      	ldr	r1, [r4, #32]
 8000ffc:	602b      	str	r3, [r5, #0]
 8000ffe:	d032      	beq.n	8001066 <__sflush_r+0x96>
 8001000:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001002:	89a3      	ldrh	r3, [r4, #12]
 8001004:	075a      	lsls	r2, r3, #29
 8001006:	d505      	bpl.n	8001014 <__sflush_r+0x44>
 8001008:	6863      	ldr	r3, [r4, #4]
 800100a:	1ac0      	subs	r0, r0, r3
 800100c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800100e:	b10b      	cbz	r3, 8001014 <__sflush_r+0x44>
 8001010:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001012:	1ac0      	subs	r0, r0, r3
 8001014:	2300      	movs	r3, #0
 8001016:	4602      	mov	r2, r0
 8001018:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800101a:	4628      	mov	r0, r5
 800101c:	6a21      	ldr	r1, [r4, #32]
 800101e:	47b0      	blx	r6
 8001020:	1c43      	adds	r3, r0, #1
 8001022:	89a3      	ldrh	r3, [r4, #12]
 8001024:	d106      	bne.n	8001034 <__sflush_r+0x64>
 8001026:	6829      	ldr	r1, [r5, #0]
 8001028:	291d      	cmp	r1, #29
 800102a:	d82b      	bhi.n	8001084 <__sflush_r+0xb4>
 800102c:	4a28      	ldr	r2, [pc, #160]	; (80010d0 <__sflush_r+0x100>)
 800102e:	410a      	asrs	r2, r1
 8001030:	07d6      	lsls	r6, r2, #31
 8001032:	d427      	bmi.n	8001084 <__sflush_r+0xb4>
 8001034:	2200      	movs	r2, #0
 8001036:	6062      	str	r2, [r4, #4]
 8001038:	6922      	ldr	r2, [r4, #16]
 800103a:	04d9      	lsls	r1, r3, #19
 800103c:	6022      	str	r2, [r4, #0]
 800103e:	d504      	bpl.n	800104a <__sflush_r+0x7a>
 8001040:	1c42      	adds	r2, r0, #1
 8001042:	d101      	bne.n	8001048 <__sflush_r+0x78>
 8001044:	682b      	ldr	r3, [r5, #0]
 8001046:	b903      	cbnz	r3, 800104a <__sflush_r+0x7a>
 8001048:	6560      	str	r0, [r4, #84]	; 0x54
 800104a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800104c:	602f      	str	r7, [r5, #0]
 800104e:	2900      	cmp	r1, #0
 8001050:	d0ca      	beq.n	8000fe8 <__sflush_r+0x18>
 8001052:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001056:	4299      	cmp	r1, r3
 8001058:	d002      	beq.n	8001060 <__sflush_r+0x90>
 800105a:	4628      	mov	r0, r5
 800105c:	f7ff fbee 	bl	800083c <_free_r>
 8001060:	2000      	movs	r0, #0
 8001062:	6360      	str	r0, [r4, #52]	; 0x34
 8001064:	e7c1      	b.n	8000fea <__sflush_r+0x1a>
 8001066:	2301      	movs	r3, #1
 8001068:	4628      	mov	r0, r5
 800106a:	47b0      	blx	r6
 800106c:	1c41      	adds	r1, r0, #1
 800106e:	d1c8      	bne.n	8001002 <__sflush_r+0x32>
 8001070:	682b      	ldr	r3, [r5, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0c5      	beq.n	8001002 <__sflush_r+0x32>
 8001076:	2b1d      	cmp	r3, #29
 8001078:	d001      	beq.n	800107e <__sflush_r+0xae>
 800107a:	2b16      	cmp	r3, #22
 800107c:	d101      	bne.n	8001082 <__sflush_r+0xb2>
 800107e:	602f      	str	r7, [r5, #0]
 8001080:	e7b2      	b.n	8000fe8 <__sflush_r+0x18>
 8001082:	89a3      	ldrh	r3, [r4, #12]
 8001084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001088:	81a3      	strh	r3, [r4, #12]
 800108a:	e7ae      	b.n	8000fea <__sflush_r+0x1a>
 800108c:	690f      	ldr	r7, [r1, #16]
 800108e:	2f00      	cmp	r7, #0
 8001090:	d0aa      	beq.n	8000fe8 <__sflush_r+0x18>
 8001092:	0793      	lsls	r3, r2, #30
 8001094:	bf18      	it	ne
 8001096:	2300      	movne	r3, #0
 8001098:	680e      	ldr	r6, [r1, #0]
 800109a:	bf08      	it	eq
 800109c:	694b      	ldreq	r3, [r1, #20]
 800109e:	1bf6      	subs	r6, r6, r7
 80010a0:	600f      	str	r7, [r1, #0]
 80010a2:	608b      	str	r3, [r1, #8]
 80010a4:	2e00      	cmp	r6, #0
 80010a6:	dd9f      	ble.n	8000fe8 <__sflush_r+0x18>
 80010a8:	4633      	mov	r3, r6
 80010aa:	463a      	mov	r2, r7
 80010ac:	4628      	mov	r0, r5
 80010ae:	6a21      	ldr	r1, [r4, #32]
 80010b0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80010b4:	47e0      	blx	ip
 80010b6:	2800      	cmp	r0, #0
 80010b8:	dc06      	bgt.n	80010c8 <__sflush_r+0xf8>
 80010ba:	89a3      	ldrh	r3, [r4, #12]
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010c4:	81a3      	strh	r3, [r4, #12]
 80010c6:	e790      	b.n	8000fea <__sflush_r+0x1a>
 80010c8:	4407      	add	r7, r0
 80010ca:	1a36      	subs	r6, r6, r0
 80010cc:	e7ea      	b.n	80010a4 <__sflush_r+0xd4>
 80010ce:	bf00      	nop
 80010d0:	dfbffffe 	.word	0xdfbffffe

080010d4 <_fflush_r>:
 80010d4:	b538      	push	{r3, r4, r5, lr}
 80010d6:	690b      	ldr	r3, [r1, #16]
 80010d8:	4605      	mov	r5, r0
 80010da:	460c      	mov	r4, r1
 80010dc:	b913      	cbnz	r3, 80010e4 <_fflush_r+0x10>
 80010de:	2500      	movs	r5, #0
 80010e0:	4628      	mov	r0, r5
 80010e2:	bd38      	pop	{r3, r4, r5, pc}
 80010e4:	b118      	cbz	r0, 80010ee <_fflush_r+0x1a>
 80010e6:	6a03      	ldr	r3, [r0, #32]
 80010e8:	b90b      	cbnz	r3, 80010ee <_fflush_r+0x1a>
 80010ea:	f7ff fa9f 	bl	800062c <__sinit>
 80010ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0f3      	beq.n	80010de <_fflush_r+0xa>
 80010f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80010f8:	07d0      	lsls	r0, r2, #31
 80010fa:	d404      	bmi.n	8001106 <_fflush_r+0x32>
 80010fc:	0599      	lsls	r1, r3, #22
 80010fe:	d402      	bmi.n	8001106 <_fflush_r+0x32>
 8001100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001102:	f7ff fb98 	bl	8000836 <__retarget_lock_acquire_recursive>
 8001106:	4628      	mov	r0, r5
 8001108:	4621      	mov	r1, r4
 800110a:	f7ff ff61 	bl	8000fd0 <__sflush_r>
 800110e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001110:	4605      	mov	r5, r0
 8001112:	07da      	lsls	r2, r3, #31
 8001114:	d4e4      	bmi.n	80010e0 <_fflush_r+0xc>
 8001116:	89a3      	ldrh	r3, [r4, #12]
 8001118:	059b      	lsls	r3, r3, #22
 800111a:	d4e1      	bmi.n	80010e0 <_fflush_r+0xc>
 800111c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800111e:	f7ff fb8b 	bl	8000838 <__retarget_lock_release_recursive>
 8001122:	e7dd      	b.n	80010e0 <_fflush_r+0xc>

08001124 <__swbuf_r>:
 8001124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001126:	460e      	mov	r6, r1
 8001128:	4614      	mov	r4, r2
 800112a:	4605      	mov	r5, r0
 800112c:	b118      	cbz	r0, 8001136 <__swbuf_r+0x12>
 800112e:	6a03      	ldr	r3, [r0, #32]
 8001130:	b90b      	cbnz	r3, 8001136 <__swbuf_r+0x12>
 8001132:	f7ff fa7b 	bl	800062c <__sinit>
 8001136:	69a3      	ldr	r3, [r4, #24]
 8001138:	60a3      	str	r3, [r4, #8]
 800113a:	89a3      	ldrh	r3, [r4, #12]
 800113c:	071a      	lsls	r2, r3, #28
 800113e:	d525      	bpl.n	800118c <__swbuf_r+0x68>
 8001140:	6923      	ldr	r3, [r4, #16]
 8001142:	b31b      	cbz	r3, 800118c <__swbuf_r+0x68>
 8001144:	6823      	ldr	r3, [r4, #0]
 8001146:	6922      	ldr	r2, [r4, #16]
 8001148:	b2f6      	uxtb	r6, r6
 800114a:	1a98      	subs	r0, r3, r2
 800114c:	6963      	ldr	r3, [r4, #20]
 800114e:	4637      	mov	r7, r6
 8001150:	4283      	cmp	r3, r0
 8001152:	dc04      	bgt.n	800115e <__swbuf_r+0x3a>
 8001154:	4621      	mov	r1, r4
 8001156:	4628      	mov	r0, r5
 8001158:	f7ff ffbc 	bl	80010d4 <_fflush_r>
 800115c:	b9e0      	cbnz	r0, 8001198 <__swbuf_r+0x74>
 800115e:	68a3      	ldr	r3, [r4, #8]
 8001160:	3b01      	subs	r3, #1
 8001162:	60a3      	str	r3, [r4, #8]
 8001164:	6823      	ldr	r3, [r4, #0]
 8001166:	1c5a      	adds	r2, r3, #1
 8001168:	6022      	str	r2, [r4, #0]
 800116a:	701e      	strb	r6, [r3, #0]
 800116c:	6962      	ldr	r2, [r4, #20]
 800116e:	1c43      	adds	r3, r0, #1
 8001170:	429a      	cmp	r2, r3
 8001172:	d004      	beq.n	800117e <__swbuf_r+0x5a>
 8001174:	89a3      	ldrh	r3, [r4, #12]
 8001176:	07db      	lsls	r3, r3, #31
 8001178:	d506      	bpl.n	8001188 <__swbuf_r+0x64>
 800117a:	2e0a      	cmp	r6, #10
 800117c:	d104      	bne.n	8001188 <__swbuf_r+0x64>
 800117e:	4621      	mov	r1, r4
 8001180:	4628      	mov	r0, r5
 8001182:	f7ff ffa7 	bl	80010d4 <_fflush_r>
 8001186:	b938      	cbnz	r0, 8001198 <__swbuf_r+0x74>
 8001188:	4638      	mov	r0, r7
 800118a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800118c:	4621      	mov	r1, r4
 800118e:	4628      	mov	r0, r5
 8001190:	f000 f806 	bl	80011a0 <__swsetup_r>
 8001194:	2800      	cmp	r0, #0
 8001196:	d0d5      	beq.n	8001144 <__swbuf_r+0x20>
 8001198:	f04f 37ff 	mov.w	r7, #4294967295
 800119c:	e7f4      	b.n	8001188 <__swbuf_r+0x64>
	...

080011a0 <__swsetup_r>:
 80011a0:	b538      	push	{r3, r4, r5, lr}
 80011a2:	4b2a      	ldr	r3, [pc, #168]	; (800124c <__swsetup_r+0xac>)
 80011a4:	4605      	mov	r5, r0
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	460c      	mov	r4, r1
 80011aa:	b118      	cbz	r0, 80011b4 <__swsetup_r+0x14>
 80011ac:	6a03      	ldr	r3, [r0, #32]
 80011ae:	b90b      	cbnz	r3, 80011b4 <__swsetup_r+0x14>
 80011b0:	f7ff fa3c 	bl	800062c <__sinit>
 80011b4:	89a3      	ldrh	r3, [r4, #12]
 80011b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80011ba:	0718      	lsls	r0, r3, #28
 80011bc:	d422      	bmi.n	8001204 <__swsetup_r+0x64>
 80011be:	06d9      	lsls	r1, r3, #27
 80011c0:	d407      	bmi.n	80011d2 <__swsetup_r+0x32>
 80011c2:	2309      	movs	r3, #9
 80011c4:	602b      	str	r3, [r5, #0]
 80011c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80011ca:	f04f 30ff 	mov.w	r0, #4294967295
 80011ce:	81a3      	strh	r3, [r4, #12]
 80011d0:	e034      	b.n	800123c <__swsetup_r+0x9c>
 80011d2:	0758      	lsls	r0, r3, #29
 80011d4:	d512      	bpl.n	80011fc <__swsetup_r+0x5c>
 80011d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011d8:	b141      	cbz	r1, 80011ec <__swsetup_r+0x4c>
 80011da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80011de:	4299      	cmp	r1, r3
 80011e0:	d002      	beq.n	80011e8 <__swsetup_r+0x48>
 80011e2:	4628      	mov	r0, r5
 80011e4:	f7ff fb2a 	bl	800083c <_free_r>
 80011e8:	2300      	movs	r3, #0
 80011ea:	6363      	str	r3, [r4, #52]	; 0x34
 80011ec:	89a3      	ldrh	r3, [r4, #12]
 80011ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80011f2:	81a3      	strh	r3, [r4, #12]
 80011f4:	2300      	movs	r3, #0
 80011f6:	6063      	str	r3, [r4, #4]
 80011f8:	6923      	ldr	r3, [r4, #16]
 80011fa:	6023      	str	r3, [r4, #0]
 80011fc:	89a3      	ldrh	r3, [r4, #12]
 80011fe:	f043 0308 	orr.w	r3, r3, #8
 8001202:	81a3      	strh	r3, [r4, #12]
 8001204:	6923      	ldr	r3, [r4, #16]
 8001206:	b94b      	cbnz	r3, 800121c <__swsetup_r+0x7c>
 8001208:	89a3      	ldrh	r3, [r4, #12]
 800120a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800120e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001212:	d003      	beq.n	800121c <__swsetup_r+0x7c>
 8001214:	4621      	mov	r1, r4
 8001216:	4628      	mov	r0, r5
 8001218:	f000 f85d 	bl	80012d6 <__smakebuf_r>
 800121c:	89a0      	ldrh	r0, [r4, #12]
 800121e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001222:	f010 0301 	ands.w	r3, r0, #1
 8001226:	d00a      	beq.n	800123e <__swsetup_r+0x9e>
 8001228:	2300      	movs	r3, #0
 800122a:	60a3      	str	r3, [r4, #8]
 800122c:	6963      	ldr	r3, [r4, #20]
 800122e:	425b      	negs	r3, r3
 8001230:	61a3      	str	r3, [r4, #24]
 8001232:	6923      	ldr	r3, [r4, #16]
 8001234:	b943      	cbnz	r3, 8001248 <__swsetup_r+0xa8>
 8001236:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800123a:	d1c4      	bne.n	80011c6 <__swsetup_r+0x26>
 800123c:	bd38      	pop	{r3, r4, r5, pc}
 800123e:	0781      	lsls	r1, r0, #30
 8001240:	bf58      	it	pl
 8001242:	6963      	ldrpl	r3, [r4, #20]
 8001244:	60a3      	str	r3, [r4, #8]
 8001246:	e7f4      	b.n	8001232 <__swsetup_r+0x92>
 8001248:	2000      	movs	r0, #0
 800124a:	e7f7      	b.n	800123c <__swsetup_r+0x9c>
 800124c:	20000058 	.word	0x20000058

08001250 <_sbrk_r>:
 8001250:	b538      	push	{r3, r4, r5, lr}
 8001252:	2300      	movs	r3, #0
 8001254:	4d05      	ldr	r5, [pc, #20]	; (800126c <_sbrk_r+0x1c>)
 8001256:	4604      	mov	r4, r0
 8001258:	4608      	mov	r0, r1
 800125a:	602b      	str	r3, [r5, #0]
 800125c:	f7ff f868 	bl	8000330 <_sbrk>
 8001260:	1c43      	adds	r3, r0, #1
 8001262:	d102      	bne.n	800126a <_sbrk_r+0x1a>
 8001264:	682b      	ldr	r3, [r5, #0]
 8001266:	b103      	cbz	r3, 800126a <_sbrk_r+0x1a>
 8001268:	6023      	str	r3, [r4, #0]
 800126a:	bd38      	pop	{r3, r4, r5, pc}
 800126c:	200001b8 	.word	0x200001b8

08001270 <memchr>:
 8001270:	4603      	mov	r3, r0
 8001272:	b510      	push	{r4, lr}
 8001274:	b2c9      	uxtb	r1, r1
 8001276:	4402      	add	r2, r0
 8001278:	4293      	cmp	r3, r2
 800127a:	4618      	mov	r0, r3
 800127c:	d101      	bne.n	8001282 <memchr+0x12>
 800127e:	2000      	movs	r0, #0
 8001280:	e003      	b.n	800128a <memchr+0x1a>
 8001282:	7804      	ldrb	r4, [r0, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	428c      	cmp	r4, r1
 8001288:	d1f6      	bne.n	8001278 <memchr+0x8>
 800128a:	bd10      	pop	{r4, pc}

0800128c <__swhatbuf_r>:
 800128c:	b570      	push	{r4, r5, r6, lr}
 800128e:	460c      	mov	r4, r1
 8001290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001294:	4615      	mov	r5, r2
 8001296:	2900      	cmp	r1, #0
 8001298:	461e      	mov	r6, r3
 800129a:	b096      	sub	sp, #88	; 0x58
 800129c:	da0c      	bge.n	80012b8 <__swhatbuf_r+0x2c>
 800129e:	89a3      	ldrh	r3, [r4, #12]
 80012a0:	2100      	movs	r1, #0
 80012a2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80012a6:	bf0c      	ite	eq
 80012a8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80012ac:	2340      	movne	r3, #64	; 0x40
 80012ae:	2000      	movs	r0, #0
 80012b0:	6031      	str	r1, [r6, #0]
 80012b2:	602b      	str	r3, [r5, #0]
 80012b4:	b016      	add	sp, #88	; 0x58
 80012b6:	bd70      	pop	{r4, r5, r6, pc}
 80012b8:	466a      	mov	r2, sp
 80012ba:	f000 f849 	bl	8001350 <_fstat_r>
 80012be:	2800      	cmp	r0, #0
 80012c0:	dbed      	blt.n	800129e <__swhatbuf_r+0x12>
 80012c2:	9901      	ldr	r1, [sp, #4]
 80012c4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80012c8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80012cc:	4259      	negs	r1, r3
 80012ce:	4159      	adcs	r1, r3
 80012d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d4:	e7eb      	b.n	80012ae <__swhatbuf_r+0x22>

080012d6 <__smakebuf_r>:
 80012d6:	898b      	ldrh	r3, [r1, #12]
 80012d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80012da:	079d      	lsls	r5, r3, #30
 80012dc:	4606      	mov	r6, r0
 80012de:	460c      	mov	r4, r1
 80012e0:	d507      	bpl.n	80012f2 <__smakebuf_r+0x1c>
 80012e2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80012e6:	6023      	str	r3, [r4, #0]
 80012e8:	6123      	str	r3, [r4, #16]
 80012ea:	2301      	movs	r3, #1
 80012ec:	6163      	str	r3, [r4, #20]
 80012ee:	b002      	add	sp, #8
 80012f0:	bd70      	pop	{r4, r5, r6, pc}
 80012f2:	466a      	mov	r2, sp
 80012f4:	ab01      	add	r3, sp, #4
 80012f6:	f7ff ffc9 	bl	800128c <__swhatbuf_r>
 80012fa:	9900      	ldr	r1, [sp, #0]
 80012fc:	4605      	mov	r5, r0
 80012fe:	4630      	mov	r0, r6
 8001300:	f7ff fb04 	bl	800090c <_malloc_r>
 8001304:	b948      	cbnz	r0, 800131a <__smakebuf_r+0x44>
 8001306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800130a:	059a      	lsls	r2, r3, #22
 800130c:	d4ef      	bmi.n	80012ee <__smakebuf_r+0x18>
 800130e:	f023 0303 	bic.w	r3, r3, #3
 8001312:	f043 0302 	orr.w	r3, r3, #2
 8001316:	81a3      	strh	r3, [r4, #12]
 8001318:	e7e3      	b.n	80012e2 <__smakebuf_r+0xc>
 800131a:	89a3      	ldrh	r3, [r4, #12]
 800131c:	6020      	str	r0, [r4, #0]
 800131e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001322:	81a3      	strh	r3, [r4, #12]
 8001324:	9b00      	ldr	r3, [sp, #0]
 8001326:	6120      	str	r0, [r4, #16]
 8001328:	6163      	str	r3, [r4, #20]
 800132a:	9b01      	ldr	r3, [sp, #4]
 800132c:	b15b      	cbz	r3, 8001346 <__smakebuf_r+0x70>
 800132e:	4630      	mov	r0, r6
 8001330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001334:	f000 f81e 	bl	8001374 <_isatty_r>
 8001338:	b128      	cbz	r0, 8001346 <__smakebuf_r+0x70>
 800133a:	89a3      	ldrh	r3, [r4, #12]
 800133c:	f023 0303 	bic.w	r3, r3, #3
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	81a3      	strh	r3, [r4, #12]
 8001346:	89a3      	ldrh	r3, [r4, #12]
 8001348:	431d      	orrs	r5, r3
 800134a:	81a5      	strh	r5, [r4, #12]
 800134c:	e7cf      	b.n	80012ee <__smakebuf_r+0x18>
	...

08001350 <_fstat_r>:
 8001350:	b538      	push	{r3, r4, r5, lr}
 8001352:	2300      	movs	r3, #0
 8001354:	4d06      	ldr	r5, [pc, #24]	; (8001370 <_fstat_r+0x20>)
 8001356:	4604      	mov	r4, r0
 8001358:	4608      	mov	r0, r1
 800135a:	4611      	mov	r1, r2
 800135c:	602b      	str	r3, [r5, #0]
 800135e:	f7fe ffc1 	bl	80002e4 <_fstat>
 8001362:	1c43      	adds	r3, r0, #1
 8001364:	d102      	bne.n	800136c <_fstat_r+0x1c>
 8001366:	682b      	ldr	r3, [r5, #0]
 8001368:	b103      	cbz	r3, 800136c <_fstat_r+0x1c>
 800136a:	6023      	str	r3, [r4, #0]
 800136c:	bd38      	pop	{r3, r4, r5, pc}
 800136e:	bf00      	nop
 8001370:	200001b8 	.word	0x200001b8

08001374 <_isatty_r>:
 8001374:	b538      	push	{r3, r4, r5, lr}
 8001376:	2300      	movs	r3, #0
 8001378:	4d05      	ldr	r5, [pc, #20]	; (8001390 <_isatty_r+0x1c>)
 800137a:	4604      	mov	r4, r0
 800137c:	4608      	mov	r0, r1
 800137e:	602b      	str	r3, [r5, #0]
 8001380:	f7fe ffbf 	bl	8000302 <_isatty>
 8001384:	1c43      	adds	r3, r0, #1
 8001386:	d102      	bne.n	800138e <_isatty_r+0x1a>
 8001388:	682b      	ldr	r3, [r5, #0]
 800138a:	b103      	cbz	r3, 800138e <_isatty_r+0x1a>
 800138c:	6023      	str	r3, [r4, #0]
 800138e:	bd38      	pop	{r3, r4, r5, pc}
 8001390:	200001b8 	.word	0x200001b8

08001394 <_init>:
 8001394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001396:	bf00      	nop
 8001398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800139a:	bc08      	pop	{r3}
 800139c:	469e      	mov	lr, r3
 800139e:	4770      	bx	lr

080013a0 <_fini>:
 80013a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013a2:	bf00      	nop
 80013a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013a6:	bc08      	pop	{r3}
 80013a8:	469e      	mov	lr, r3
 80013aa:	4770      	bx	lr
