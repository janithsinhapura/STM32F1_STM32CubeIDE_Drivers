
05_ADC_Pot_Single_Conversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013fc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800152c  0800152c  0001152c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001580  08001580  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001580  08001580  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001580  08001580  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001580  08001580  00011580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001584  08001584  00011584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  080015e4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080015e4  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001265  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000073f  00000000  00000000  0002132d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b8  00000000  00000000  00021a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000124  00000000  00000000  00021c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001205c  00000000  00000000  00021d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000029ee  00000000  00000000  00033da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005a11b  00000000  00000000  00036796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000cb8  00000000  00000000  000908b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0009156c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000005c 	.word	0x2000005c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001514 	.word	0x08001514

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000060 	.word	0x20000060
 800016c:	08001514 	.word	0x08001514

08000170 <ADC1_Init>:
 *      Author: Janith Sinhapura
 */
#include "stm32f1xx.h"
#include "adc.h"

void ADC1_Init(void) {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//PA1 ADC12_IN1
	//set clock access to gpioa
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000174:	4b16      	ldr	r3, [pc, #88]	; (80001d0 <ADC1_Init+0x60>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a15      	ldr	r2, [pc, #84]	; (80001d0 <ADC1_Init+0x60>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	//Enable analog input mode
	GPIOA->CRL &= ~GPIO_CRL_MODE1;
 8000180:	4b14      	ldr	r3, [pc, #80]	; (80001d4 <ADC1_Init+0x64>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a13      	ldr	r2, [pc, #76]	; (80001d4 <ADC1_Init+0x64>)
 8000186:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800018a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF1;
 800018c:	4b11      	ldr	r3, [pc, #68]	; (80001d4 <ADC1_Init+0x64>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a10      	ldr	r2, [pc, #64]	; (80001d4 <ADC1_Init+0x64>)
 8000192:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000196:	6013      	str	r3, [r2, #0]

	//enable adc1 clock
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000198:	4b0d      	ldr	r3, [pc, #52]	; (80001d0 <ADC1_Init+0x60>)
 800019a:	699b      	ldr	r3, [r3, #24]
 800019c:	4a0c      	ldr	r2, [pc, #48]	; (80001d0 <ADC1_Init+0x60>)
 800019e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001a2:	6193      	str	r3, [r2, #24]

	//set the sequence channel 1 as 1st
	ADC1->SQR3 |= ADC_SQR3_SQ1_0;
 80001a4:	4b0c      	ldr	r3, [pc, #48]	; (80001d8 <ADC1_Init+0x68>)
 80001a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001a8:	4a0b      	ldr	r2, [pc, #44]	; (80001d8 <ADC1_Init+0x68>)
 80001aa:	f043 0301 	orr.w	r3, r3, #1
 80001ae:	6353      	str	r3, [r2, #52]	; 0x34

	//set 1 conversions
	ADC1->SQR1 &= ~ADC_SQR1_L;
 80001b0:	4b09      	ldr	r3, [pc, #36]	; (80001d8 <ADC1_Init+0x68>)
 80001b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80001b4:	4a08      	ldr	r2, [pc, #32]	; (80001d8 <ADC1_Init+0x68>)
 80001b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001ba:	62d3      	str	r3, [r2, #44]	; 0x2c

	//wakeup adc
	ADC1->CR2 |= ADC_CR2_ADON;
 80001bc:	4b06      	ldr	r3, [pc, #24]	; (80001d8 <ADC1_Init+0x68>)
 80001be:	689b      	ldr	r3, [r3, #8]
 80001c0:	4a05      	ldr	r2, [pc, #20]	; (80001d8 <ADC1_Init+0x68>)
 80001c2:	f043 0301 	orr.w	r3, r3, #1
 80001c6:	6093      	str	r3, [r2, #8]


}
 80001c8:	bf00      	nop
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr
 80001d0:	40021000 	.word	0x40021000
 80001d4:	40010800 	.word	0x40010800
 80001d8:	40012400 	.word	0x40012400

080001dc <ADC1_Read>:

uint16_t ADC1_Read(void)
{
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
	//need to enable 2nd time of the adc to start
	ADC1->CR2 |= ADC_CR2_ADON;
 80001e0:	4b0c      	ldr	r3, [pc, #48]	; (8000214 <ADC1_Read+0x38>)
 80001e2:	689b      	ldr	r3, [r3, #8]
 80001e4:	4a0b      	ldr	r2, [pc, #44]	; (8000214 <ADC1_Read+0x38>)
 80001e6:	f043 0301 	orr.w	r3, r3, #1
 80001ea:	6093      	str	r3, [r2, #8]
	//start conversion of regular channels
	ADC1->CR2 |= ADC_CR2_SWSTART;
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <ADC1_Read+0x38>)
 80001ee:	689b      	ldr	r3, [r3, #8]
 80001f0:	4a08      	ldr	r2, [pc, #32]	; (8000214 <ADC1_Read+0x38>)
 80001f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001f6:	6093      	str	r3, [r2, #8]
	//wait until the conversion stop
	while(!(ADC1->SR & ADC_SR_EOC));
 80001f8:	bf00      	nop
 80001fa:	4b06      	ldr	r3, [pc, #24]	; (8000214 <ADC1_Read+0x38>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f003 0302 	and.w	r3, r3, #2
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0f9      	beq.n	80001fa <ADC1_Read+0x1e>
	return ADC1->DR;
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <ADC1_Read+0x38>)
 8000208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800020a:	b29b      	uxth	r3, r3
}
 800020c:	4618      	mov	r0, r3
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr
 8000214:	40012400 	.word	0x40012400

08000218 <main>:
#include "adc.h"

int16_t val;
int16_t voltage;

int main(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0

	//set sysclock to 72MHZ
	HSE_PLL_SYS_CLK_MAX();
 800021c:	f000 f834 	bl	8000288 <HSE_PLL_SYS_CLK_MAX>
	//Enable PC13 LED
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000220:	4b14      	ldr	r3, [pc, #80]	; (8000274 <main+0x5c>)
 8000222:	699b      	ldr	r3, [r3, #24]
 8000224:	4a13      	ldr	r2, [pc, #76]	; (8000274 <main+0x5c>)
 8000226:	f043 0310 	orr.w	r3, r3, #16
 800022a:	6193      	str	r3, [r2, #24]
	GPIOC->CRH |= GPIO_CRH_MODE13;
 800022c:	4b12      	ldr	r3, [pc, #72]	; (8000278 <main+0x60>)
 800022e:	685b      	ldr	r3, [r3, #4]
 8000230:	4a11      	ldr	r2, [pc, #68]	; (8000278 <main+0x60>)
 8000232:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000236:	6053      	str	r3, [r2, #4]
	ADC1_Init();
 8000238:	f7ff ff9a 	bl	8000170 <ADC1_Init>
	UART1_Init();
 800023c:	f000 f93c 	bl	80004b8 <UART1_Init>
	GPIOC->ODR |= GPIO_ODR_ODR13;
 8000240:	4b0d      	ldr	r3, [pc, #52]	; (8000278 <main+0x60>)
 8000242:	68db      	ldr	r3, [r3, #12]
 8000244:	4a0c      	ldr	r2, [pc, #48]	; (8000278 <main+0x60>)
 8000246:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800024a:	60d3      	str	r3, [r2, #12]
	printf("ADC Testing\r\n");
 800024c:	480b      	ldr	r0, [pc, #44]	; (800027c <main+0x64>)
 800024e:	f000 faef 	bl	8000830 <puts>

	while (1) {

		val = ADC1_Read();
 8000252:	f7ff ffc3 	bl	80001dc <ADC1_Read>
 8000256:	4603      	mov	r3, r0
 8000258:	b21a      	sxth	r2, r3
 800025a:	4b09      	ldr	r3, [pc, #36]	; (8000280 <main+0x68>)
 800025c:	801a      	strh	r2, [r3, #0]
		//volateg step size = 3.3v/4096
		//voltage = (3.3 / 4096.0) *val;
		printf("Pot Value : %d\r\n",val);
 800025e:	4b08      	ldr	r3, [pc, #32]	; (8000280 <main+0x68>)
 8000260:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000264:	4619      	mov	r1, r3
 8000266:	4807      	ldr	r0, [pc, #28]	; (8000284 <main+0x6c>)
 8000268:	f000 fa7c 	bl	8000764 <iprintf>
		DelayMS(100);
 800026c:	2064      	movs	r0, #100	; 0x64
 800026e:	f000 f8f5 	bl	800045c <DelayMS>
		val = ADC1_Read();
 8000272:	e7ee      	b.n	8000252 <main+0x3a>
 8000274:	40021000 	.word	0x40021000
 8000278:	40011000 	.word	0x40011000
 800027c:	0800152c 	.word	0x0800152c
 8000280:	20000078 	.word	0x20000078
 8000284:	0800153c 	.word	0x0800153c

08000288 <HSE_PLL_SYS_CLK_MAX>:
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSE);

}

void HSE_PLL_SYS_CLK_MAX(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON;
 800028c:	4b21      	ldr	r3, [pc, #132]	; (8000314 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a20      	ldr	r2, [pc, #128]	; (8000314 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000296:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8000298:	bf00      	nop
 800029a:	4b1e      	ldr	r3, [pc, #120]	; (8000314 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0f9      	beq.n	800029a <HSE_PLL_SYS_CLK_MAX+0x12>
		;

	FLASH->ACR |=FLASH_ACR_LATENCY_2 |FLASH_ACR_PRFTBE;
 80002a6:	4b1c      	ldr	r3, [pc, #112]	; (8000318 <HSE_PLL_SYS_CLK_MAX+0x90>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a1b      	ldr	r2, [pc, #108]	; (8000318 <HSE_PLL_SYS_CLK_MAX+0x90>)
 80002ac:	f043 0314 	orr.w	r3, r3, #20
 80002b0:	6013      	str	r3, [r2, #0]


	RCC->CFGR |= RCC_CFGR_PLLSRC;
 80002b2:	4b18      	ldr	r3, [pc, #96]	; (8000314 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	4a17      	ldr	r2, [pc, #92]	; (8000314 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80002b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002bc:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLMULL9;
 80002be:	4b15      	ldr	r3, [pc, #84]	; (8000314 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	4a14      	ldr	r2, [pc, #80]	; (8000314 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80002c4:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80002c8:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 80002ca:	4b12      	ldr	r3, [pc, #72]	; (8000314 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80002cc:	685b      	ldr	r3, [r3, #4]
 80002ce:	4a11      	ldr	r2, [pc, #68]	; (8000314 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80002d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d4:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_ADCPRE_DIV6;
 80002d6:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	4a0e      	ldr	r2, [pc, #56]	; (8000314 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80002dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002e0:	6053      	str	r3, [r2, #4]

	RCC->CR |= RCC_CR_PLLON;
 80002e2:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a0b      	ldr	r2, [pc, #44]	; (8000314 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80002e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002ec:	6013      	str	r3, [r2, #0]

	//RCC->CFGR &= ~RCC_CFGR_SW;
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80002f0:	685b      	ldr	r3, [r3, #4]
 80002f2:	4a08      	ldr	r2, [pc, #32]	; (8000314 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80002f4:	f043 0302 	orr.w	r3, r3, #2
 80002f8:	6053      	str	r3, [r2, #4]

	while ((RCC->CR & RCC_CR_PLLRDY) == 0)
 80002fa:	bf00      	nop
 80002fc:	4b05      	ldr	r3, [pc, #20]	; (8000314 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000304:	2b00      	cmp	r3, #0
 8000306:	d0f9      	beq.n	80002fc <HSE_PLL_SYS_CLK_MAX+0x74>
		;
}
 8000308:	bf00      	nop
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40021000 	.word	0x40021000
 8000318:	40022000 	.word	0x40022000

0800031c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b086      	sub	sp, #24
 8000320:	af00      	add	r7, sp, #0
 8000322:	60f8      	str	r0, [r7, #12]
 8000324:	60b9      	str	r1, [r7, #8]
 8000326:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000328:	2300      	movs	r3, #0
 800032a:	617b      	str	r3, [r7, #20]
 800032c:	e00a      	b.n	8000344 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800032e:	f3af 8000 	nop.w
 8000332:	4601      	mov	r1, r0
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	1c5a      	adds	r2, r3, #1
 8000338:	60ba      	str	r2, [r7, #8]
 800033a:	b2ca      	uxtb	r2, r1
 800033c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	3301      	adds	r3, #1
 8000342:	617b      	str	r3, [r7, #20]
 8000344:	697a      	ldr	r2, [r7, #20]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	429a      	cmp	r2, r3
 800034a:	dbf0      	blt.n	800032e <_read+0x12>
  }

  return len;
 800034c:	687b      	ldr	r3, [r7, #4]
}
 800034e:	4618      	mov	r0, r3
 8000350:	3718      	adds	r7, #24
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}

08000356 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000356:	b580      	push	{r7, lr}
 8000358:	b086      	sub	sp, #24
 800035a:	af00      	add	r7, sp, #0
 800035c:	60f8      	str	r0, [r7, #12]
 800035e:	60b9      	str	r1, [r7, #8]
 8000360:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]
 8000366:	e009      	b.n	800037c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	1c5a      	adds	r2, r3, #1
 800036c:	60ba      	str	r2, [r7, #8]
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	4618      	mov	r0, r3
 8000372:	f000 f8fd 	bl	8000570 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000376:	697b      	ldr	r3, [r7, #20]
 8000378:	3301      	adds	r3, #1
 800037a:	617b      	str	r3, [r7, #20]
 800037c:	697a      	ldr	r2, [r7, #20]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	429a      	cmp	r2, r3
 8000382:	dbf1      	blt.n	8000368 <_write+0x12>
  }
  return len;
 8000384:	687b      	ldr	r3, [r7, #4]
}
 8000386:	4618      	mov	r0, r3
 8000388:	3718      	adds	r7, #24
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}

0800038e <_close>:

int _close(int file)
{
 800038e:	b480      	push	{r7}
 8000390:	b083      	sub	sp, #12
 8000392:	af00      	add	r7, sp, #0
 8000394:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000396:	f04f 33ff 	mov.w	r3, #4294967295
}
 800039a:	4618      	mov	r0, r3
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr

080003a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003b4:	605a      	str	r2, [r3, #4]
  return 0;
 80003b6:	2300      	movs	r3, #0
}
 80003b8:	4618      	mov	r0, r3
 80003ba:	370c      	adds	r7, #12
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc80      	pop	{r7}
 80003c0:	4770      	bx	lr

080003c2 <_isatty>:

int _isatty(int file)
{
 80003c2:	b480      	push	{r7}
 80003c4:	b083      	sub	sp, #12
 80003c6:	af00      	add	r7, sp, #0
 80003c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003ca:	2301      	movs	r3, #1
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr

080003d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003d6:	b480      	push	{r7}
 80003d8:	b085      	sub	sp, #20
 80003da:	af00      	add	r7, sp, #0
 80003dc:	60f8      	str	r0, [r7, #12]
 80003de:	60b9      	str	r1, [r7, #8]
 80003e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003e2:	2300      	movs	r3, #0
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	3714      	adds	r7, #20
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
	...

080003f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b086      	sub	sp, #24
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003f8:	4a14      	ldr	r2, [pc, #80]	; (800044c <_sbrk+0x5c>)
 80003fa:	4b15      	ldr	r3, [pc, #84]	; (8000450 <_sbrk+0x60>)
 80003fc:	1ad3      	subs	r3, r2, r3
 80003fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000404:	4b13      	ldr	r3, [pc, #76]	; (8000454 <_sbrk+0x64>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d102      	bne.n	8000412 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800040c:	4b11      	ldr	r3, [pc, #68]	; (8000454 <_sbrk+0x64>)
 800040e:	4a12      	ldr	r2, [pc, #72]	; (8000458 <_sbrk+0x68>)
 8000410:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000412:	4b10      	ldr	r3, [pc, #64]	; (8000454 <_sbrk+0x64>)
 8000414:	681a      	ldr	r2, [r3, #0]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4413      	add	r3, r2
 800041a:	693a      	ldr	r2, [r7, #16]
 800041c:	429a      	cmp	r2, r3
 800041e:	d207      	bcs.n	8000430 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000420:	f000 fb34 	bl	8000a8c <__errno>
 8000424:	4603      	mov	r3, r0
 8000426:	220c      	movs	r2, #12
 8000428:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800042a:	f04f 33ff 	mov.w	r3, #4294967295
 800042e:	e009      	b.n	8000444 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000430:	4b08      	ldr	r3, [pc, #32]	; (8000454 <_sbrk+0x64>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000436:	4b07      	ldr	r3, [pc, #28]	; (8000454 <_sbrk+0x64>)
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4413      	add	r3, r2
 800043e:	4a05      	ldr	r2, [pc, #20]	; (8000454 <_sbrk+0x64>)
 8000440:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000442:	68fb      	ldr	r3, [r7, #12]
}
 8000444:	4618      	mov	r0, r3
 8000446:	3718      	adds	r7, #24
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	20005000 	.word	0x20005000
 8000450:	00000400 	.word	0x00000400
 8000454:	2000007c 	.word	0x2000007c
 8000458:	200001d0 	.word	0x200001d0

0800045c <DelayMS>:


#define CORE_CLOCK_FREQ 72000000

void DelayMS(uint32_t delay)
{
 800045c:	b480      	push	{r7}
 800045e:	b085      	sub	sp, #20
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	SysTick->LOAD = (CORE_CLOCK_FREQ/1000) - 1;
 8000464:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <DelayMS+0x54>)
 8000466:	4a13      	ldr	r2, [pc, #76]	; (80004b4 <DelayMS+0x58>)
 8000468:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; //set the current value of the systick;
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <DelayMS+0x54>)
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk ; //set processor clock source and enable systick
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <DelayMS+0x54>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a0e      	ldr	r2, [pc, #56]	; (80004b0 <DelayMS+0x54>)
 8000476:	f043 0305 	orr.w	r3, r3, #5
 800047a:	6013      	str	r3, [r2, #0]
	
	for(uint32_t i =0;i<delay;i++)
 800047c:	2300      	movs	r3, #0
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	e009      	b.n	8000496 <DelayMS+0x3a>
	{
		while(((SysTick->CTRL)&SysTick_CTRL_COUNTFLAG_Msk) == 0);
 8000482:	bf00      	nop
 8000484:	4b0a      	ldr	r3, [pc, #40]	; (80004b0 <DelayMS+0x54>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800048c:	2b00      	cmp	r3, #0
 800048e:	d0f9      	beq.n	8000484 <DelayMS+0x28>
	for(uint32_t i =0;i<delay;i++)
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	3301      	adds	r3, #1
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	68fa      	ldr	r2, [r7, #12]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	429a      	cmp	r2, r3
 800049c:	d3f1      	bcc.n	8000482 <DelayMS+0x26>
	}
	SysTick->CTRL = 0;
 800049e:	4b04      	ldr	r3, [pc, #16]	; (80004b0 <DelayMS+0x54>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
}
 80004a4:	bf00      	nop
 80004a6:	3714      	adds	r7, #20
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	e000e010 	.word	0xe000e010
 80004b4:	0001193f 	.word	0x0001193f

080004b8 <UART1_Init>:
 *      Author: Janith Sinhapura
 */
#include "stm32f1xx.h"
#include "stdio.h"

void UART1_Init(void) {
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
	//uart1 is under apb2 bus
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80004bc:	4b1e      	ldr	r3, [pc, #120]	; (8000538 <UART1_Init+0x80>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a1d      	ldr	r2, [pc, #116]	; (8000538 <UART1_Init+0x80>)
 80004c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004c6:	6193      	str	r3, [r2, #24]

	//uart1 TX-PA9
	//uart1	RX-PA10
	//Enable gpio pins for uart1 in apb2 bus
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <UART1_Init+0x80>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a1a      	ldr	r2, [pc, #104]	; (8000538 <UART1_Init+0x80>)
 80004ce:	f043 0304 	orr.w	r3, r3, #4
 80004d2:	6193      	str	r3, [r2, #24]

	//enable gpio alternate funtions
	GPIOA->CRH |= GPIO_CRH_MODE9 ;
 80004d4:	4b19      	ldr	r3, [pc, #100]	; (800053c <UART1_Init+0x84>)
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	4a18      	ldr	r2, [pc, #96]	; (800053c <UART1_Init+0x84>)
 80004da:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80004de:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF9_1 | GPIO_CRH_CNF10_0;
 80004e0:	4b16      	ldr	r3, [pc, #88]	; (800053c <UART1_Init+0x84>)
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	4a15      	ldr	r2, [pc, #84]	; (800053c <UART1_Init+0x84>)
 80004e6:	f443 6390 	orr.w	r3, r3, #1152	; 0x480
 80004ea:	6053      	str	r3, [r2, #4]

	//enable uart1
	USART1->CR1 |= USART_CR1_UE;
 80004ec:	4b14      	ldr	r3, [pc, #80]	; (8000540 <UART1_Init+0x88>)
 80004ee:	68db      	ldr	r3, [r3, #12]
 80004f0:	4a13      	ldr	r2, [pc, #76]	; (8000540 <UART1_Init+0x88>)
 80004f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004f6:	60d3      	str	r3, [r2, #12]

	//8 data bits
	USART1->CR1 &= ~USART_CR1_M;
 80004f8:	4b11      	ldr	r3, [pc, #68]	; (8000540 <UART1_Init+0x88>)
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	4a10      	ldr	r2, [pc, #64]	; (8000540 <UART1_Init+0x88>)
 80004fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000502:	60d3      	str	r3, [r2, #12]

	//1 stop bits
	USART1->CR2 &=~USART_CR2_STOP;
 8000504:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <UART1_Init+0x88>)
 8000506:	691b      	ldr	r3, [r3, #16]
 8000508:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <UART1_Init+0x88>)
 800050a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800050e:	6113      	str	r3, [r2, #16]

	//set baud rate to 115200
	//mantissa is 39 = 0x27
	//fractional part is 0.0625 ~ 0.06 = 0x06
	USART1->BRR = (0x27U << 4) | (0x6<< 0);
 8000510:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <UART1_Init+0x88>)
 8000512:	f240 2276 	movw	r2, #630	; 0x276
 8000516:	609a      	str	r2, [r3, #8]

	//enable tx
	USART1->CR1 |= USART_CR1_TE;
 8000518:	4b09      	ldr	r3, [pc, #36]	; (8000540 <UART1_Init+0x88>)
 800051a:	68db      	ldr	r3, [r3, #12]
 800051c:	4a08      	ldr	r2, [pc, #32]	; (8000540 <UART1_Init+0x88>)
 800051e:	f043 0308 	orr.w	r3, r3, #8
 8000522:	60d3      	str	r3, [r2, #12]

	//enable rx
	USART1->CR1 |= USART_CR1_RE;
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <UART1_Init+0x88>)
 8000526:	68db      	ldr	r3, [r3, #12]
 8000528:	4a05      	ldr	r2, [pc, #20]	; (8000540 <UART1_Init+0x88>)
 800052a:	f043 0304 	orr.w	r3, r3, #4
 800052e:	60d3      	str	r3, [r2, #12]


}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr
 8000538:	40021000 	.word	0x40021000
 800053c:	40010800 	.word	0x40010800
 8000540:	40013800 	.word	0x40013800

08000544 <UART1_Write_Char>:

void UART1_Write_Char(char data)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	//check data is transmitted out from the data register
	while((USART1->SR & USART_SR_TXE)==0);
 800054e:	bf00      	nop
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <UART1_Write_Char+0x28>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000558:	2b00      	cmp	r3, #0
 800055a:	d0f9      	beq.n	8000550 <UART1_Write_Char+0xc>
	USART1->DR = data;
 800055c:	4a03      	ldr	r2, [pc, #12]	; (800056c <UART1_Write_Char+0x28>)
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	6053      	str	r3, [r2, #4]


}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	40013800 	.word	0x40013800

08000570 <__io_putchar>:
char UART1_Read_Char(void){
	while(!(USART1->SR & USART_SR_RXNE));
	return USART1->DR;
}

char __io_putchar(char ch){
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	UART1_Write_Char(ch);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff ffe1 	bl	8000544 <UART1_Write_Char>
	return ch;
 8000582:	79fb      	ldrb	r3, [r7, #7]
}
 8000584:	4618      	mov	r0, r3
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800058c:	480d      	ldr	r0, [pc, #52]	; (80005c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800058e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000590:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000594:	480c      	ldr	r0, [pc, #48]	; (80005c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000596:	490d      	ldr	r1, [pc, #52]	; (80005cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <LoopForever+0xe>)
  movs r3, #0
 800059a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800059c:	e002      	b.n	80005a4 <LoopCopyDataInit>

0800059e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a2:	3304      	adds	r3, #4

080005a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a8:	d3f9      	bcc.n	800059e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005aa:	4a0a      	ldr	r2, [pc, #40]	; (80005d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005ac:	4c0a      	ldr	r4, [pc, #40]	; (80005d8 <LoopForever+0x16>)
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b0:	e001      	b.n	80005b6 <LoopFillZerobss>

080005b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b4:	3204      	adds	r2, #4

080005b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b8:	d3fb      	bcc.n	80005b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ba:	f000 fa6d 	bl	8000a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005be:	f7ff fe2b 	bl	8000218 <main>

080005c2 <LoopForever>:

LoopForever:
  b LoopForever
 80005c2:	e7fe      	b.n	80005c2 <LoopForever>
  ldr   r0, =_estack
 80005c4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80005c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005cc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005d0:	08001588 	.word	0x08001588
  ldr r2, =_sbss
 80005d4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80005d8:	200001cc 	.word	0x200001cc

080005dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005dc:	e7fe      	b.n	80005dc <ADC1_2_IRQHandler>
	...

080005e0 <std>:
 80005e0:	2300      	movs	r3, #0
 80005e2:	b510      	push	{r4, lr}
 80005e4:	4604      	mov	r4, r0
 80005e6:	e9c0 3300 	strd	r3, r3, [r0]
 80005ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80005ee:	6083      	str	r3, [r0, #8]
 80005f0:	8181      	strh	r1, [r0, #12]
 80005f2:	6643      	str	r3, [r0, #100]	; 0x64
 80005f4:	81c2      	strh	r2, [r0, #14]
 80005f6:	6183      	str	r3, [r0, #24]
 80005f8:	4619      	mov	r1, r3
 80005fa:	2208      	movs	r2, #8
 80005fc:	305c      	adds	r0, #92	; 0x5c
 80005fe:	f000 f9f7 	bl	80009f0 <memset>
 8000602:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <std+0x58>)
 8000604:	6224      	str	r4, [r4, #32]
 8000606:	6263      	str	r3, [r4, #36]	; 0x24
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <std+0x5c>)
 800060a:	62a3      	str	r3, [r4, #40]	; 0x28
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <std+0x60>)
 800060e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <std+0x64>)
 8000612:	6323      	str	r3, [r4, #48]	; 0x30
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <std+0x68>)
 8000616:	429c      	cmp	r4, r3
 8000618:	d006      	beq.n	8000628 <std+0x48>
 800061a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800061e:	4294      	cmp	r4, r2
 8000620:	d002      	beq.n	8000628 <std+0x48>
 8000622:	33d0      	adds	r3, #208	; 0xd0
 8000624:	429c      	cmp	r4, r3
 8000626:	d105      	bne.n	8000634 <std+0x54>
 8000628:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800062c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000630:	f000 ba56 	b.w	8000ae0 <__retarget_lock_init_recursive>
 8000634:	bd10      	pop	{r4, pc}
 8000636:	bf00      	nop
 8000638:	08000841 	.word	0x08000841
 800063c:	08000863 	.word	0x08000863
 8000640:	0800089b 	.word	0x0800089b
 8000644:	080008bf 	.word	0x080008bf
 8000648:	20000080 	.word	0x20000080

0800064c <stdio_exit_handler>:
 800064c:	4a02      	ldr	r2, [pc, #8]	; (8000658 <stdio_exit_handler+0xc>)
 800064e:	4903      	ldr	r1, [pc, #12]	; (800065c <stdio_exit_handler+0x10>)
 8000650:	4803      	ldr	r0, [pc, #12]	; (8000660 <stdio_exit_handler+0x14>)
 8000652:	f000 b869 	b.w	8000728 <_fwalk_sglue>
 8000656:	bf00      	nop
 8000658:	20000000 	.word	0x20000000
 800065c:	08001381 	.word	0x08001381
 8000660:	2000000c 	.word	0x2000000c

08000664 <cleanup_stdio>:
 8000664:	6841      	ldr	r1, [r0, #4]
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <cleanup_stdio+0x34>)
 8000668:	b510      	push	{r4, lr}
 800066a:	4299      	cmp	r1, r3
 800066c:	4604      	mov	r4, r0
 800066e:	d001      	beq.n	8000674 <cleanup_stdio+0x10>
 8000670:	f000 fe86 	bl	8001380 <_fflush_r>
 8000674:	68a1      	ldr	r1, [r4, #8]
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <cleanup_stdio+0x38>)
 8000678:	4299      	cmp	r1, r3
 800067a:	d002      	beq.n	8000682 <cleanup_stdio+0x1e>
 800067c:	4620      	mov	r0, r4
 800067e:	f000 fe7f 	bl	8001380 <_fflush_r>
 8000682:	68e1      	ldr	r1, [r4, #12]
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <cleanup_stdio+0x3c>)
 8000686:	4299      	cmp	r1, r3
 8000688:	d004      	beq.n	8000694 <cleanup_stdio+0x30>
 800068a:	4620      	mov	r0, r4
 800068c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000690:	f000 be76 	b.w	8001380 <_fflush_r>
 8000694:	bd10      	pop	{r4, pc}
 8000696:	bf00      	nop
 8000698:	20000080 	.word	0x20000080
 800069c:	200000e8 	.word	0x200000e8
 80006a0:	20000150 	.word	0x20000150

080006a4 <global_stdio_init.part.0>:
 80006a4:	b510      	push	{r4, lr}
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <global_stdio_init.part.0+0x30>)
 80006a8:	4c0b      	ldr	r4, [pc, #44]	; (80006d8 <global_stdio_init.part.0+0x34>)
 80006aa:	4a0c      	ldr	r2, [pc, #48]	; (80006dc <global_stdio_init.part.0+0x38>)
 80006ac:	4620      	mov	r0, r4
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	2104      	movs	r1, #4
 80006b2:	2200      	movs	r2, #0
 80006b4:	f7ff ff94 	bl	80005e0 <std>
 80006b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80006bc:	2201      	movs	r2, #1
 80006be:	2109      	movs	r1, #9
 80006c0:	f7ff ff8e 	bl	80005e0 <std>
 80006c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80006c8:	2202      	movs	r2, #2
 80006ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006ce:	2112      	movs	r1, #18
 80006d0:	f7ff bf86 	b.w	80005e0 <std>
 80006d4:	200001b8 	.word	0x200001b8
 80006d8:	20000080 	.word	0x20000080
 80006dc:	0800064d 	.word	0x0800064d

080006e0 <__sfp_lock_acquire>:
 80006e0:	4801      	ldr	r0, [pc, #4]	; (80006e8 <__sfp_lock_acquire+0x8>)
 80006e2:	f000 b9fe 	b.w	8000ae2 <__retarget_lock_acquire_recursive>
 80006e6:	bf00      	nop
 80006e8:	200001c1 	.word	0x200001c1

080006ec <__sfp_lock_release>:
 80006ec:	4801      	ldr	r0, [pc, #4]	; (80006f4 <__sfp_lock_release+0x8>)
 80006ee:	f000 b9f9 	b.w	8000ae4 <__retarget_lock_release_recursive>
 80006f2:	bf00      	nop
 80006f4:	200001c1 	.word	0x200001c1

080006f8 <__sinit>:
 80006f8:	b510      	push	{r4, lr}
 80006fa:	4604      	mov	r4, r0
 80006fc:	f7ff fff0 	bl	80006e0 <__sfp_lock_acquire>
 8000700:	6a23      	ldr	r3, [r4, #32]
 8000702:	b11b      	cbz	r3, 800070c <__sinit+0x14>
 8000704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000708:	f7ff bff0 	b.w	80006ec <__sfp_lock_release>
 800070c:	4b04      	ldr	r3, [pc, #16]	; (8000720 <__sinit+0x28>)
 800070e:	6223      	str	r3, [r4, #32]
 8000710:	4b04      	ldr	r3, [pc, #16]	; (8000724 <__sinit+0x2c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d1f5      	bne.n	8000704 <__sinit+0xc>
 8000718:	f7ff ffc4 	bl	80006a4 <global_stdio_init.part.0>
 800071c:	e7f2      	b.n	8000704 <__sinit+0xc>
 800071e:	bf00      	nop
 8000720:	08000665 	.word	0x08000665
 8000724:	200001b8 	.word	0x200001b8

08000728 <_fwalk_sglue>:
 8000728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800072c:	4607      	mov	r7, r0
 800072e:	4688      	mov	r8, r1
 8000730:	4614      	mov	r4, r2
 8000732:	2600      	movs	r6, #0
 8000734:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000738:	f1b9 0901 	subs.w	r9, r9, #1
 800073c:	d505      	bpl.n	800074a <_fwalk_sglue+0x22>
 800073e:	6824      	ldr	r4, [r4, #0]
 8000740:	2c00      	cmp	r4, #0
 8000742:	d1f7      	bne.n	8000734 <_fwalk_sglue+0xc>
 8000744:	4630      	mov	r0, r6
 8000746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800074a:	89ab      	ldrh	r3, [r5, #12]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d907      	bls.n	8000760 <_fwalk_sglue+0x38>
 8000750:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000754:	3301      	adds	r3, #1
 8000756:	d003      	beq.n	8000760 <_fwalk_sglue+0x38>
 8000758:	4629      	mov	r1, r5
 800075a:	4638      	mov	r0, r7
 800075c:	47c0      	blx	r8
 800075e:	4306      	orrs	r6, r0
 8000760:	3568      	adds	r5, #104	; 0x68
 8000762:	e7e9      	b.n	8000738 <_fwalk_sglue+0x10>

08000764 <iprintf>:
 8000764:	b40f      	push	{r0, r1, r2, r3}
 8000766:	b507      	push	{r0, r1, r2, lr}
 8000768:	4906      	ldr	r1, [pc, #24]	; (8000784 <iprintf+0x20>)
 800076a:	ab04      	add	r3, sp, #16
 800076c:	6808      	ldr	r0, [r1, #0]
 800076e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000772:	6881      	ldr	r1, [r0, #8]
 8000774:	9301      	str	r3, [sp, #4]
 8000776:	f000 fad3 	bl	8000d20 <_vfiprintf_r>
 800077a:	b003      	add	sp, #12
 800077c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000780:	b004      	add	sp, #16
 8000782:	4770      	bx	lr
 8000784:	20000058 	.word	0x20000058

08000788 <_puts_r>:
 8000788:	6a03      	ldr	r3, [r0, #32]
 800078a:	b570      	push	{r4, r5, r6, lr}
 800078c:	4605      	mov	r5, r0
 800078e:	460e      	mov	r6, r1
 8000790:	6884      	ldr	r4, [r0, #8]
 8000792:	b90b      	cbnz	r3, 8000798 <_puts_r+0x10>
 8000794:	f7ff ffb0 	bl	80006f8 <__sinit>
 8000798:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800079a:	07db      	lsls	r3, r3, #31
 800079c:	d405      	bmi.n	80007aa <_puts_r+0x22>
 800079e:	89a3      	ldrh	r3, [r4, #12]
 80007a0:	0598      	lsls	r0, r3, #22
 80007a2:	d402      	bmi.n	80007aa <_puts_r+0x22>
 80007a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007a6:	f000 f99c 	bl	8000ae2 <__retarget_lock_acquire_recursive>
 80007aa:	89a3      	ldrh	r3, [r4, #12]
 80007ac:	0719      	lsls	r1, r3, #28
 80007ae:	d513      	bpl.n	80007d8 <_puts_r+0x50>
 80007b0:	6923      	ldr	r3, [r4, #16]
 80007b2:	b18b      	cbz	r3, 80007d8 <_puts_r+0x50>
 80007b4:	3e01      	subs	r6, #1
 80007b6:	68a3      	ldr	r3, [r4, #8]
 80007b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80007bc:	3b01      	subs	r3, #1
 80007be:	60a3      	str	r3, [r4, #8]
 80007c0:	b9e9      	cbnz	r1, 80007fe <_puts_r+0x76>
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	da2e      	bge.n	8000824 <_puts_r+0x9c>
 80007c6:	4622      	mov	r2, r4
 80007c8:	210a      	movs	r1, #10
 80007ca:	4628      	mov	r0, r5
 80007cc:	f000 f87b 	bl	80008c6 <__swbuf_r>
 80007d0:	3001      	adds	r0, #1
 80007d2:	d007      	beq.n	80007e4 <_puts_r+0x5c>
 80007d4:	250a      	movs	r5, #10
 80007d6:	e007      	b.n	80007e8 <_puts_r+0x60>
 80007d8:	4621      	mov	r1, r4
 80007da:	4628      	mov	r0, r5
 80007dc:	f000 f8b0 	bl	8000940 <__swsetup_r>
 80007e0:	2800      	cmp	r0, #0
 80007e2:	d0e7      	beq.n	80007b4 <_puts_r+0x2c>
 80007e4:	f04f 35ff 	mov.w	r5, #4294967295
 80007e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007ea:	07da      	lsls	r2, r3, #31
 80007ec:	d405      	bmi.n	80007fa <_puts_r+0x72>
 80007ee:	89a3      	ldrh	r3, [r4, #12]
 80007f0:	059b      	lsls	r3, r3, #22
 80007f2:	d402      	bmi.n	80007fa <_puts_r+0x72>
 80007f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007f6:	f000 f975 	bl	8000ae4 <__retarget_lock_release_recursive>
 80007fa:	4628      	mov	r0, r5
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	2b00      	cmp	r3, #0
 8000800:	da04      	bge.n	800080c <_puts_r+0x84>
 8000802:	69a2      	ldr	r2, [r4, #24]
 8000804:	429a      	cmp	r2, r3
 8000806:	dc06      	bgt.n	8000816 <_puts_r+0x8e>
 8000808:	290a      	cmp	r1, #10
 800080a:	d004      	beq.n	8000816 <_puts_r+0x8e>
 800080c:	6823      	ldr	r3, [r4, #0]
 800080e:	1c5a      	adds	r2, r3, #1
 8000810:	6022      	str	r2, [r4, #0]
 8000812:	7019      	strb	r1, [r3, #0]
 8000814:	e7cf      	b.n	80007b6 <_puts_r+0x2e>
 8000816:	4622      	mov	r2, r4
 8000818:	4628      	mov	r0, r5
 800081a:	f000 f854 	bl	80008c6 <__swbuf_r>
 800081e:	3001      	adds	r0, #1
 8000820:	d1c9      	bne.n	80007b6 <_puts_r+0x2e>
 8000822:	e7df      	b.n	80007e4 <_puts_r+0x5c>
 8000824:	250a      	movs	r5, #10
 8000826:	6823      	ldr	r3, [r4, #0]
 8000828:	1c5a      	adds	r2, r3, #1
 800082a:	6022      	str	r2, [r4, #0]
 800082c:	701d      	strb	r5, [r3, #0]
 800082e:	e7db      	b.n	80007e8 <_puts_r+0x60>

08000830 <puts>:
 8000830:	4b02      	ldr	r3, [pc, #8]	; (800083c <puts+0xc>)
 8000832:	4601      	mov	r1, r0
 8000834:	6818      	ldr	r0, [r3, #0]
 8000836:	f7ff bfa7 	b.w	8000788 <_puts_r>
 800083a:	bf00      	nop
 800083c:	20000058 	.word	0x20000058

08000840 <__sread>:
 8000840:	b510      	push	{r4, lr}
 8000842:	460c      	mov	r4, r1
 8000844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000848:	f000 f8fc 	bl	8000a44 <_read_r>
 800084c:	2800      	cmp	r0, #0
 800084e:	bfab      	itete	ge
 8000850:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000852:	89a3      	ldrhlt	r3, [r4, #12]
 8000854:	181b      	addge	r3, r3, r0
 8000856:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800085a:	bfac      	ite	ge
 800085c:	6563      	strge	r3, [r4, #84]	; 0x54
 800085e:	81a3      	strhlt	r3, [r4, #12]
 8000860:	bd10      	pop	{r4, pc}

08000862 <__swrite>:
 8000862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000866:	461f      	mov	r7, r3
 8000868:	898b      	ldrh	r3, [r1, #12]
 800086a:	4605      	mov	r5, r0
 800086c:	05db      	lsls	r3, r3, #23
 800086e:	460c      	mov	r4, r1
 8000870:	4616      	mov	r6, r2
 8000872:	d505      	bpl.n	8000880 <__swrite+0x1e>
 8000874:	2302      	movs	r3, #2
 8000876:	2200      	movs	r2, #0
 8000878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800087c:	f000 f8d0 	bl	8000a20 <_lseek_r>
 8000880:	89a3      	ldrh	r3, [r4, #12]
 8000882:	4632      	mov	r2, r6
 8000884:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000888:	81a3      	strh	r3, [r4, #12]
 800088a:	4628      	mov	r0, r5
 800088c:	463b      	mov	r3, r7
 800088e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000896:	f000 b8e7 	b.w	8000a68 <_write_r>

0800089a <__sseek>:
 800089a:	b510      	push	{r4, lr}
 800089c:	460c      	mov	r4, r1
 800089e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008a2:	f000 f8bd 	bl	8000a20 <_lseek_r>
 80008a6:	1c43      	adds	r3, r0, #1
 80008a8:	89a3      	ldrh	r3, [r4, #12]
 80008aa:	bf15      	itete	ne
 80008ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80008ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80008b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80008b6:	81a3      	strheq	r3, [r4, #12]
 80008b8:	bf18      	it	ne
 80008ba:	81a3      	strhne	r3, [r4, #12]
 80008bc:	bd10      	pop	{r4, pc}

080008be <__sclose>:
 80008be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008c2:	f000 b89d 	b.w	8000a00 <_close_r>

080008c6 <__swbuf_r>:
 80008c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c8:	460e      	mov	r6, r1
 80008ca:	4614      	mov	r4, r2
 80008cc:	4605      	mov	r5, r0
 80008ce:	b118      	cbz	r0, 80008d8 <__swbuf_r+0x12>
 80008d0:	6a03      	ldr	r3, [r0, #32]
 80008d2:	b90b      	cbnz	r3, 80008d8 <__swbuf_r+0x12>
 80008d4:	f7ff ff10 	bl	80006f8 <__sinit>
 80008d8:	69a3      	ldr	r3, [r4, #24]
 80008da:	60a3      	str	r3, [r4, #8]
 80008dc:	89a3      	ldrh	r3, [r4, #12]
 80008de:	071a      	lsls	r2, r3, #28
 80008e0:	d525      	bpl.n	800092e <__swbuf_r+0x68>
 80008e2:	6923      	ldr	r3, [r4, #16]
 80008e4:	b31b      	cbz	r3, 800092e <__swbuf_r+0x68>
 80008e6:	6823      	ldr	r3, [r4, #0]
 80008e8:	6922      	ldr	r2, [r4, #16]
 80008ea:	b2f6      	uxtb	r6, r6
 80008ec:	1a98      	subs	r0, r3, r2
 80008ee:	6963      	ldr	r3, [r4, #20]
 80008f0:	4637      	mov	r7, r6
 80008f2:	4283      	cmp	r3, r0
 80008f4:	dc04      	bgt.n	8000900 <__swbuf_r+0x3a>
 80008f6:	4621      	mov	r1, r4
 80008f8:	4628      	mov	r0, r5
 80008fa:	f000 fd41 	bl	8001380 <_fflush_r>
 80008fe:	b9e0      	cbnz	r0, 800093a <__swbuf_r+0x74>
 8000900:	68a3      	ldr	r3, [r4, #8]
 8000902:	3b01      	subs	r3, #1
 8000904:	60a3      	str	r3, [r4, #8]
 8000906:	6823      	ldr	r3, [r4, #0]
 8000908:	1c5a      	adds	r2, r3, #1
 800090a:	6022      	str	r2, [r4, #0]
 800090c:	701e      	strb	r6, [r3, #0]
 800090e:	6962      	ldr	r2, [r4, #20]
 8000910:	1c43      	adds	r3, r0, #1
 8000912:	429a      	cmp	r2, r3
 8000914:	d004      	beq.n	8000920 <__swbuf_r+0x5a>
 8000916:	89a3      	ldrh	r3, [r4, #12]
 8000918:	07db      	lsls	r3, r3, #31
 800091a:	d506      	bpl.n	800092a <__swbuf_r+0x64>
 800091c:	2e0a      	cmp	r6, #10
 800091e:	d104      	bne.n	800092a <__swbuf_r+0x64>
 8000920:	4621      	mov	r1, r4
 8000922:	4628      	mov	r0, r5
 8000924:	f000 fd2c 	bl	8001380 <_fflush_r>
 8000928:	b938      	cbnz	r0, 800093a <__swbuf_r+0x74>
 800092a:	4638      	mov	r0, r7
 800092c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800092e:	4621      	mov	r1, r4
 8000930:	4628      	mov	r0, r5
 8000932:	f000 f805 	bl	8000940 <__swsetup_r>
 8000936:	2800      	cmp	r0, #0
 8000938:	d0d5      	beq.n	80008e6 <__swbuf_r+0x20>
 800093a:	f04f 37ff 	mov.w	r7, #4294967295
 800093e:	e7f4      	b.n	800092a <__swbuf_r+0x64>

08000940 <__swsetup_r>:
 8000940:	b538      	push	{r3, r4, r5, lr}
 8000942:	4b2a      	ldr	r3, [pc, #168]	; (80009ec <__swsetup_r+0xac>)
 8000944:	4605      	mov	r5, r0
 8000946:	6818      	ldr	r0, [r3, #0]
 8000948:	460c      	mov	r4, r1
 800094a:	b118      	cbz	r0, 8000954 <__swsetup_r+0x14>
 800094c:	6a03      	ldr	r3, [r0, #32]
 800094e:	b90b      	cbnz	r3, 8000954 <__swsetup_r+0x14>
 8000950:	f7ff fed2 	bl	80006f8 <__sinit>
 8000954:	89a3      	ldrh	r3, [r4, #12]
 8000956:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800095a:	0718      	lsls	r0, r3, #28
 800095c:	d422      	bmi.n	80009a4 <__swsetup_r+0x64>
 800095e:	06d9      	lsls	r1, r3, #27
 8000960:	d407      	bmi.n	8000972 <__swsetup_r+0x32>
 8000962:	2309      	movs	r3, #9
 8000964:	602b      	str	r3, [r5, #0]
 8000966:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800096a:	f04f 30ff 	mov.w	r0, #4294967295
 800096e:	81a3      	strh	r3, [r4, #12]
 8000970:	e034      	b.n	80009dc <__swsetup_r+0x9c>
 8000972:	0758      	lsls	r0, r3, #29
 8000974:	d512      	bpl.n	800099c <__swsetup_r+0x5c>
 8000976:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000978:	b141      	cbz	r1, 800098c <__swsetup_r+0x4c>
 800097a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800097e:	4299      	cmp	r1, r3
 8000980:	d002      	beq.n	8000988 <__swsetup_r+0x48>
 8000982:	4628      	mov	r0, r5
 8000984:	f000 f8b0 	bl	8000ae8 <_free_r>
 8000988:	2300      	movs	r3, #0
 800098a:	6363      	str	r3, [r4, #52]	; 0x34
 800098c:	89a3      	ldrh	r3, [r4, #12]
 800098e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000992:	81a3      	strh	r3, [r4, #12]
 8000994:	2300      	movs	r3, #0
 8000996:	6063      	str	r3, [r4, #4]
 8000998:	6923      	ldr	r3, [r4, #16]
 800099a:	6023      	str	r3, [r4, #0]
 800099c:	89a3      	ldrh	r3, [r4, #12]
 800099e:	f043 0308 	orr.w	r3, r3, #8
 80009a2:	81a3      	strh	r3, [r4, #12]
 80009a4:	6923      	ldr	r3, [r4, #16]
 80009a6:	b94b      	cbnz	r3, 80009bc <__swsetup_r+0x7c>
 80009a8:	89a3      	ldrh	r3, [r4, #12]
 80009aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80009ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009b2:	d003      	beq.n	80009bc <__swsetup_r+0x7c>
 80009b4:	4621      	mov	r1, r4
 80009b6:	4628      	mov	r0, r5
 80009b8:	f000 fd2f 	bl	800141a <__smakebuf_r>
 80009bc:	89a0      	ldrh	r0, [r4, #12]
 80009be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80009c2:	f010 0301 	ands.w	r3, r0, #1
 80009c6:	d00a      	beq.n	80009de <__swsetup_r+0x9e>
 80009c8:	2300      	movs	r3, #0
 80009ca:	60a3      	str	r3, [r4, #8]
 80009cc:	6963      	ldr	r3, [r4, #20]
 80009ce:	425b      	negs	r3, r3
 80009d0:	61a3      	str	r3, [r4, #24]
 80009d2:	6923      	ldr	r3, [r4, #16]
 80009d4:	b943      	cbnz	r3, 80009e8 <__swsetup_r+0xa8>
 80009d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80009da:	d1c4      	bne.n	8000966 <__swsetup_r+0x26>
 80009dc:	bd38      	pop	{r3, r4, r5, pc}
 80009de:	0781      	lsls	r1, r0, #30
 80009e0:	bf58      	it	pl
 80009e2:	6963      	ldrpl	r3, [r4, #20]
 80009e4:	60a3      	str	r3, [r4, #8]
 80009e6:	e7f4      	b.n	80009d2 <__swsetup_r+0x92>
 80009e8:	2000      	movs	r0, #0
 80009ea:	e7f7      	b.n	80009dc <__swsetup_r+0x9c>
 80009ec:	20000058 	.word	0x20000058

080009f0 <memset>:
 80009f0:	4603      	mov	r3, r0
 80009f2:	4402      	add	r2, r0
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d100      	bne.n	80009fa <memset+0xa>
 80009f8:	4770      	bx	lr
 80009fa:	f803 1b01 	strb.w	r1, [r3], #1
 80009fe:	e7f9      	b.n	80009f4 <memset+0x4>

08000a00 <_close_r>:
 8000a00:	b538      	push	{r3, r4, r5, lr}
 8000a02:	2300      	movs	r3, #0
 8000a04:	4d05      	ldr	r5, [pc, #20]	; (8000a1c <_close_r+0x1c>)
 8000a06:	4604      	mov	r4, r0
 8000a08:	4608      	mov	r0, r1
 8000a0a:	602b      	str	r3, [r5, #0]
 8000a0c:	f7ff fcbf 	bl	800038e <_close>
 8000a10:	1c43      	adds	r3, r0, #1
 8000a12:	d102      	bne.n	8000a1a <_close_r+0x1a>
 8000a14:	682b      	ldr	r3, [r5, #0]
 8000a16:	b103      	cbz	r3, 8000a1a <_close_r+0x1a>
 8000a18:	6023      	str	r3, [r4, #0]
 8000a1a:	bd38      	pop	{r3, r4, r5, pc}
 8000a1c:	200001bc 	.word	0x200001bc

08000a20 <_lseek_r>:
 8000a20:	b538      	push	{r3, r4, r5, lr}
 8000a22:	4604      	mov	r4, r0
 8000a24:	4608      	mov	r0, r1
 8000a26:	4611      	mov	r1, r2
 8000a28:	2200      	movs	r2, #0
 8000a2a:	4d05      	ldr	r5, [pc, #20]	; (8000a40 <_lseek_r+0x20>)
 8000a2c:	602a      	str	r2, [r5, #0]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	f7ff fcd1 	bl	80003d6 <_lseek>
 8000a34:	1c43      	adds	r3, r0, #1
 8000a36:	d102      	bne.n	8000a3e <_lseek_r+0x1e>
 8000a38:	682b      	ldr	r3, [r5, #0]
 8000a3a:	b103      	cbz	r3, 8000a3e <_lseek_r+0x1e>
 8000a3c:	6023      	str	r3, [r4, #0]
 8000a3e:	bd38      	pop	{r3, r4, r5, pc}
 8000a40:	200001bc 	.word	0x200001bc

08000a44 <_read_r>:
 8000a44:	b538      	push	{r3, r4, r5, lr}
 8000a46:	4604      	mov	r4, r0
 8000a48:	4608      	mov	r0, r1
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	4d05      	ldr	r5, [pc, #20]	; (8000a64 <_read_r+0x20>)
 8000a50:	602a      	str	r2, [r5, #0]
 8000a52:	461a      	mov	r2, r3
 8000a54:	f7ff fc62 	bl	800031c <_read>
 8000a58:	1c43      	adds	r3, r0, #1
 8000a5a:	d102      	bne.n	8000a62 <_read_r+0x1e>
 8000a5c:	682b      	ldr	r3, [r5, #0]
 8000a5e:	b103      	cbz	r3, 8000a62 <_read_r+0x1e>
 8000a60:	6023      	str	r3, [r4, #0]
 8000a62:	bd38      	pop	{r3, r4, r5, pc}
 8000a64:	200001bc 	.word	0x200001bc

08000a68 <_write_r>:
 8000a68:	b538      	push	{r3, r4, r5, lr}
 8000a6a:	4604      	mov	r4, r0
 8000a6c:	4608      	mov	r0, r1
 8000a6e:	4611      	mov	r1, r2
 8000a70:	2200      	movs	r2, #0
 8000a72:	4d05      	ldr	r5, [pc, #20]	; (8000a88 <_write_r+0x20>)
 8000a74:	602a      	str	r2, [r5, #0]
 8000a76:	461a      	mov	r2, r3
 8000a78:	f7ff fc6d 	bl	8000356 <_write>
 8000a7c:	1c43      	adds	r3, r0, #1
 8000a7e:	d102      	bne.n	8000a86 <_write_r+0x1e>
 8000a80:	682b      	ldr	r3, [r5, #0]
 8000a82:	b103      	cbz	r3, 8000a86 <_write_r+0x1e>
 8000a84:	6023      	str	r3, [r4, #0]
 8000a86:	bd38      	pop	{r3, r4, r5, pc}
 8000a88:	200001bc 	.word	0x200001bc

08000a8c <__errno>:
 8000a8c:	4b01      	ldr	r3, [pc, #4]	; (8000a94 <__errno+0x8>)
 8000a8e:	6818      	ldr	r0, [r3, #0]
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	20000058 	.word	0x20000058

08000a98 <__libc_init_array>:
 8000a98:	b570      	push	{r4, r5, r6, lr}
 8000a9a:	2600      	movs	r6, #0
 8000a9c:	4d0c      	ldr	r5, [pc, #48]	; (8000ad0 <__libc_init_array+0x38>)
 8000a9e:	4c0d      	ldr	r4, [pc, #52]	; (8000ad4 <__libc_init_array+0x3c>)
 8000aa0:	1b64      	subs	r4, r4, r5
 8000aa2:	10a4      	asrs	r4, r4, #2
 8000aa4:	42a6      	cmp	r6, r4
 8000aa6:	d109      	bne.n	8000abc <__libc_init_array+0x24>
 8000aa8:	f000 fd34 	bl	8001514 <_init>
 8000aac:	2600      	movs	r6, #0
 8000aae:	4d0a      	ldr	r5, [pc, #40]	; (8000ad8 <__libc_init_array+0x40>)
 8000ab0:	4c0a      	ldr	r4, [pc, #40]	; (8000adc <__libc_init_array+0x44>)
 8000ab2:	1b64      	subs	r4, r4, r5
 8000ab4:	10a4      	asrs	r4, r4, #2
 8000ab6:	42a6      	cmp	r6, r4
 8000ab8:	d105      	bne.n	8000ac6 <__libc_init_array+0x2e>
 8000aba:	bd70      	pop	{r4, r5, r6, pc}
 8000abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ac0:	4798      	blx	r3
 8000ac2:	3601      	adds	r6, #1
 8000ac4:	e7ee      	b.n	8000aa4 <__libc_init_array+0xc>
 8000ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aca:	4798      	blx	r3
 8000acc:	3601      	adds	r6, #1
 8000ace:	e7f2      	b.n	8000ab6 <__libc_init_array+0x1e>
 8000ad0:	08001580 	.word	0x08001580
 8000ad4:	08001580 	.word	0x08001580
 8000ad8:	08001580 	.word	0x08001580
 8000adc:	08001584 	.word	0x08001584

08000ae0 <__retarget_lock_init_recursive>:
 8000ae0:	4770      	bx	lr

08000ae2 <__retarget_lock_acquire_recursive>:
 8000ae2:	4770      	bx	lr

08000ae4 <__retarget_lock_release_recursive>:
 8000ae4:	4770      	bx	lr
	...

08000ae8 <_free_r>:
 8000ae8:	b538      	push	{r3, r4, r5, lr}
 8000aea:	4605      	mov	r5, r0
 8000aec:	2900      	cmp	r1, #0
 8000aee:	d040      	beq.n	8000b72 <_free_r+0x8a>
 8000af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000af4:	1f0c      	subs	r4, r1, #4
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	bfb8      	it	lt
 8000afa:	18e4      	addlt	r4, r4, r3
 8000afc:	f000 f8dc 	bl	8000cb8 <__malloc_lock>
 8000b00:	4a1c      	ldr	r2, [pc, #112]	; (8000b74 <_free_r+0x8c>)
 8000b02:	6813      	ldr	r3, [r2, #0]
 8000b04:	b933      	cbnz	r3, 8000b14 <_free_r+0x2c>
 8000b06:	6063      	str	r3, [r4, #4]
 8000b08:	6014      	str	r4, [r2, #0]
 8000b0a:	4628      	mov	r0, r5
 8000b0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b10:	f000 b8d8 	b.w	8000cc4 <__malloc_unlock>
 8000b14:	42a3      	cmp	r3, r4
 8000b16:	d908      	bls.n	8000b2a <_free_r+0x42>
 8000b18:	6820      	ldr	r0, [r4, #0]
 8000b1a:	1821      	adds	r1, r4, r0
 8000b1c:	428b      	cmp	r3, r1
 8000b1e:	bf01      	itttt	eq
 8000b20:	6819      	ldreq	r1, [r3, #0]
 8000b22:	685b      	ldreq	r3, [r3, #4]
 8000b24:	1809      	addeq	r1, r1, r0
 8000b26:	6021      	streq	r1, [r4, #0]
 8000b28:	e7ed      	b.n	8000b06 <_free_r+0x1e>
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	b10b      	cbz	r3, 8000b34 <_free_r+0x4c>
 8000b30:	42a3      	cmp	r3, r4
 8000b32:	d9fa      	bls.n	8000b2a <_free_r+0x42>
 8000b34:	6811      	ldr	r1, [r2, #0]
 8000b36:	1850      	adds	r0, r2, r1
 8000b38:	42a0      	cmp	r0, r4
 8000b3a:	d10b      	bne.n	8000b54 <_free_r+0x6c>
 8000b3c:	6820      	ldr	r0, [r4, #0]
 8000b3e:	4401      	add	r1, r0
 8000b40:	1850      	adds	r0, r2, r1
 8000b42:	4283      	cmp	r3, r0
 8000b44:	6011      	str	r1, [r2, #0]
 8000b46:	d1e0      	bne.n	8000b0a <_free_r+0x22>
 8000b48:	6818      	ldr	r0, [r3, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	4408      	add	r0, r1
 8000b4e:	6010      	str	r0, [r2, #0]
 8000b50:	6053      	str	r3, [r2, #4]
 8000b52:	e7da      	b.n	8000b0a <_free_r+0x22>
 8000b54:	d902      	bls.n	8000b5c <_free_r+0x74>
 8000b56:	230c      	movs	r3, #12
 8000b58:	602b      	str	r3, [r5, #0]
 8000b5a:	e7d6      	b.n	8000b0a <_free_r+0x22>
 8000b5c:	6820      	ldr	r0, [r4, #0]
 8000b5e:	1821      	adds	r1, r4, r0
 8000b60:	428b      	cmp	r3, r1
 8000b62:	bf01      	itttt	eq
 8000b64:	6819      	ldreq	r1, [r3, #0]
 8000b66:	685b      	ldreq	r3, [r3, #4]
 8000b68:	1809      	addeq	r1, r1, r0
 8000b6a:	6021      	streq	r1, [r4, #0]
 8000b6c:	6063      	str	r3, [r4, #4]
 8000b6e:	6054      	str	r4, [r2, #4]
 8000b70:	e7cb      	b.n	8000b0a <_free_r+0x22>
 8000b72:	bd38      	pop	{r3, r4, r5, pc}
 8000b74:	200001c4 	.word	0x200001c4

08000b78 <sbrk_aligned>:
 8000b78:	b570      	push	{r4, r5, r6, lr}
 8000b7a:	4e0e      	ldr	r6, [pc, #56]	; (8000bb4 <sbrk_aligned+0x3c>)
 8000b7c:	460c      	mov	r4, r1
 8000b7e:	6831      	ldr	r1, [r6, #0]
 8000b80:	4605      	mov	r5, r0
 8000b82:	b911      	cbnz	r1, 8000b8a <sbrk_aligned+0x12>
 8000b84:	f000 fca8 	bl	80014d8 <_sbrk_r>
 8000b88:	6030      	str	r0, [r6, #0]
 8000b8a:	4621      	mov	r1, r4
 8000b8c:	4628      	mov	r0, r5
 8000b8e:	f000 fca3 	bl	80014d8 <_sbrk_r>
 8000b92:	1c43      	adds	r3, r0, #1
 8000b94:	d00a      	beq.n	8000bac <sbrk_aligned+0x34>
 8000b96:	1cc4      	adds	r4, r0, #3
 8000b98:	f024 0403 	bic.w	r4, r4, #3
 8000b9c:	42a0      	cmp	r0, r4
 8000b9e:	d007      	beq.n	8000bb0 <sbrk_aligned+0x38>
 8000ba0:	1a21      	subs	r1, r4, r0
 8000ba2:	4628      	mov	r0, r5
 8000ba4:	f000 fc98 	bl	80014d8 <_sbrk_r>
 8000ba8:	3001      	adds	r0, #1
 8000baa:	d101      	bne.n	8000bb0 <sbrk_aligned+0x38>
 8000bac:	f04f 34ff 	mov.w	r4, #4294967295
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	bd70      	pop	{r4, r5, r6, pc}
 8000bb4:	200001c8 	.word	0x200001c8

08000bb8 <_malloc_r>:
 8000bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bbc:	1ccd      	adds	r5, r1, #3
 8000bbe:	f025 0503 	bic.w	r5, r5, #3
 8000bc2:	3508      	adds	r5, #8
 8000bc4:	2d0c      	cmp	r5, #12
 8000bc6:	bf38      	it	cc
 8000bc8:	250c      	movcc	r5, #12
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	4607      	mov	r7, r0
 8000bce:	db01      	blt.n	8000bd4 <_malloc_r+0x1c>
 8000bd0:	42a9      	cmp	r1, r5
 8000bd2:	d905      	bls.n	8000be0 <_malloc_r+0x28>
 8000bd4:	230c      	movs	r3, #12
 8000bd6:	2600      	movs	r6, #0
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	4630      	mov	r0, r6
 8000bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000be0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000cb4 <_malloc_r+0xfc>
 8000be4:	f000 f868 	bl	8000cb8 <__malloc_lock>
 8000be8:	f8d8 3000 	ldr.w	r3, [r8]
 8000bec:	461c      	mov	r4, r3
 8000bee:	bb5c      	cbnz	r4, 8000c48 <_malloc_r+0x90>
 8000bf0:	4629      	mov	r1, r5
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	f7ff ffc0 	bl	8000b78 <sbrk_aligned>
 8000bf8:	1c43      	adds	r3, r0, #1
 8000bfa:	4604      	mov	r4, r0
 8000bfc:	d155      	bne.n	8000caa <_malloc_r+0xf2>
 8000bfe:	f8d8 4000 	ldr.w	r4, [r8]
 8000c02:	4626      	mov	r6, r4
 8000c04:	2e00      	cmp	r6, #0
 8000c06:	d145      	bne.n	8000c94 <_malloc_r+0xdc>
 8000c08:	2c00      	cmp	r4, #0
 8000c0a:	d048      	beq.n	8000c9e <_malloc_r+0xe6>
 8000c0c:	6823      	ldr	r3, [r4, #0]
 8000c0e:	4631      	mov	r1, r6
 8000c10:	4638      	mov	r0, r7
 8000c12:	eb04 0903 	add.w	r9, r4, r3
 8000c16:	f000 fc5f 	bl	80014d8 <_sbrk_r>
 8000c1a:	4581      	cmp	r9, r0
 8000c1c:	d13f      	bne.n	8000c9e <_malloc_r+0xe6>
 8000c1e:	6821      	ldr	r1, [r4, #0]
 8000c20:	4638      	mov	r0, r7
 8000c22:	1a6d      	subs	r5, r5, r1
 8000c24:	4629      	mov	r1, r5
 8000c26:	f7ff ffa7 	bl	8000b78 <sbrk_aligned>
 8000c2a:	3001      	adds	r0, #1
 8000c2c:	d037      	beq.n	8000c9e <_malloc_r+0xe6>
 8000c2e:	6823      	ldr	r3, [r4, #0]
 8000c30:	442b      	add	r3, r5
 8000c32:	6023      	str	r3, [r4, #0]
 8000c34:	f8d8 3000 	ldr.w	r3, [r8]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d038      	beq.n	8000cae <_malloc_r+0xf6>
 8000c3c:	685a      	ldr	r2, [r3, #4]
 8000c3e:	42a2      	cmp	r2, r4
 8000c40:	d12b      	bne.n	8000c9a <_malloc_r+0xe2>
 8000c42:	2200      	movs	r2, #0
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	e00f      	b.n	8000c68 <_malloc_r+0xb0>
 8000c48:	6822      	ldr	r2, [r4, #0]
 8000c4a:	1b52      	subs	r2, r2, r5
 8000c4c:	d41f      	bmi.n	8000c8e <_malloc_r+0xd6>
 8000c4e:	2a0b      	cmp	r2, #11
 8000c50:	d917      	bls.n	8000c82 <_malloc_r+0xca>
 8000c52:	1961      	adds	r1, r4, r5
 8000c54:	42a3      	cmp	r3, r4
 8000c56:	6025      	str	r5, [r4, #0]
 8000c58:	bf18      	it	ne
 8000c5a:	6059      	strne	r1, [r3, #4]
 8000c5c:	6863      	ldr	r3, [r4, #4]
 8000c5e:	bf08      	it	eq
 8000c60:	f8c8 1000 	streq.w	r1, [r8]
 8000c64:	5162      	str	r2, [r4, r5]
 8000c66:	604b      	str	r3, [r1, #4]
 8000c68:	4638      	mov	r0, r7
 8000c6a:	f104 060b 	add.w	r6, r4, #11
 8000c6e:	f000 f829 	bl	8000cc4 <__malloc_unlock>
 8000c72:	f026 0607 	bic.w	r6, r6, #7
 8000c76:	1d23      	adds	r3, r4, #4
 8000c78:	1af2      	subs	r2, r6, r3
 8000c7a:	d0ae      	beq.n	8000bda <_malloc_r+0x22>
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	50a3      	str	r3, [r4, r2]
 8000c80:	e7ab      	b.n	8000bda <_malloc_r+0x22>
 8000c82:	42a3      	cmp	r3, r4
 8000c84:	6862      	ldr	r2, [r4, #4]
 8000c86:	d1dd      	bne.n	8000c44 <_malloc_r+0x8c>
 8000c88:	f8c8 2000 	str.w	r2, [r8]
 8000c8c:	e7ec      	b.n	8000c68 <_malloc_r+0xb0>
 8000c8e:	4623      	mov	r3, r4
 8000c90:	6864      	ldr	r4, [r4, #4]
 8000c92:	e7ac      	b.n	8000bee <_malloc_r+0x36>
 8000c94:	4634      	mov	r4, r6
 8000c96:	6876      	ldr	r6, [r6, #4]
 8000c98:	e7b4      	b.n	8000c04 <_malloc_r+0x4c>
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	e7cc      	b.n	8000c38 <_malloc_r+0x80>
 8000c9e:	230c      	movs	r3, #12
 8000ca0:	4638      	mov	r0, r7
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	f000 f80e 	bl	8000cc4 <__malloc_unlock>
 8000ca8:	e797      	b.n	8000bda <_malloc_r+0x22>
 8000caa:	6025      	str	r5, [r4, #0]
 8000cac:	e7dc      	b.n	8000c68 <_malloc_r+0xb0>
 8000cae:	605b      	str	r3, [r3, #4]
 8000cb0:	deff      	udf	#255	; 0xff
 8000cb2:	bf00      	nop
 8000cb4:	200001c4 	.word	0x200001c4

08000cb8 <__malloc_lock>:
 8000cb8:	4801      	ldr	r0, [pc, #4]	; (8000cc0 <__malloc_lock+0x8>)
 8000cba:	f7ff bf12 	b.w	8000ae2 <__retarget_lock_acquire_recursive>
 8000cbe:	bf00      	nop
 8000cc0:	200001c0 	.word	0x200001c0

08000cc4 <__malloc_unlock>:
 8000cc4:	4801      	ldr	r0, [pc, #4]	; (8000ccc <__malloc_unlock+0x8>)
 8000cc6:	f7ff bf0d 	b.w	8000ae4 <__retarget_lock_release_recursive>
 8000cca:	bf00      	nop
 8000ccc:	200001c0 	.word	0x200001c0

08000cd0 <__sfputc_r>:
 8000cd0:	6893      	ldr	r3, [r2, #8]
 8000cd2:	b410      	push	{r4}
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	6093      	str	r3, [r2, #8]
 8000cda:	da07      	bge.n	8000cec <__sfputc_r+0x1c>
 8000cdc:	6994      	ldr	r4, [r2, #24]
 8000cde:	42a3      	cmp	r3, r4
 8000ce0:	db01      	blt.n	8000ce6 <__sfputc_r+0x16>
 8000ce2:	290a      	cmp	r1, #10
 8000ce4:	d102      	bne.n	8000cec <__sfputc_r+0x1c>
 8000ce6:	bc10      	pop	{r4}
 8000ce8:	f7ff bded 	b.w	80008c6 <__swbuf_r>
 8000cec:	6813      	ldr	r3, [r2, #0]
 8000cee:	1c58      	adds	r0, r3, #1
 8000cf0:	6010      	str	r0, [r2, #0]
 8000cf2:	7019      	strb	r1, [r3, #0]
 8000cf4:	4608      	mov	r0, r1
 8000cf6:	bc10      	pop	{r4}
 8000cf8:	4770      	bx	lr

08000cfa <__sfputs_r>:
 8000cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cfc:	4606      	mov	r6, r0
 8000cfe:	460f      	mov	r7, r1
 8000d00:	4614      	mov	r4, r2
 8000d02:	18d5      	adds	r5, r2, r3
 8000d04:	42ac      	cmp	r4, r5
 8000d06:	d101      	bne.n	8000d0c <__sfputs_r+0x12>
 8000d08:	2000      	movs	r0, #0
 8000d0a:	e007      	b.n	8000d1c <__sfputs_r+0x22>
 8000d0c:	463a      	mov	r2, r7
 8000d0e:	4630      	mov	r0, r6
 8000d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d14:	f7ff ffdc 	bl	8000cd0 <__sfputc_r>
 8000d18:	1c43      	adds	r3, r0, #1
 8000d1a:	d1f3      	bne.n	8000d04 <__sfputs_r+0xa>
 8000d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d20 <_vfiprintf_r>:
 8000d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d24:	460d      	mov	r5, r1
 8000d26:	4614      	mov	r4, r2
 8000d28:	4698      	mov	r8, r3
 8000d2a:	4606      	mov	r6, r0
 8000d2c:	b09d      	sub	sp, #116	; 0x74
 8000d2e:	b118      	cbz	r0, 8000d38 <_vfiprintf_r+0x18>
 8000d30:	6a03      	ldr	r3, [r0, #32]
 8000d32:	b90b      	cbnz	r3, 8000d38 <_vfiprintf_r+0x18>
 8000d34:	f7ff fce0 	bl	80006f8 <__sinit>
 8000d38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d3a:	07d9      	lsls	r1, r3, #31
 8000d3c:	d405      	bmi.n	8000d4a <_vfiprintf_r+0x2a>
 8000d3e:	89ab      	ldrh	r3, [r5, #12]
 8000d40:	059a      	lsls	r2, r3, #22
 8000d42:	d402      	bmi.n	8000d4a <_vfiprintf_r+0x2a>
 8000d44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d46:	f7ff fecc 	bl	8000ae2 <__retarget_lock_acquire_recursive>
 8000d4a:	89ab      	ldrh	r3, [r5, #12]
 8000d4c:	071b      	lsls	r3, r3, #28
 8000d4e:	d501      	bpl.n	8000d54 <_vfiprintf_r+0x34>
 8000d50:	692b      	ldr	r3, [r5, #16]
 8000d52:	b99b      	cbnz	r3, 8000d7c <_vfiprintf_r+0x5c>
 8000d54:	4629      	mov	r1, r5
 8000d56:	4630      	mov	r0, r6
 8000d58:	f7ff fdf2 	bl	8000940 <__swsetup_r>
 8000d5c:	b170      	cbz	r0, 8000d7c <_vfiprintf_r+0x5c>
 8000d5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d60:	07dc      	lsls	r4, r3, #31
 8000d62:	d504      	bpl.n	8000d6e <_vfiprintf_r+0x4e>
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	b01d      	add	sp, #116	; 0x74
 8000d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d6e:	89ab      	ldrh	r3, [r5, #12]
 8000d70:	0598      	lsls	r0, r3, #22
 8000d72:	d4f7      	bmi.n	8000d64 <_vfiprintf_r+0x44>
 8000d74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d76:	f7ff feb5 	bl	8000ae4 <__retarget_lock_release_recursive>
 8000d7a:	e7f3      	b.n	8000d64 <_vfiprintf_r+0x44>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8000d80:	2320      	movs	r3, #32
 8000d82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000d86:	2330      	movs	r3, #48	; 0x30
 8000d88:	f04f 0901 	mov.w	r9, #1
 8000d8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d90:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000f40 <_vfiprintf_r+0x220>
 8000d94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000d98:	4623      	mov	r3, r4
 8000d9a:	469a      	mov	sl, r3
 8000d9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000da0:	b10a      	cbz	r2, 8000da6 <_vfiprintf_r+0x86>
 8000da2:	2a25      	cmp	r2, #37	; 0x25
 8000da4:	d1f9      	bne.n	8000d9a <_vfiprintf_r+0x7a>
 8000da6:	ebba 0b04 	subs.w	fp, sl, r4
 8000daa:	d00b      	beq.n	8000dc4 <_vfiprintf_r+0xa4>
 8000dac:	465b      	mov	r3, fp
 8000dae:	4622      	mov	r2, r4
 8000db0:	4629      	mov	r1, r5
 8000db2:	4630      	mov	r0, r6
 8000db4:	f7ff ffa1 	bl	8000cfa <__sfputs_r>
 8000db8:	3001      	adds	r0, #1
 8000dba:	f000 80a9 	beq.w	8000f10 <_vfiprintf_r+0x1f0>
 8000dbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000dc0:	445a      	add	r2, fp
 8000dc2:	9209      	str	r2, [sp, #36]	; 0x24
 8000dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	f000 80a1 	beq.w	8000f10 <_vfiprintf_r+0x1f0>
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000dd8:	f10a 0a01 	add.w	sl, sl, #1
 8000ddc:	9304      	str	r3, [sp, #16]
 8000dde:	9307      	str	r3, [sp, #28]
 8000de0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000de4:	931a      	str	r3, [sp, #104]	; 0x68
 8000de6:	4654      	mov	r4, sl
 8000de8:	2205      	movs	r2, #5
 8000dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dee:	4854      	ldr	r0, [pc, #336]	; (8000f40 <_vfiprintf_r+0x220>)
 8000df0:	f000 fb82 	bl	80014f8 <memchr>
 8000df4:	9a04      	ldr	r2, [sp, #16]
 8000df6:	b9d8      	cbnz	r0, 8000e30 <_vfiprintf_r+0x110>
 8000df8:	06d1      	lsls	r1, r2, #27
 8000dfa:	bf44      	itt	mi
 8000dfc:	2320      	movmi	r3, #32
 8000dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e02:	0713      	lsls	r3, r2, #28
 8000e04:	bf44      	itt	mi
 8000e06:	232b      	movmi	r3, #43	; 0x2b
 8000e08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e0c:	f89a 3000 	ldrb.w	r3, [sl]
 8000e10:	2b2a      	cmp	r3, #42	; 0x2a
 8000e12:	d015      	beq.n	8000e40 <_vfiprintf_r+0x120>
 8000e14:	4654      	mov	r4, sl
 8000e16:	2000      	movs	r0, #0
 8000e18:	f04f 0c0a 	mov.w	ip, #10
 8000e1c:	9a07      	ldr	r2, [sp, #28]
 8000e1e:	4621      	mov	r1, r4
 8000e20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e24:	3b30      	subs	r3, #48	; 0x30
 8000e26:	2b09      	cmp	r3, #9
 8000e28:	d94d      	bls.n	8000ec6 <_vfiprintf_r+0x1a6>
 8000e2a:	b1b0      	cbz	r0, 8000e5a <_vfiprintf_r+0x13a>
 8000e2c:	9207      	str	r2, [sp, #28]
 8000e2e:	e014      	b.n	8000e5a <_vfiprintf_r+0x13a>
 8000e30:	eba0 0308 	sub.w	r3, r0, r8
 8000e34:	fa09 f303 	lsl.w	r3, r9, r3
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	46a2      	mov	sl, r4
 8000e3c:	9304      	str	r3, [sp, #16]
 8000e3e:	e7d2      	b.n	8000de6 <_vfiprintf_r+0xc6>
 8000e40:	9b03      	ldr	r3, [sp, #12]
 8000e42:	1d19      	adds	r1, r3, #4
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	9103      	str	r1, [sp, #12]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	bfbb      	ittet	lt
 8000e4c:	425b      	neglt	r3, r3
 8000e4e:	f042 0202 	orrlt.w	r2, r2, #2
 8000e52:	9307      	strge	r3, [sp, #28]
 8000e54:	9307      	strlt	r3, [sp, #28]
 8000e56:	bfb8      	it	lt
 8000e58:	9204      	strlt	r2, [sp, #16]
 8000e5a:	7823      	ldrb	r3, [r4, #0]
 8000e5c:	2b2e      	cmp	r3, #46	; 0x2e
 8000e5e:	d10c      	bne.n	8000e7a <_vfiprintf_r+0x15a>
 8000e60:	7863      	ldrb	r3, [r4, #1]
 8000e62:	2b2a      	cmp	r3, #42	; 0x2a
 8000e64:	d134      	bne.n	8000ed0 <_vfiprintf_r+0x1b0>
 8000e66:	9b03      	ldr	r3, [sp, #12]
 8000e68:	3402      	adds	r4, #2
 8000e6a:	1d1a      	adds	r2, r3, #4
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	9203      	str	r2, [sp, #12]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	bfb8      	it	lt
 8000e74:	f04f 33ff 	movlt.w	r3, #4294967295
 8000e78:	9305      	str	r3, [sp, #20]
 8000e7a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000f44 <_vfiprintf_r+0x224>
 8000e7e:	2203      	movs	r2, #3
 8000e80:	4650      	mov	r0, sl
 8000e82:	7821      	ldrb	r1, [r4, #0]
 8000e84:	f000 fb38 	bl	80014f8 <memchr>
 8000e88:	b138      	cbz	r0, 8000e9a <_vfiprintf_r+0x17a>
 8000e8a:	2240      	movs	r2, #64	; 0x40
 8000e8c:	9b04      	ldr	r3, [sp, #16]
 8000e8e:	eba0 000a 	sub.w	r0, r0, sl
 8000e92:	4082      	lsls	r2, r0
 8000e94:	4313      	orrs	r3, r2
 8000e96:	3401      	adds	r4, #1
 8000e98:	9304      	str	r3, [sp, #16]
 8000e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e9e:	2206      	movs	r2, #6
 8000ea0:	4829      	ldr	r0, [pc, #164]	; (8000f48 <_vfiprintf_r+0x228>)
 8000ea2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000ea6:	f000 fb27 	bl	80014f8 <memchr>
 8000eaa:	2800      	cmp	r0, #0
 8000eac:	d03f      	beq.n	8000f2e <_vfiprintf_r+0x20e>
 8000eae:	4b27      	ldr	r3, [pc, #156]	; (8000f4c <_vfiprintf_r+0x22c>)
 8000eb0:	bb1b      	cbnz	r3, 8000efa <_vfiprintf_r+0x1da>
 8000eb2:	9b03      	ldr	r3, [sp, #12]
 8000eb4:	3307      	adds	r3, #7
 8000eb6:	f023 0307 	bic.w	r3, r3, #7
 8000eba:	3308      	adds	r3, #8
 8000ebc:	9303      	str	r3, [sp, #12]
 8000ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ec0:	443b      	add	r3, r7
 8000ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8000ec4:	e768      	b.n	8000d98 <_vfiprintf_r+0x78>
 8000ec6:	460c      	mov	r4, r1
 8000ec8:	2001      	movs	r0, #1
 8000eca:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ece:	e7a6      	b.n	8000e1e <_vfiprintf_r+0xfe>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f04f 0c0a 	mov.w	ip, #10
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	3401      	adds	r4, #1
 8000eda:	9305      	str	r3, [sp, #20]
 8000edc:	4620      	mov	r0, r4
 8000ede:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ee2:	3a30      	subs	r2, #48	; 0x30
 8000ee4:	2a09      	cmp	r2, #9
 8000ee6:	d903      	bls.n	8000ef0 <_vfiprintf_r+0x1d0>
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d0c6      	beq.n	8000e7a <_vfiprintf_r+0x15a>
 8000eec:	9105      	str	r1, [sp, #20]
 8000eee:	e7c4      	b.n	8000e7a <_vfiprintf_r+0x15a>
 8000ef0:	4604      	mov	r4, r0
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ef8:	e7f0      	b.n	8000edc <_vfiprintf_r+0x1bc>
 8000efa:	ab03      	add	r3, sp, #12
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	462a      	mov	r2, r5
 8000f00:	4630      	mov	r0, r6
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <_vfiprintf_r+0x230>)
 8000f04:	a904      	add	r1, sp, #16
 8000f06:	f3af 8000 	nop.w
 8000f0a:	4607      	mov	r7, r0
 8000f0c:	1c78      	adds	r0, r7, #1
 8000f0e:	d1d6      	bne.n	8000ebe <_vfiprintf_r+0x19e>
 8000f10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f12:	07d9      	lsls	r1, r3, #31
 8000f14:	d405      	bmi.n	8000f22 <_vfiprintf_r+0x202>
 8000f16:	89ab      	ldrh	r3, [r5, #12]
 8000f18:	059a      	lsls	r2, r3, #22
 8000f1a:	d402      	bmi.n	8000f22 <_vfiprintf_r+0x202>
 8000f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f1e:	f7ff fde1 	bl	8000ae4 <__retarget_lock_release_recursive>
 8000f22:	89ab      	ldrh	r3, [r5, #12]
 8000f24:	065b      	lsls	r3, r3, #25
 8000f26:	f53f af1d 	bmi.w	8000d64 <_vfiprintf_r+0x44>
 8000f2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f2c:	e71c      	b.n	8000d68 <_vfiprintf_r+0x48>
 8000f2e:	ab03      	add	r3, sp, #12
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	462a      	mov	r2, r5
 8000f34:	4630      	mov	r0, r6
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <_vfiprintf_r+0x230>)
 8000f38:	a904      	add	r1, sp, #16
 8000f3a:	f000 f87d 	bl	8001038 <_printf_i>
 8000f3e:	e7e4      	b.n	8000f0a <_vfiprintf_r+0x1ea>
 8000f40:	0800154d 	.word	0x0800154d
 8000f44:	08001553 	.word	0x08001553
 8000f48:	08001557 	.word	0x08001557
 8000f4c:	00000000 	.word	0x00000000
 8000f50:	08000cfb 	.word	0x08000cfb

08000f54 <_printf_common>:
 8000f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f58:	4616      	mov	r6, r2
 8000f5a:	4699      	mov	r9, r3
 8000f5c:	688a      	ldr	r2, [r1, #8]
 8000f5e:	690b      	ldr	r3, [r1, #16]
 8000f60:	4607      	mov	r7, r0
 8000f62:	4293      	cmp	r3, r2
 8000f64:	bfb8      	it	lt
 8000f66:	4613      	movlt	r3, r2
 8000f68:	6033      	str	r3, [r6, #0]
 8000f6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000f6e:	460c      	mov	r4, r1
 8000f70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000f74:	b10a      	cbz	r2, 8000f7a <_printf_common+0x26>
 8000f76:	3301      	adds	r3, #1
 8000f78:	6033      	str	r3, [r6, #0]
 8000f7a:	6823      	ldr	r3, [r4, #0]
 8000f7c:	0699      	lsls	r1, r3, #26
 8000f7e:	bf42      	ittt	mi
 8000f80:	6833      	ldrmi	r3, [r6, #0]
 8000f82:	3302      	addmi	r3, #2
 8000f84:	6033      	strmi	r3, [r6, #0]
 8000f86:	6825      	ldr	r5, [r4, #0]
 8000f88:	f015 0506 	ands.w	r5, r5, #6
 8000f8c:	d106      	bne.n	8000f9c <_printf_common+0x48>
 8000f8e:	f104 0a19 	add.w	sl, r4, #25
 8000f92:	68e3      	ldr	r3, [r4, #12]
 8000f94:	6832      	ldr	r2, [r6, #0]
 8000f96:	1a9b      	subs	r3, r3, r2
 8000f98:	42ab      	cmp	r3, r5
 8000f9a:	dc2b      	bgt.n	8000ff4 <_printf_common+0xa0>
 8000f9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000fa0:	1e13      	subs	r3, r2, #0
 8000fa2:	6822      	ldr	r2, [r4, #0]
 8000fa4:	bf18      	it	ne
 8000fa6:	2301      	movne	r3, #1
 8000fa8:	0692      	lsls	r2, r2, #26
 8000faa:	d430      	bmi.n	800100e <_printf_common+0xba>
 8000fac:	4649      	mov	r1, r9
 8000fae:	4638      	mov	r0, r7
 8000fb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000fb4:	47c0      	blx	r8
 8000fb6:	3001      	adds	r0, #1
 8000fb8:	d023      	beq.n	8001002 <_printf_common+0xae>
 8000fba:	6823      	ldr	r3, [r4, #0]
 8000fbc:	6922      	ldr	r2, [r4, #16]
 8000fbe:	f003 0306 	and.w	r3, r3, #6
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	bf14      	ite	ne
 8000fc6:	2500      	movne	r5, #0
 8000fc8:	6833      	ldreq	r3, [r6, #0]
 8000fca:	f04f 0600 	mov.w	r6, #0
 8000fce:	bf08      	it	eq
 8000fd0:	68e5      	ldreq	r5, [r4, #12]
 8000fd2:	f104 041a 	add.w	r4, r4, #26
 8000fd6:	bf08      	it	eq
 8000fd8:	1aed      	subeq	r5, r5, r3
 8000fda:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8000fde:	bf08      	it	eq
 8000fe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	bfc4      	itt	gt
 8000fe8:	1a9b      	subgt	r3, r3, r2
 8000fea:	18ed      	addgt	r5, r5, r3
 8000fec:	42b5      	cmp	r5, r6
 8000fee:	d11a      	bne.n	8001026 <_printf_common+0xd2>
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	e008      	b.n	8001006 <_printf_common+0xb2>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	4652      	mov	r2, sl
 8000ff8:	4649      	mov	r1, r9
 8000ffa:	4638      	mov	r0, r7
 8000ffc:	47c0      	blx	r8
 8000ffe:	3001      	adds	r0, #1
 8001000:	d103      	bne.n	800100a <_printf_common+0xb6>
 8001002:	f04f 30ff 	mov.w	r0, #4294967295
 8001006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100a:	3501      	adds	r5, #1
 800100c:	e7c1      	b.n	8000f92 <_printf_common+0x3e>
 800100e:	2030      	movs	r0, #48	; 0x30
 8001010:	18e1      	adds	r1, r4, r3
 8001012:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800101c:	4422      	add	r2, r4
 800101e:	3302      	adds	r3, #2
 8001020:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001024:	e7c2      	b.n	8000fac <_printf_common+0x58>
 8001026:	2301      	movs	r3, #1
 8001028:	4622      	mov	r2, r4
 800102a:	4649      	mov	r1, r9
 800102c:	4638      	mov	r0, r7
 800102e:	47c0      	blx	r8
 8001030:	3001      	adds	r0, #1
 8001032:	d0e6      	beq.n	8001002 <_printf_common+0xae>
 8001034:	3601      	adds	r6, #1
 8001036:	e7d9      	b.n	8000fec <_printf_common+0x98>

08001038 <_printf_i>:
 8001038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800103c:	7e0f      	ldrb	r7, [r1, #24]
 800103e:	4691      	mov	r9, r2
 8001040:	2f78      	cmp	r7, #120	; 0x78
 8001042:	4680      	mov	r8, r0
 8001044:	460c      	mov	r4, r1
 8001046:	469a      	mov	sl, r3
 8001048:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800104a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800104e:	d807      	bhi.n	8001060 <_printf_i+0x28>
 8001050:	2f62      	cmp	r7, #98	; 0x62
 8001052:	d80a      	bhi.n	800106a <_printf_i+0x32>
 8001054:	2f00      	cmp	r7, #0
 8001056:	f000 80d5 	beq.w	8001204 <_printf_i+0x1cc>
 800105a:	2f58      	cmp	r7, #88	; 0x58
 800105c:	f000 80c1 	beq.w	80011e2 <_printf_i+0x1aa>
 8001060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001064:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001068:	e03a      	b.n	80010e0 <_printf_i+0xa8>
 800106a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800106e:	2b15      	cmp	r3, #21
 8001070:	d8f6      	bhi.n	8001060 <_printf_i+0x28>
 8001072:	a101      	add	r1, pc, #4	; (adr r1, 8001078 <_printf_i+0x40>)
 8001074:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001078:	080010d1 	.word	0x080010d1
 800107c:	080010e5 	.word	0x080010e5
 8001080:	08001061 	.word	0x08001061
 8001084:	08001061 	.word	0x08001061
 8001088:	08001061 	.word	0x08001061
 800108c:	08001061 	.word	0x08001061
 8001090:	080010e5 	.word	0x080010e5
 8001094:	08001061 	.word	0x08001061
 8001098:	08001061 	.word	0x08001061
 800109c:	08001061 	.word	0x08001061
 80010a0:	08001061 	.word	0x08001061
 80010a4:	080011eb 	.word	0x080011eb
 80010a8:	08001111 	.word	0x08001111
 80010ac:	080011a5 	.word	0x080011a5
 80010b0:	08001061 	.word	0x08001061
 80010b4:	08001061 	.word	0x08001061
 80010b8:	0800120d 	.word	0x0800120d
 80010bc:	08001061 	.word	0x08001061
 80010c0:	08001111 	.word	0x08001111
 80010c4:	08001061 	.word	0x08001061
 80010c8:	08001061 	.word	0x08001061
 80010cc:	080011ad 	.word	0x080011ad
 80010d0:	682b      	ldr	r3, [r5, #0]
 80010d2:	1d1a      	adds	r2, r3, #4
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	602a      	str	r2, [r5, #0]
 80010d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80010dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80010e0:	2301      	movs	r3, #1
 80010e2:	e0a0      	b.n	8001226 <_printf_i+0x1ee>
 80010e4:	6820      	ldr	r0, [r4, #0]
 80010e6:	682b      	ldr	r3, [r5, #0]
 80010e8:	0607      	lsls	r7, r0, #24
 80010ea:	f103 0104 	add.w	r1, r3, #4
 80010ee:	6029      	str	r1, [r5, #0]
 80010f0:	d501      	bpl.n	80010f6 <_printf_i+0xbe>
 80010f2:	681e      	ldr	r6, [r3, #0]
 80010f4:	e003      	b.n	80010fe <_printf_i+0xc6>
 80010f6:	0646      	lsls	r6, r0, #25
 80010f8:	d5fb      	bpl.n	80010f2 <_printf_i+0xba>
 80010fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80010fe:	2e00      	cmp	r6, #0
 8001100:	da03      	bge.n	800110a <_printf_i+0xd2>
 8001102:	232d      	movs	r3, #45	; 0x2d
 8001104:	4276      	negs	r6, r6
 8001106:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800110a:	230a      	movs	r3, #10
 800110c:	4859      	ldr	r0, [pc, #356]	; (8001274 <_printf_i+0x23c>)
 800110e:	e012      	b.n	8001136 <_printf_i+0xfe>
 8001110:	682b      	ldr	r3, [r5, #0]
 8001112:	6820      	ldr	r0, [r4, #0]
 8001114:	1d19      	adds	r1, r3, #4
 8001116:	6029      	str	r1, [r5, #0]
 8001118:	0605      	lsls	r5, r0, #24
 800111a:	d501      	bpl.n	8001120 <_printf_i+0xe8>
 800111c:	681e      	ldr	r6, [r3, #0]
 800111e:	e002      	b.n	8001126 <_printf_i+0xee>
 8001120:	0641      	lsls	r1, r0, #25
 8001122:	d5fb      	bpl.n	800111c <_printf_i+0xe4>
 8001124:	881e      	ldrh	r6, [r3, #0]
 8001126:	2f6f      	cmp	r7, #111	; 0x6f
 8001128:	bf0c      	ite	eq
 800112a:	2308      	moveq	r3, #8
 800112c:	230a      	movne	r3, #10
 800112e:	4851      	ldr	r0, [pc, #324]	; (8001274 <_printf_i+0x23c>)
 8001130:	2100      	movs	r1, #0
 8001132:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001136:	6865      	ldr	r5, [r4, #4]
 8001138:	2d00      	cmp	r5, #0
 800113a:	bfa8      	it	ge
 800113c:	6821      	ldrge	r1, [r4, #0]
 800113e:	60a5      	str	r5, [r4, #8]
 8001140:	bfa4      	itt	ge
 8001142:	f021 0104 	bicge.w	r1, r1, #4
 8001146:	6021      	strge	r1, [r4, #0]
 8001148:	b90e      	cbnz	r6, 800114e <_printf_i+0x116>
 800114a:	2d00      	cmp	r5, #0
 800114c:	d04b      	beq.n	80011e6 <_printf_i+0x1ae>
 800114e:	4615      	mov	r5, r2
 8001150:	fbb6 f1f3 	udiv	r1, r6, r3
 8001154:	fb03 6711 	mls	r7, r3, r1, r6
 8001158:	5dc7      	ldrb	r7, [r0, r7]
 800115a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800115e:	4637      	mov	r7, r6
 8001160:	42bb      	cmp	r3, r7
 8001162:	460e      	mov	r6, r1
 8001164:	d9f4      	bls.n	8001150 <_printf_i+0x118>
 8001166:	2b08      	cmp	r3, #8
 8001168:	d10b      	bne.n	8001182 <_printf_i+0x14a>
 800116a:	6823      	ldr	r3, [r4, #0]
 800116c:	07de      	lsls	r6, r3, #31
 800116e:	d508      	bpl.n	8001182 <_printf_i+0x14a>
 8001170:	6923      	ldr	r3, [r4, #16]
 8001172:	6861      	ldr	r1, [r4, #4]
 8001174:	4299      	cmp	r1, r3
 8001176:	bfde      	ittt	le
 8001178:	2330      	movle	r3, #48	; 0x30
 800117a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800117e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001182:	1b52      	subs	r2, r2, r5
 8001184:	6122      	str	r2, [r4, #16]
 8001186:	464b      	mov	r3, r9
 8001188:	4621      	mov	r1, r4
 800118a:	4640      	mov	r0, r8
 800118c:	f8cd a000 	str.w	sl, [sp]
 8001190:	aa03      	add	r2, sp, #12
 8001192:	f7ff fedf 	bl	8000f54 <_printf_common>
 8001196:	3001      	adds	r0, #1
 8001198:	d14a      	bne.n	8001230 <_printf_i+0x1f8>
 800119a:	f04f 30ff 	mov.w	r0, #4294967295
 800119e:	b004      	add	sp, #16
 80011a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011a4:	6823      	ldr	r3, [r4, #0]
 80011a6:	f043 0320 	orr.w	r3, r3, #32
 80011aa:	6023      	str	r3, [r4, #0]
 80011ac:	2778      	movs	r7, #120	; 0x78
 80011ae:	4832      	ldr	r0, [pc, #200]	; (8001278 <_printf_i+0x240>)
 80011b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80011b4:	6823      	ldr	r3, [r4, #0]
 80011b6:	6829      	ldr	r1, [r5, #0]
 80011b8:	061f      	lsls	r7, r3, #24
 80011ba:	f851 6b04 	ldr.w	r6, [r1], #4
 80011be:	d402      	bmi.n	80011c6 <_printf_i+0x18e>
 80011c0:	065f      	lsls	r7, r3, #25
 80011c2:	bf48      	it	mi
 80011c4:	b2b6      	uxthmi	r6, r6
 80011c6:	07df      	lsls	r7, r3, #31
 80011c8:	bf48      	it	mi
 80011ca:	f043 0320 	orrmi.w	r3, r3, #32
 80011ce:	6029      	str	r1, [r5, #0]
 80011d0:	bf48      	it	mi
 80011d2:	6023      	strmi	r3, [r4, #0]
 80011d4:	b91e      	cbnz	r6, 80011de <_printf_i+0x1a6>
 80011d6:	6823      	ldr	r3, [r4, #0]
 80011d8:	f023 0320 	bic.w	r3, r3, #32
 80011dc:	6023      	str	r3, [r4, #0]
 80011de:	2310      	movs	r3, #16
 80011e0:	e7a6      	b.n	8001130 <_printf_i+0xf8>
 80011e2:	4824      	ldr	r0, [pc, #144]	; (8001274 <_printf_i+0x23c>)
 80011e4:	e7e4      	b.n	80011b0 <_printf_i+0x178>
 80011e6:	4615      	mov	r5, r2
 80011e8:	e7bd      	b.n	8001166 <_printf_i+0x12e>
 80011ea:	682b      	ldr	r3, [r5, #0]
 80011ec:	6826      	ldr	r6, [r4, #0]
 80011ee:	1d18      	adds	r0, r3, #4
 80011f0:	6961      	ldr	r1, [r4, #20]
 80011f2:	6028      	str	r0, [r5, #0]
 80011f4:	0635      	lsls	r5, r6, #24
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	d501      	bpl.n	80011fe <_printf_i+0x1c6>
 80011fa:	6019      	str	r1, [r3, #0]
 80011fc:	e002      	b.n	8001204 <_printf_i+0x1cc>
 80011fe:	0670      	lsls	r0, r6, #25
 8001200:	d5fb      	bpl.n	80011fa <_printf_i+0x1c2>
 8001202:	8019      	strh	r1, [r3, #0]
 8001204:	2300      	movs	r3, #0
 8001206:	4615      	mov	r5, r2
 8001208:	6123      	str	r3, [r4, #16]
 800120a:	e7bc      	b.n	8001186 <_printf_i+0x14e>
 800120c:	682b      	ldr	r3, [r5, #0]
 800120e:	2100      	movs	r1, #0
 8001210:	1d1a      	adds	r2, r3, #4
 8001212:	602a      	str	r2, [r5, #0]
 8001214:	681d      	ldr	r5, [r3, #0]
 8001216:	6862      	ldr	r2, [r4, #4]
 8001218:	4628      	mov	r0, r5
 800121a:	f000 f96d 	bl	80014f8 <memchr>
 800121e:	b108      	cbz	r0, 8001224 <_printf_i+0x1ec>
 8001220:	1b40      	subs	r0, r0, r5
 8001222:	6060      	str	r0, [r4, #4]
 8001224:	6863      	ldr	r3, [r4, #4]
 8001226:	6123      	str	r3, [r4, #16]
 8001228:	2300      	movs	r3, #0
 800122a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800122e:	e7aa      	b.n	8001186 <_printf_i+0x14e>
 8001230:	462a      	mov	r2, r5
 8001232:	4649      	mov	r1, r9
 8001234:	4640      	mov	r0, r8
 8001236:	6923      	ldr	r3, [r4, #16]
 8001238:	47d0      	blx	sl
 800123a:	3001      	adds	r0, #1
 800123c:	d0ad      	beq.n	800119a <_printf_i+0x162>
 800123e:	6823      	ldr	r3, [r4, #0]
 8001240:	079b      	lsls	r3, r3, #30
 8001242:	d413      	bmi.n	800126c <_printf_i+0x234>
 8001244:	68e0      	ldr	r0, [r4, #12]
 8001246:	9b03      	ldr	r3, [sp, #12]
 8001248:	4298      	cmp	r0, r3
 800124a:	bfb8      	it	lt
 800124c:	4618      	movlt	r0, r3
 800124e:	e7a6      	b.n	800119e <_printf_i+0x166>
 8001250:	2301      	movs	r3, #1
 8001252:	4632      	mov	r2, r6
 8001254:	4649      	mov	r1, r9
 8001256:	4640      	mov	r0, r8
 8001258:	47d0      	blx	sl
 800125a:	3001      	adds	r0, #1
 800125c:	d09d      	beq.n	800119a <_printf_i+0x162>
 800125e:	3501      	adds	r5, #1
 8001260:	68e3      	ldr	r3, [r4, #12]
 8001262:	9903      	ldr	r1, [sp, #12]
 8001264:	1a5b      	subs	r3, r3, r1
 8001266:	42ab      	cmp	r3, r5
 8001268:	dcf2      	bgt.n	8001250 <_printf_i+0x218>
 800126a:	e7eb      	b.n	8001244 <_printf_i+0x20c>
 800126c:	2500      	movs	r5, #0
 800126e:	f104 0619 	add.w	r6, r4, #25
 8001272:	e7f5      	b.n	8001260 <_printf_i+0x228>
 8001274:	0800155e 	.word	0x0800155e
 8001278:	0800156f 	.word	0x0800156f

0800127c <__sflush_r>:
 800127c:	898a      	ldrh	r2, [r1, #12]
 800127e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001280:	4605      	mov	r5, r0
 8001282:	0710      	lsls	r0, r2, #28
 8001284:	460c      	mov	r4, r1
 8001286:	d457      	bmi.n	8001338 <__sflush_r+0xbc>
 8001288:	684b      	ldr	r3, [r1, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	dc04      	bgt.n	8001298 <__sflush_r+0x1c>
 800128e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001290:	2b00      	cmp	r3, #0
 8001292:	dc01      	bgt.n	8001298 <__sflush_r+0x1c>
 8001294:	2000      	movs	r0, #0
 8001296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001298:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800129a:	2e00      	cmp	r6, #0
 800129c:	d0fa      	beq.n	8001294 <__sflush_r+0x18>
 800129e:	2300      	movs	r3, #0
 80012a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80012a4:	682f      	ldr	r7, [r5, #0]
 80012a6:	6a21      	ldr	r1, [r4, #32]
 80012a8:	602b      	str	r3, [r5, #0]
 80012aa:	d032      	beq.n	8001312 <__sflush_r+0x96>
 80012ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012ae:	89a3      	ldrh	r3, [r4, #12]
 80012b0:	075a      	lsls	r2, r3, #29
 80012b2:	d505      	bpl.n	80012c0 <__sflush_r+0x44>
 80012b4:	6863      	ldr	r3, [r4, #4]
 80012b6:	1ac0      	subs	r0, r0, r3
 80012b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012ba:	b10b      	cbz	r3, 80012c0 <__sflush_r+0x44>
 80012bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012be:	1ac0      	subs	r0, r0, r3
 80012c0:	2300      	movs	r3, #0
 80012c2:	4602      	mov	r2, r0
 80012c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012c6:	4628      	mov	r0, r5
 80012c8:	6a21      	ldr	r1, [r4, #32]
 80012ca:	47b0      	blx	r6
 80012cc:	1c43      	adds	r3, r0, #1
 80012ce:	89a3      	ldrh	r3, [r4, #12]
 80012d0:	d106      	bne.n	80012e0 <__sflush_r+0x64>
 80012d2:	6829      	ldr	r1, [r5, #0]
 80012d4:	291d      	cmp	r1, #29
 80012d6:	d82b      	bhi.n	8001330 <__sflush_r+0xb4>
 80012d8:	4a28      	ldr	r2, [pc, #160]	; (800137c <__sflush_r+0x100>)
 80012da:	410a      	asrs	r2, r1
 80012dc:	07d6      	lsls	r6, r2, #31
 80012de:	d427      	bmi.n	8001330 <__sflush_r+0xb4>
 80012e0:	2200      	movs	r2, #0
 80012e2:	6062      	str	r2, [r4, #4]
 80012e4:	6922      	ldr	r2, [r4, #16]
 80012e6:	04d9      	lsls	r1, r3, #19
 80012e8:	6022      	str	r2, [r4, #0]
 80012ea:	d504      	bpl.n	80012f6 <__sflush_r+0x7a>
 80012ec:	1c42      	adds	r2, r0, #1
 80012ee:	d101      	bne.n	80012f4 <__sflush_r+0x78>
 80012f0:	682b      	ldr	r3, [r5, #0]
 80012f2:	b903      	cbnz	r3, 80012f6 <__sflush_r+0x7a>
 80012f4:	6560      	str	r0, [r4, #84]	; 0x54
 80012f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012f8:	602f      	str	r7, [r5, #0]
 80012fa:	2900      	cmp	r1, #0
 80012fc:	d0ca      	beq.n	8001294 <__sflush_r+0x18>
 80012fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001302:	4299      	cmp	r1, r3
 8001304:	d002      	beq.n	800130c <__sflush_r+0x90>
 8001306:	4628      	mov	r0, r5
 8001308:	f7ff fbee 	bl	8000ae8 <_free_r>
 800130c:	2000      	movs	r0, #0
 800130e:	6360      	str	r0, [r4, #52]	; 0x34
 8001310:	e7c1      	b.n	8001296 <__sflush_r+0x1a>
 8001312:	2301      	movs	r3, #1
 8001314:	4628      	mov	r0, r5
 8001316:	47b0      	blx	r6
 8001318:	1c41      	adds	r1, r0, #1
 800131a:	d1c8      	bne.n	80012ae <__sflush_r+0x32>
 800131c:	682b      	ldr	r3, [r5, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0c5      	beq.n	80012ae <__sflush_r+0x32>
 8001322:	2b1d      	cmp	r3, #29
 8001324:	d001      	beq.n	800132a <__sflush_r+0xae>
 8001326:	2b16      	cmp	r3, #22
 8001328:	d101      	bne.n	800132e <__sflush_r+0xb2>
 800132a:	602f      	str	r7, [r5, #0]
 800132c:	e7b2      	b.n	8001294 <__sflush_r+0x18>
 800132e:	89a3      	ldrh	r3, [r4, #12]
 8001330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001334:	81a3      	strh	r3, [r4, #12]
 8001336:	e7ae      	b.n	8001296 <__sflush_r+0x1a>
 8001338:	690f      	ldr	r7, [r1, #16]
 800133a:	2f00      	cmp	r7, #0
 800133c:	d0aa      	beq.n	8001294 <__sflush_r+0x18>
 800133e:	0793      	lsls	r3, r2, #30
 8001340:	bf18      	it	ne
 8001342:	2300      	movne	r3, #0
 8001344:	680e      	ldr	r6, [r1, #0]
 8001346:	bf08      	it	eq
 8001348:	694b      	ldreq	r3, [r1, #20]
 800134a:	1bf6      	subs	r6, r6, r7
 800134c:	600f      	str	r7, [r1, #0]
 800134e:	608b      	str	r3, [r1, #8]
 8001350:	2e00      	cmp	r6, #0
 8001352:	dd9f      	ble.n	8001294 <__sflush_r+0x18>
 8001354:	4633      	mov	r3, r6
 8001356:	463a      	mov	r2, r7
 8001358:	4628      	mov	r0, r5
 800135a:	6a21      	ldr	r1, [r4, #32]
 800135c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001360:	47e0      	blx	ip
 8001362:	2800      	cmp	r0, #0
 8001364:	dc06      	bgt.n	8001374 <__sflush_r+0xf8>
 8001366:	89a3      	ldrh	r3, [r4, #12]
 8001368:	f04f 30ff 	mov.w	r0, #4294967295
 800136c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001370:	81a3      	strh	r3, [r4, #12]
 8001372:	e790      	b.n	8001296 <__sflush_r+0x1a>
 8001374:	4407      	add	r7, r0
 8001376:	1a36      	subs	r6, r6, r0
 8001378:	e7ea      	b.n	8001350 <__sflush_r+0xd4>
 800137a:	bf00      	nop
 800137c:	dfbffffe 	.word	0xdfbffffe

08001380 <_fflush_r>:
 8001380:	b538      	push	{r3, r4, r5, lr}
 8001382:	690b      	ldr	r3, [r1, #16]
 8001384:	4605      	mov	r5, r0
 8001386:	460c      	mov	r4, r1
 8001388:	b913      	cbnz	r3, 8001390 <_fflush_r+0x10>
 800138a:	2500      	movs	r5, #0
 800138c:	4628      	mov	r0, r5
 800138e:	bd38      	pop	{r3, r4, r5, pc}
 8001390:	b118      	cbz	r0, 800139a <_fflush_r+0x1a>
 8001392:	6a03      	ldr	r3, [r0, #32]
 8001394:	b90b      	cbnz	r3, 800139a <_fflush_r+0x1a>
 8001396:	f7ff f9af 	bl	80006f8 <__sinit>
 800139a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f3      	beq.n	800138a <_fflush_r+0xa>
 80013a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80013a4:	07d0      	lsls	r0, r2, #31
 80013a6:	d404      	bmi.n	80013b2 <_fflush_r+0x32>
 80013a8:	0599      	lsls	r1, r3, #22
 80013aa:	d402      	bmi.n	80013b2 <_fflush_r+0x32>
 80013ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013ae:	f7ff fb98 	bl	8000ae2 <__retarget_lock_acquire_recursive>
 80013b2:	4628      	mov	r0, r5
 80013b4:	4621      	mov	r1, r4
 80013b6:	f7ff ff61 	bl	800127c <__sflush_r>
 80013ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013bc:	4605      	mov	r5, r0
 80013be:	07da      	lsls	r2, r3, #31
 80013c0:	d4e4      	bmi.n	800138c <_fflush_r+0xc>
 80013c2:	89a3      	ldrh	r3, [r4, #12]
 80013c4:	059b      	lsls	r3, r3, #22
 80013c6:	d4e1      	bmi.n	800138c <_fflush_r+0xc>
 80013c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013ca:	f7ff fb8b 	bl	8000ae4 <__retarget_lock_release_recursive>
 80013ce:	e7dd      	b.n	800138c <_fflush_r+0xc>

080013d0 <__swhatbuf_r>:
 80013d0:	b570      	push	{r4, r5, r6, lr}
 80013d2:	460c      	mov	r4, r1
 80013d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013d8:	4615      	mov	r5, r2
 80013da:	2900      	cmp	r1, #0
 80013dc:	461e      	mov	r6, r3
 80013de:	b096      	sub	sp, #88	; 0x58
 80013e0:	da0c      	bge.n	80013fc <__swhatbuf_r+0x2c>
 80013e2:	89a3      	ldrh	r3, [r4, #12]
 80013e4:	2100      	movs	r1, #0
 80013e6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80013ea:	bf0c      	ite	eq
 80013ec:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80013f0:	2340      	movne	r3, #64	; 0x40
 80013f2:	2000      	movs	r0, #0
 80013f4:	6031      	str	r1, [r6, #0]
 80013f6:	602b      	str	r3, [r5, #0]
 80013f8:	b016      	add	sp, #88	; 0x58
 80013fa:	bd70      	pop	{r4, r5, r6, pc}
 80013fc:	466a      	mov	r2, sp
 80013fe:	f000 f849 	bl	8001494 <_fstat_r>
 8001402:	2800      	cmp	r0, #0
 8001404:	dbed      	blt.n	80013e2 <__swhatbuf_r+0x12>
 8001406:	9901      	ldr	r1, [sp, #4]
 8001408:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800140c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001410:	4259      	negs	r1, r3
 8001412:	4159      	adcs	r1, r3
 8001414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001418:	e7eb      	b.n	80013f2 <__swhatbuf_r+0x22>

0800141a <__smakebuf_r>:
 800141a:	898b      	ldrh	r3, [r1, #12]
 800141c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800141e:	079d      	lsls	r5, r3, #30
 8001420:	4606      	mov	r6, r0
 8001422:	460c      	mov	r4, r1
 8001424:	d507      	bpl.n	8001436 <__smakebuf_r+0x1c>
 8001426:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800142a:	6023      	str	r3, [r4, #0]
 800142c:	6123      	str	r3, [r4, #16]
 800142e:	2301      	movs	r3, #1
 8001430:	6163      	str	r3, [r4, #20]
 8001432:	b002      	add	sp, #8
 8001434:	bd70      	pop	{r4, r5, r6, pc}
 8001436:	466a      	mov	r2, sp
 8001438:	ab01      	add	r3, sp, #4
 800143a:	f7ff ffc9 	bl	80013d0 <__swhatbuf_r>
 800143e:	9900      	ldr	r1, [sp, #0]
 8001440:	4605      	mov	r5, r0
 8001442:	4630      	mov	r0, r6
 8001444:	f7ff fbb8 	bl	8000bb8 <_malloc_r>
 8001448:	b948      	cbnz	r0, 800145e <__smakebuf_r+0x44>
 800144a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800144e:	059a      	lsls	r2, r3, #22
 8001450:	d4ef      	bmi.n	8001432 <__smakebuf_r+0x18>
 8001452:	f023 0303 	bic.w	r3, r3, #3
 8001456:	f043 0302 	orr.w	r3, r3, #2
 800145a:	81a3      	strh	r3, [r4, #12]
 800145c:	e7e3      	b.n	8001426 <__smakebuf_r+0xc>
 800145e:	89a3      	ldrh	r3, [r4, #12]
 8001460:	6020      	str	r0, [r4, #0]
 8001462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001466:	81a3      	strh	r3, [r4, #12]
 8001468:	9b00      	ldr	r3, [sp, #0]
 800146a:	6120      	str	r0, [r4, #16]
 800146c:	6163      	str	r3, [r4, #20]
 800146e:	9b01      	ldr	r3, [sp, #4]
 8001470:	b15b      	cbz	r3, 800148a <__smakebuf_r+0x70>
 8001472:	4630      	mov	r0, r6
 8001474:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001478:	f000 f81e 	bl	80014b8 <_isatty_r>
 800147c:	b128      	cbz	r0, 800148a <__smakebuf_r+0x70>
 800147e:	89a3      	ldrh	r3, [r4, #12]
 8001480:	f023 0303 	bic.w	r3, r3, #3
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	81a3      	strh	r3, [r4, #12]
 800148a:	89a3      	ldrh	r3, [r4, #12]
 800148c:	431d      	orrs	r5, r3
 800148e:	81a5      	strh	r5, [r4, #12]
 8001490:	e7cf      	b.n	8001432 <__smakebuf_r+0x18>
	...

08001494 <_fstat_r>:
 8001494:	b538      	push	{r3, r4, r5, lr}
 8001496:	2300      	movs	r3, #0
 8001498:	4d06      	ldr	r5, [pc, #24]	; (80014b4 <_fstat_r+0x20>)
 800149a:	4604      	mov	r4, r0
 800149c:	4608      	mov	r0, r1
 800149e:	4611      	mov	r1, r2
 80014a0:	602b      	str	r3, [r5, #0]
 80014a2:	f7fe ff7f 	bl	80003a4 <_fstat>
 80014a6:	1c43      	adds	r3, r0, #1
 80014a8:	d102      	bne.n	80014b0 <_fstat_r+0x1c>
 80014aa:	682b      	ldr	r3, [r5, #0]
 80014ac:	b103      	cbz	r3, 80014b0 <_fstat_r+0x1c>
 80014ae:	6023      	str	r3, [r4, #0]
 80014b0:	bd38      	pop	{r3, r4, r5, pc}
 80014b2:	bf00      	nop
 80014b4:	200001bc 	.word	0x200001bc

080014b8 <_isatty_r>:
 80014b8:	b538      	push	{r3, r4, r5, lr}
 80014ba:	2300      	movs	r3, #0
 80014bc:	4d05      	ldr	r5, [pc, #20]	; (80014d4 <_isatty_r+0x1c>)
 80014be:	4604      	mov	r4, r0
 80014c0:	4608      	mov	r0, r1
 80014c2:	602b      	str	r3, [r5, #0]
 80014c4:	f7fe ff7d 	bl	80003c2 <_isatty>
 80014c8:	1c43      	adds	r3, r0, #1
 80014ca:	d102      	bne.n	80014d2 <_isatty_r+0x1a>
 80014cc:	682b      	ldr	r3, [r5, #0]
 80014ce:	b103      	cbz	r3, 80014d2 <_isatty_r+0x1a>
 80014d0:	6023      	str	r3, [r4, #0]
 80014d2:	bd38      	pop	{r3, r4, r5, pc}
 80014d4:	200001bc 	.word	0x200001bc

080014d8 <_sbrk_r>:
 80014d8:	b538      	push	{r3, r4, r5, lr}
 80014da:	2300      	movs	r3, #0
 80014dc:	4d05      	ldr	r5, [pc, #20]	; (80014f4 <_sbrk_r+0x1c>)
 80014de:	4604      	mov	r4, r0
 80014e0:	4608      	mov	r0, r1
 80014e2:	602b      	str	r3, [r5, #0]
 80014e4:	f7fe ff84 	bl	80003f0 <_sbrk>
 80014e8:	1c43      	adds	r3, r0, #1
 80014ea:	d102      	bne.n	80014f2 <_sbrk_r+0x1a>
 80014ec:	682b      	ldr	r3, [r5, #0]
 80014ee:	b103      	cbz	r3, 80014f2 <_sbrk_r+0x1a>
 80014f0:	6023      	str	r3, [r4, #0]
 80014f2:	bd38      	pop	{r3, r4, r5, pc}
 80014f4:	200001bc 	.word	0x200001bc

080014f8 <memchr>:
 80014f8:	4603      	mov	r3, r0
 80014fa:	b510      	push	{r4, lr}
 80014fc:	b2c9      	uxtb	r1, r1
 80014fe:	4402      	add	r2, r0
 8001500:	4293      	cmp	r3, r2
 8001502:	4618      	mov	r0, r3
 8001504:	d101      	bne.n	800150a <memchr+0x12>
 8001506:	2000      	movs	r0, #0
 8001508:	e003      	b.n	8001512 <memchr+0x1a>
 800150a:	7804      	ldrb	r4, [r0, #0]
 800150c:	3301      	adds	r3, #1
 800150e:	428c      	cmp	r4, r1
 8001510:	d1f6      	bne.n	8001500 <memchr+0x8>
 8001512:	bd10      	pop	{r4, pc}

08001514 <_init>:
 8001514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001516:	bf00      	nop
 8001518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800151a:	bc08      	pop	{r3}
 800151c:	469e      	mov	lr, r3
 800151e:	4770      	bx	lr

08001520 <_fini>:
 8001520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001522:	bf00      	nop
 8001524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001526:	bc08      	pop	{r3}
 8001528:	469e      	mov	lr, r3
 800152a:	4770      	bx	lr
