
01_blinky_rcc_systick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000022c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800035c  08000364  00010364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800035c  0800035c  00010364  2**0
                  CONTENTS
  4 .ARM          00000000  0800035c  0800035c  00010364  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800035c  08000364  00010364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800035c  0800035c  0001035c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000360  08000360  00010360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000364  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000364  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010364  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001038d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000032a  00000000  00000000  000103d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000012a  00000000  00000000  000106fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000058  00000000  00000000  00010828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000039  00000000  00000000  00010880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ff24  00000000  00000000  000108b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000005c2  00000000  00000000  000207dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000544a2  00000000  00000000  00020d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000a0  00000000  00000000  00075244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000752e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000344 	.word	0x08000344

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000344 	.word	0x08000344

08000170 <main>:
void DelayMS(uint32_t delay);
void HSE_PLL_SYS_CLK_MAX(void);

volatile int counter = 0;

int main(void) {
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	HSE_PLL_SYS_CLK_MAX();
 8000174:	f000 f84e 	bl	8000214 <HSE_PLL_SYS_CLK_MAX>
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000178:	4b0c      	ldr	r3, [pc, #48]	; (80001ac <main+0x3c>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a0b      	ldr	r2, [pc, #44]	; (80001ac <main+0x3c>)
 800017e:	f043 0310 	orr.w	r3, r3, #16
 8000182:	6193      	str	r3, [r2, #24]

	GPIOC->CRH |= GPIO_CRH_MODE13;
 8000184:	4b0a      	ldr	r3, [pc, #40]	; (80001b0 <main+0x40>)
 8000186:	685b      	ldr	r3, [r3, #4]
 8000188:	4a09      	ldr	r2, [pc, #36]	; (80001b0 <main+0x40>)
 800018a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800018e:	6053      	str	r3, [r2, #4]
	counter = 2;
 8000190:	4b08      	ldr	r3, [pc, #32]	; (80001b4 <main+0x44>)
 8000192:	2202      	movs	r2, #2
 8000194:	601a      	str	r2, [r3, #0]
	while (1) {
		GPIOC->ODR ^= GPIO_ODR_ODR13;
 8000196:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <main+0x40>)
 8000198:	68db      	ldr	r3, [r3, #12]
 800019a:	4a05      	ldr	r2, [pc, #20]	; (80001b0 <main+0x40>)
 800019c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80001a0:	60d3      	str	r3, [r2, #12]
		DelayMS(1000);
 80001a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001a6:	f000 f807 	bl	80001b8 <DelayMS>
		GPIOC->ODR ^= GPIO_ODR_ODR13;
 80001aa:	e7f4      	b.n	8000196 <main+0x26>
 80001ac:	40021000 	.word	0x40021000
 80001b0:	40011000 	.word	0x40011000
 80001b4:	2000001c 	.word	0x2000001c

080001b8 <DelayMS>:
	}
}

void DelayMS(uint32_t delay) {
 80001b8:	b480      	push	{r7}
 80001ba:	b085      	sub	sp, #20
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	SysTick->LOAD = 72000 - 1; //(8000000 / 1000) - 1;
 80001c0:	4b12      	ldr	r3, [pc, #72]	; (800020c <DelayMS+0x54>)
 80001c2:	4a13      	ldr	r2, [pc, #76]	; (8000210 <DelayMS+0x58>)
 80001c4:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; //set the current value of the systick;
 80001c6:	4b11      	ldr	r3, [pc, #68]	; (800020c <DelayMS+0x54>)
 80001c8:	2200      	movs	r2, #0
 80001ca:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk; //set processor clock source and enable systick
 80001cc:	4b0f      	ldr	r3, [pc, #60]	; (800020c <DelayMS+0x54>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a0e      	ldr	r2, [pc, #56]	; (800020c <DelayMS+0x54>)
 80001d2:	f043 0305 	orr.w	r3, r3, #5
 80001d6:	6013      	str	r3, [r2, #0]

	for (uint32_t i = 0; i < delay; i++) {
 80001d8:	2300      	movs	r3, #0
 80001da:	60fb      	str	r3, [r7, #12]
 80001dc:	e009      	b.n	80001f2 <DelayMS+0x3a>
		while (((SysTick->CTRL) & SysTick_CTRL_COUNTFLAG_Msk) == 0)
 80001de:	bf00      	nop
 80001e0:	4b0a      	ldr	r3, [pc, #40]	; (800020c <DelayMS+0x54>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d0f9      	beq.n	80001e0 <DelayMS+0x28>
	for (uint32_t i = 0; i < delay; i++) {
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	3301      	adds	r3, #1
 80001f0:	60fb      	str	r3, [r7, #12]
 80001f2:	68fa      	ldr	r2, [r7, #12]
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	429a      	cmp	r2, r3
 80001f8:	d3f1      	bcc.n	80001de <DelayMS+0x26>
			;
	}
	SysTick->CTRL = 0;
 80001fa:	4b04      	ldr	r3, [pc, #16]	; (800020c <DelayMS+0x54>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	601a      	str	r2, [r3, #0]
}
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e010 	.word	0xe000e010
 8000210:	0001193f 	.word	0x0001193f

08000214 <HSE_PLL_SYS_CLK_MAX>:

void HSE_PLL_SYS_CLK_MAX(void) {
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON;
 8000218:	4b21      	ldr	r3, [pc, #132]	; (80002a0 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a20      	ldr	r2, [pc, #128]	; (80002a0 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 800021e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000222:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8000224:	bf00      	nop
 8000226:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800022e:	2b00      	cmp	r3, #0
 8000230:	d0f9      	beq.n	8000226 <HSE_PLL_SYS_CLK_MAX+0x12>
		;

	FLASH->ACR |=FLASH_ACR_LATENCY_2 |FLASH_ACR_PRFTBE;
 8000232:	4b1c      	ldr	r3, [pc, #112]	; (80002a4 <HSE_PLL_SYS_CLK_MAX+0x90>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4a1b      	ldr	r2, [pc, #108]	; (80002a4 <HSE_PLL_SYS_CLK_MAX+0x90>)
 8000238:	f043 0314 	orr.w	r3, r3, #20
 800023c:	6013      	str	r3, [r2, #0]


	RCC->CFGR |= RCC_CFGR_PLLSRC;
 800023e:	4b18      	ldr	r3, [pc, #96]	; (80002a0 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000240:	685b      	ldr	r3, [r3, #4]
 8000242:	4a17      	ldr	r2, [pc, #92]	; (80002a0 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000248:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLMULL9;
 800024a:	4b15      	ldr	r3, [pc, #84]	; (80002a0 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 800024c:	685b      	ldr	r3, [r3, #4]
 800024e:	4a14      	ldr	r2, [pc, #80]	; (80002a0 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000250:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000254:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000256:	4b12      	ldr	r3, [pc, #72]	; (80002a0 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000258:	685b      	ldr	r3, [r3, #4]
 800025a:	4a11      	ldr	r2, [pc, #68]	; (80002a0 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 800025c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000260:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_ADCPRE_DIV6;
 8000262:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000264:	685b      	ldr	r3, [r3, #4]
 8000266:	4a0e      	ldr	r2, [pc, #56]	; (80002a0 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800026c:	6053      	str	r3, [r2, #4]

	RCC->CR |= RCC_CR_PLLON;
 800026e:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a0b      	ldr	r2, [pc, #44]	; (80002a0 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000274:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000278:	6013      	str	r3, [r2, #0]

	//RCC->CFGR &= ~RCC_CFGR_SW;
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800027a:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 800027c:	685b      	ldr	r3, [r3, #4]
 800027e:	4a08      	ldr	r2, [pc, #32]	; (80002a0 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000280:	f043 0302 	orr.w	r3, r3, #2
 8000284:	6053      	str	r3, [r2, #4]

	while ((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000286:	bf00      	nop
 8000288:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000290:	2b00      	cmp	r3, #0
 8000292:	d0f9      	beq.n	8000288 <HSE_PLL_SYS_CLK_MAX+0x74>
		;
}
 8000294:	bf00      	nop
 8000296:	bf00      	nop
 8000298:	46bd      	mov	sp, r7
 800029a:	bc80      	pop	{r7}
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	40021000 	.word	0x40021000
 80002a4:	40022000 	.word	0x40022000

080002a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a8:	480d      	ldr	r0, [pc, #52]	; (80002e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b0:	480c      	ldr	r0, [pc, #48]	; (80002e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b2:	490d      	ldr	r1, [pc, #52]	; (80002e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b4:	4a0d      	ldr	r2, [pc, #52]	; (80002ec <LoopForever+0xe>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b8:	e002      	b.n	80002c0 <LoopCopyDataInit>

080002ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002be:	3304      	adds	r3, #4

080002c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c4:	d3f9      	bcc.n	80002ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c6:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c8:	4c0a      	ldr	r4, [pc, #40]	; (80002f4 <LoopForever+0x16>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002cc:	e001      	b.n	80002d2 <LoopFillZerobss>

080002ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d0:	3204      	adds	r2, #4

080002d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d4:	d3fb      	bcc.n	80002ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d6:	f000 f811 	bl	80002fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002da:	f7ff ff49 	bl	8000170 <main>

080002de <LoopForever>:

LoopForever:
  b LoopForever
 80002de:	e7fe      	b.n	80002de <LoopForever>
  ldr   r0, =_estack
 80002e0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002ec:	08000364 	.word	0x08000364
  ldr r2, =_sbss
 80002f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f4:	20000020 	.word	0x20000020

080002f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f8:	e7fe      	b.n	80002f8 <ADC1_2_IRQHandler>
	...

080002fc <__libc_init_array>:
 80002fc:	b570      	push	{r4, r5, r6, lr}
 80002fe:	2600      	movs	r6, #0
 8000300:	4d0c      	ldr	r5, [pc, #48]	; (8000334 <__libc_init_array+0x38>)
 8000302:	4c0d      	ldr	r4, [pc, #52]	; (8000338 <__libc_init_array+0x3c>)
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	10a4      	asrs	r4, r4, #2
 8000308:	42a6      	cmp	r6, r4
 800030a:	d109      	bne.n	8000320 <__libc_init_array+0x24>
 800030c:	f000 f81a 	bl	8000344 <_init>
 8000310:	2600      	movs	r6, #0
 8000312:	4d0a      	ldr	r5, [pc, #40]	; (800033c <__libc_init_array+0x40>)
 8000314:	4c0a      	ldr	r4, [pc, #40]	; (8000340 <__libc_init_array+0x44>)
 8000316:	1b64      	subs	r4, r4, r5
 8000318:	10a4      	asrs	r4, r4, #2
 800031a:	42a6      	cmp	r6, r4
 800031c:	d105      	bne.n	800032a <__libc_init_array+0x2e>
 800031e:	bd70      	pop	{r4, r5, r6, pc}
 8000320:	f855 3b04 	ldr.w	r3, [r5], #4
 8000324:	4798      	blx	r3
 8000326:	3601      	adds	r6, #1
 8000328:	e7ee      	b.n	8000308 <__libc_init_array+0xc>
 800032a:	f855 3b04 	ldr.w	r3, [r5], #4
 800032e:	4798      	blx	r3
 8000330:	3601      	adds	r6, #1
 8000332:	e7f2      	b.n	800031a <__libc_init_array+0x1e>
 8000334:	0800035c 	.word	0x0800035c
 8000338:	0800035c 	.word	0x0800035c
 800033c:	0800035c 	.word	0x0800035c
 8000340:	08000360 	.word	0x08000360

08000344 <_init>:
 8000344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000346:	bf00      	nop
 8000348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034a:	bc08      	pop	{r3}
 800034c:	469e      	mov	lr, r3
 800034e:	4770      	bx	lr

08000350 <_fini>:
 8000350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000352:	bf00      	nop
 8000354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000356:	bc08      	pop	{r3}
 8000358:	469e      	mov	lr, r3
 800035a:	4770      	bx	lr
