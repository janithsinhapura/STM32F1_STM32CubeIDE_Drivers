
04_UART_TX_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d8c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08000ebc  08000ebc  00010ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ef0  08000ef0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08000ef0  08000ef0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ef0  08000ef0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ef0  08000ef0  00010ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ef4  08000ef4  00010ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08000ef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08000f54  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08000f54  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f49  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000060d  00000000  00000000  00021011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000190  00000000  00000000  00021620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000010b  00000000  00000000  000217b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011f8c  00000000  00000000  000218bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002506  00000000  00000000  00033847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005a067  00000000  00000000  00035d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000acc  00000000  00000000  0008fdb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00090880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000005c 	.word	0x2000005c
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ea4 	.word	0x08000ea4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000060 	.word	0x20000060
 800016c:	08000ea4 	.word	0x08000ea4

08000170 <main>:
#include "uart.h"
#include "stdio.h"

char key ;

int main(void) {
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	//set sysclock to 72MHZ
	HSE_PLL_SYS_CLK_MAX();
 8000174:	f000 f834 	bl	80001e0 <HSE_PLL_SYS_CLK_MAX>
	//Enable PC13 LED
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000178:	4b16      	ldr	r3, [pc, #88]	; (80001d4 <main+0x64>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a15      	ldr	r2, [pc, #84]	; (80001d4 <main+0x64>)
 800017e:	f043 0310 	orr.w	r3, r3, #16
 8000182:	6193      	str	r3, [r2, #24]
	GPIOC->CRH |= GPIO_CRH_MODE13;
 8000184:	4b14      	ldr	r3, [pc, #80]	; (80001d8 <main+0x68>)
 8000186:	685b      	ldr	r3, [r3, #4]
 8000188:	4a13      	ldr	r2, [pc, #76]	; (80001d8 <main+0x68>)
 800018a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800018e:	6053      	str	r3, [r2, #4]

	UART1_Init();
 8000190:	f000 f93e 	bl	8000410 <UART1_Init>
	GPIOC->ODR |= GPIO_ODR_ODR13;
 8000194:	4b10      	ldr	r3, [pc, #64]	; (80001d8 <main+0x68>)
 8000196:	68db      	ldr	r3, [r3, #12]
 8000198:	4a0f      	ldr	r2, [pc, #60]	; (80001d8 <main+0x68>)
 800019a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800019e:	60d3      	str	r3, [r2, #12]
	printf("Press 1 for LED ON and any other character to OFF\r\n");
 80001a0:	480e      	ldr	r0, [pc, #56]	; (80001dc <main+0x6c>)
 80001a2:	f000 faf1 	bl	8000788 <puts>
	DelayMS(1000);
 80001a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001aa:	f000 f903 	bl	80003b4 <DelayMS>
	while (1) {

		switch (UART1_Read_Char()) {
 80001ae:	f000 f98b 	bl	80004c8 <UART1_Read_Char>
 80001b2:	4603      	mov	r3, r0
 80001b4:	2b31      	cmp	r3, #49	; 0x31
 80001b6:	d106      	bne.n	80001c6 <main+0x56>
		case '1':
			GPIOC->ODR &= ~GPIO_ODR_ODR13;
 80001b8:	4b07      	ldr	r3, [pc, #28]	; (80001d8 <main+0x68>)
 80001ba:	68db      	ldr	r3, [r3, #12]
 80001bc:	4a06      	ldr	r2, [pc, #24]	; (80001d8 <main+0x68>)
 80001be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80001c2:	60d3      	str	r3, [r2, #12]
			break;
 80001c4:	e005      	b.n	80001d2 <main+0x62>
		default:
			GPIOC->ODR |= GPIO_ODR_ODR13;
 80001c6:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <main+0x68>)
 80001c8:	68db      	ldr	r3, [r3, #12]
 80001ca:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <main+0x68>)
 80001cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001d0:	60d3      	str	r3, [r2, #12]
		switch (UART1_Read_Char()) {
 80001d2:	e7ec      	b.n	80001ae <main+0x3e>
 80001d4:	40021000 	.word	0x40021000
 80001d8:	40011000 	.word	0x40011000
 80001dc:	08000ebc 	.word	0x08000ebc

080001e0 <HSE_PLL_SYS_CLK_MAX>:
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSE);

}

void HSE_PLL_SYS_CLK_MAX(void)
{
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON;
 80001e4:	4b21      	ldr	r3, [pc, #132]	; (800026c <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a20      	ldr	r2, [pc, #128]	; (800026c <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80001ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001ee:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80001f0:	bf00      	nop
 80001f2:	4b1e      	ldr	r3, [pc, #120]	; (800026c <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d0f9      	beq.n	80001f2 <HSE_PLL_SYS_CLK_MAX+0x12>
		;

	FLASH->ACR |=FLASH_ACR_LATENCY_2 |FLASH_ACR_PRFTBE;
 80001fe:	4b1c      	ldr	r3, [pc, #112]	; (8000270 <HSE_PLL_SYS_CLK_MAX+0x90>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a1b      	ldr	r2, [pc, #108]	; (8000270 <HSE_PLL_SYS_CLK_MAX+0x90>)
 8000204:	f043 0314 	orr.w	r3, r3, #20
 8000208:	6013      	str	r3, [r2, #0]


	RCC->CFGR |= RCC_CFGR_PLLSRC;
 800020a:	4b18      	ldr	r3, [pc, #96]	; (800026c <HSE_PLL_SYS_CLK_MAX+0x8c>)
 800020c:	685b      	ldr	r3, [r3, #4]
 800020e:	4a17      	ldr	r2, [pc, #92]	; (800026c <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000214:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLMULL9;
 8000216:	4b15      	ldr	r3, [pc, #84]	; (800026c <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000218:	685b      	ldr	r3, [r3, #4]
 800021a:	4a14      	ldr	r2, [pc, #80]	; (800026c <HSE_PLL_SYS_CLK_MAX+0x8c>)
 800021c:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000220:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000222:	4b12      	ldr	r3, [pc, #72]	; (800026c <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000224:	685b      	ldr	r3, [r3, #4]
 8000226:	4a11      	ldr	r2, [pc, #68]	; (800026c <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000228:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800022c:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_ADCPRE_DIV6;
 800022e:	4b0f      	ldr	r3, [pc, #60]	; (800026c <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	4a0e      	ldr	r2, [pc, #56]	; (800026c <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000238:	6053      	str	r3, [r2, #4]

	RCC->CR |= RCC_CR_PLLON;
 800023a:	4b0c      	ldr	r3, [pc, #48]	; (800026c <HSE_PLL_SYS_CLK_MAX+0x8c>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a0b      	ldr	r2, [pc, #44]	; (800026c <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000240:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000244:	6013      	str	r3, [r2, #0]

	//RCC->CFGR &= ~RCC_CFGR_SW;
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000246:	4b09      	ldr	r3, [pc, #36]	; (800026c <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000248:	685b      	ldr	r3, [r3, #4]
 800024a:	4a08      	ldr	r2, [pc, #32]	; (800026c <HSE_PLL_SYS_CLK_MAX+0x8c>)
 800024c:	f043 0302 	orr.w	r3, r3, #2
 8000250:	6053      	str	r3, [r2, #4]

	while ((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000252:	bf00      	nop
 8000254:	4b05      	ldr	r3, [pc, #20]	; (800026c <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800025c:	2b00      	cmp	r3, #0
 800025e:	d0f9      	beq.n	8000254 <HSE_PLL_SYS_CLK_MAX+0x74>
		;
}
 8000260:	bf00      	nop
 8000262:	bf00      	nop
 8000264:	46bd      	mov	sp, r7
 8000266:	bc80      	pop	{r7}
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	40021000 	.word	0x40021000
 8000270:	40022000 	.word	0x40022000

08000274 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b086      	sub	sp, #24
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000280:	2300      	movs	r3, #0
 8000282:	617b      	str	r3, [r7, #20]
 8000284:	e00a      	b.n	800029c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000286:	f3af 8000 	nop.w
 800028a:	4601      	mov	r1, r0
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	1c5a      	adds	r2, r3, #1
 8000290:	60ba      	str	r2, [r7, #8]
 8000292:	b2ca      	uxtb	r2, r1
 8000294:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000296:	697b      	ldr	r3, [r7, #20]
 8000298:	3301      	adds	r3, #1
 800029a:	617b      	str	r3, [r7, #20]
 800029c:	697a      	ldr	r2, [r7, #20]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	dbf0      	blt.n	8000286 <_read+0x12>
  }

  return len;
 80002a4:	687b      	ldr	r3, [r7, #4]
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	3718      	adds	r7, #24
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}

080002ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002ae:	b580      	push	{r7, lr}
 80002b0:	b086      	sub	sp, #24
 80002b2:	af00      	add	r7, sp, #0
 80002b4:	60f8      	str	r0, [r7, #12]
 80002b6:	60b9      	str	r1, [r7, #8]
 80002b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ba:	2300      	movs	r3, #0
 80002bc:	617b      	str	r3, [r7, #20]
 80002be:	e009      	b.n	80002d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	1c5a      	adds	r2, r3, #1
 80002c4:	60ba      	str	r2, [r7, #8]
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 f90f 	bl	80004ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ce:	697b      	ldr	r3, [r7, #20]
 80002d0:	3301      	adds	r3, #1
 80002d2:	617b      	str	r3, [r7, #20]
 80002d4:	697a      	ldr	r2, [r7, #20]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	429a      	cmp	r2, r3
 80002da:	dbf1      	blt.n	80002c0 <_write+0x12>
  }
  return len;
 80002dc:	687b      	ldr	r3, [r7, #4]
}
 80002de:	4618      	mov	r0, r3
 80002e0:	3718      	adds	r7, #24
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}

080002e6 <_close>:

int _close(int file)
{
 80002e6:	b480      	push	{r7}
 80002e8:	b083      	sub	sp, #12
 80002ea:	af00      	add	r7, sp, #0
 80002ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80002ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr

080002fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800030c:	605a      	str	r2, [r3, #4]
  return 0;
 800030e:	2300      	movs	r3, #0
}
 8000310:	4618      	mov	r0, r3
 8000312:	370c      	adds	r7, #12
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr

0800031a <_isatty>:

int _isatty(int file)
{
 800031a:	b480      	push	{r7}
 800031c:	b083      	sub	sp, #12
 800031e:	af00      	add	r7, sp, #0
 8000320:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000322:	2301      	movs	r3, #1
}
 8000324:	4618      	mov	r0, r3
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr

0800032e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800032e:	b480      	push	{r7}
 8000330:	b085      	sub	sp, #20
 8000332:	af00      	add	r7, sp, #0
 8000334:	60f8      	str	r0, [r7, #12]
 8000336:	60b9      	str	r1, [r7, #8]
 8000338:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800033a:	2300      	movs	r3, #0
}
 800033c:	4618      	mov	r0, r3
 800033e:	3714      	adds	r7, #20
 8000340:	46bd      	mov	sp, r7
 8000342:	bc80      	pop	{r7}
 8000344:	4770      	bx	lr
	...

08000348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000350:	4a14      	ldr	r2, [pc, #80]	; (80003a4 <_sbrk+0x5c>)
 8000352:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <_sbrk+0x60>)
 8000354:	1ad3      	subs	r3, r2, r3
 8000356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800035c:	4b13      	ldr	r3, [pc, #76]	; (80003ac <_sbrk+0x64>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d102      	bne.n	800036a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000364:	4b11      	ldr	r3, [pc, #68]	; (80003ac <_sbrk+0x64>)
 8000366:	4a12      	ldr	r2, [pc, #72]	; (80003b0 <_sbrk+0x68>)
 8000368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800036a:	4b10      	ldr	r3, [pc, #64]	; (80003ac <_sbrk+0x64>)
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4413      	add	r3, r2
 8000372:	693a      	ldr	r2, [r7, #16]
 8000374:	429a      	cmp	r2, r3
 8000376:	d207      	bcs.n	8000388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000378:	f000 fb34 	bl	80009e4 <__errno>
 800037c:	4603      	mov	r3, r0
 800037e:	220c      	movs	r2, #12
 8000380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000382:	f04f 33ff 	mov.w	r3, #4294967295
 8000386:	e009      	b.n	800039c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000388:	4b08      	ldr	r3, [pc, #32]	; (80003ac <_sbrk+0x64>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800038e:	4b07      	ldr	r3, [pc, #28]	; (80003ac <_sbrk+0x64>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4413      	add	r3, r2
 8000396:	4a05      	ldr	r2, [pc, #20]	; (80003ac <_sbrk+0x64>)
 8000398:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800039a:	68fb      	ldr	r3, [r7, #12]
}
 800039c:	4618      	mov	r0, r3
 800039e:	3718      	adds	r7, #24
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	20005000 	.word	0x20005000
 80003a8:	00000400 	.word	0x00000400
 80003ac:	20000078 	.word	0x20000078
 80003b0:	200001c8 	.word	0x200001c8

080003b4 <DelayMS>:


#define CORE_CLOCK_FREQ 72000000

void DelayMS(uint32_t delay)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b085      	sub	sp, #20
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
	SysTick->LOAD = (CORE_CLOCK_FREQ/1000) - 1;
 80003bc:	4b12      	ldr	r3, [pc, #72]	; (8000408 <DelayMS+0x54>)
 80003be:	4a13      	ldr	r2, [pc, #76]	; (800040c <DelayMS+0x58>)
 80003c0:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; //set the current value of the systick;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <DelayMS+0x54>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk ; //set processor clock source and enable systick
 80003c8:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <DelayMS+0x54>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a0e      	ldr	r2, [pc, #56]	; (8000408 <DelayMS+0x54>)
 80003ce:	f043 0305 	orr.w	r3, r3, #5
 80003d2:	6013      	str	r3, [r2, #0]
	
	for(uint32_t i =0;i<delay;i++)
 80003d4:	2300      	movs	r3, #0
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	e009      	b.n	80003ee <DelayMS+0x3a>
	{
		while(((SysTick->CTRL)&SysTick_CTRL_COUNTFLAG_Msk) == 0);
 80003da:	bf00      	nop
 80003dc:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <DelayMS+0x54>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d0f9      	beq.n	80003dc <DelayMS+0x28>
	for(uint32_t i =0;i<delay;i++)
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	3301      	adds	r3, #1
 80003ec:	60fb      	str	r3, [r7, #12]
 80003ee:	68fa      	ldr	r2, [r7, #12]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	429a      	cmp	r2, r3
 80003f4:	d3f1      	bcc.n	80003da <DelayMS+0x26>
	}
	SysTick->CTRL = 0;
 80003f6:	4b04      	ldr	r3, [pc, #16]	; (8000408 <DelayMS+0x54>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
}
 80003fc:	bf00      	nop
 80003fe:	3714      	adds	r7, #20
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	e000e010 	.word	0xe000e010
 800040c:	0001193f 	.word	0x0001193f

08000410 <UART1_Init>:
 *      Author: Janith Sinhapura
 */
#include "stm32f1xx.h"
#include "stdio.h"

void UART1_Init(void) {
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
	//uart1 is under apb2 bus
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000414:	4b1e      	ldr	r3, [pc, #120]	; (8000490 <UART1_Init+0x80>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a1d      	ldr	r2, [pc, #116]	; (8000490 <UART1_Init+0x80>)
 800041a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800041e:	6193      	str	r3, [r2, #24]

	//uart1 TX-PA9
	//uart1	RX-PA10
	//Enable gpio pins for uart1 in apb2 bus
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000420:	4b1b      	ldr	r3, [pc, #108]	; (8000490 <UART1_Init+0x80>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a1a      	ldr	r2, [pc, #104]	; (8000490 <UART1_Init+0x80>)
 8000426:	f043 0304 	orr.w	r3, r3, #4
 800042a:	6193      	str	r3, [r2, #24]

	//enable gpio alternate funtions
	GPIOA->CRH |= GPIO_CRH_MODE9 ;
 800042c:	4b19      	ldr	r3, [pc, #100]	; (8000494 <UART1_Init+0x84>)
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	4a18      	ldr	r2, [pc, #96]	; (8000494 <UART1_Init+0x84>)
 8000432:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000436:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF9_1 | GPIO_CRH_CNF10_0;
 8000438:	4b16      	ldr	r3, [pc, #88]	; (8000494 <UART1_Init+0x84>)
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	4a15      	ldr	r2, [pc, #84]	; (8000494 <UART1_Init+0x84>)
 800043e:	f443 6390 	orr.w	r3, r3, #1152	; 0x480
 8000442:	6053      	str	r3, [r2, #4]

	//enable uart1
	USART1->CR1 |= USART_CR1_UE;
 8000444:	4b14      	ldr	r3, [pc, #80]	; (8000498 <UART1_Init+0x88>)
 8000446:	68db      	ldr	r3, [r3, #12]
 8000448:	4a13      	ldr	r2, [pc, #76]	; (8000498 <UART1_Init+0x88>)
 800044a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800044e:	60d3      	str	r3, [r2, #12]

	//8 data bits
	USART1->CR1 &= ~USART_CR1_M;
 8000450:	4b11      	ldr	r3, [pc, #68]	; (8000498 <UART1_Init+0x88>)
 8000452:	68db      	ldr	r3, [r3, #12]
 8000454:	4a10      	ldr	r2, [pc, #64]	; (8000498 <UART1_Init+0x88>)
 8000456:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800045a:	60d3      	str	r3, [r2, #12]

	//1 stop bits
	USART1->CR2 &=~USART_CR2_STOP;
 800045c:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <UART1_Init+0x88>)
 800045e:	691b      	ldr	r3, [r3, #16]
 8000460:	4a0d      	ldr	r2, [pc, #52]	; (8000498 <UART1_Init+0x88>)
 8000462:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000466:	6113      	str	r3, [r2, #16]

	//set baud rate to 115200
	//mantissa is 39 = 0x27
	//fractional part is 0.0625 ~ 0.06 = 0x06
	USART1->BRR = (0x27U << 4) | (0x6<< 0);
 8000468:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <UART1_Init+0x88>)
 800046a:	f240 2276 	movw	r2, #630	; 0x276
 800046e:	609a      	str	r2, [r3, #8]

	//enable tx
	USART1->CR1 |= USART_CR1_TE;
 8000470:	4b09      	ldr	r3, [pc, #36]	; (8000498 <UART1_Init+0x88>)
 8000472:	68db      	ldr	r3, [r3, #12]
 8000474:	4a08      	ldr	r2, [pc, #32]	; (8000498 <UART1_Init+0x88>)
 8000476:	f043 0308 	orr.w	r3, r3, #8
 800047a:	60d3      	str	r3, [r2, #12]

	//enable rx
	USART1->CR1 |= USART_CR1_RE;
 800047c:	4b06      	ldr	r3, [pc, #24]	; (8000498 <UART1_Init+0x88>)
 800047e:	68db      	ldr	r3, [r3, #12]
 8000480:	4a05      	ldr	r2, [pc, #20]	; (8000498 <UART1_Init+0x88>)
 8000482:	f043 0304 	orr.w	r3, r3, #4
 8000486:	60d3      	str	r3, [r2, #12]


}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr
 8000490:	40021000 	.word	0x40021000
 8000494:	40010800 	.word	0x40010800
 8000498:	40013800 	.word	0x40013800

0800049c <UART1_Write_Char>:

void UART1_Write_Char(char data)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	4603      	mov	r3, r0
 80004a4:	71fb      	strb	r3, [r7, #7]
	//check data is transmitted out from the data register
	while((USART1->SR & USART_SR_TXE)==0);
 80004a6:	bf00      	nop
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <UART1_Write_Char+0x28>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d0f9      	beq.n	80004a8 <UART1_Write_Char+0xc>
	USART1->DR = data;
 80004b4:	4a03      	ldr	r2, [pc, #12]	; (80004c4 <UART1_Write_Char+0x28>)
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	6053      	str	r3, [r2, #4]


}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	40013800 	.word	0x40013800

080004c8 <UART1_Read_Char>:

char UART1_Read_Char(void){
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
	while(!(USART1->SR & USART_SR_RXNE));
 80004cc:	bf00      	nop
 80004ce:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <UART1_Read_Char+0x20>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f003 0320 	and.w	r3, r3, #32
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d0f9      	beq.n	80004ce <UART1_Read_Char+0x6>
	return USART1->DR;
 80004da:	4b03      	ldr	r3, [pc, #12]	; (80004e8 <UART1_Read_Char+0x20>)
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	b2db      	uxtb	r3, r3
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr
 80004e8:	40013800 	.word	0x40013800

080004ec <__io_putchar>:

char __io_putchar(char ch){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
	UART1_Write_Char(ch);
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff ffcf 	bl	800049c <UART1_Write_Char>
	return ch;
 80004fe:	79fb      	ldrb	r3, [r7, #7]
}
 8000500:	4618      	mov	r0, r3
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000508:	480d      	ldr	r0, [pc, #52]	; (8000540 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800050a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800050c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000510:	480c      	ldr	r0, [pc, #48]	; (8000544 <LoopForever+0x6>)
  ldr r1, =_edata
 8000512:	490d      	ldr	r1, [pc, #52]	; (8000548 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000514:	4a0d      	ldr	r2, [pc, #52]	; (800054c <LoopForever+0xe>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000518:	e002      	b.n	8000520 <LoopCopyDataInit>

0800051a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800051c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800051e:	3304      	adds	r3, #4

08000520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000524:	d3f9      	bcc.n	800051a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000526:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000528:	4c0a      	ldr	r4, [pc, #40]	; (8000554 <LoopForever+0x16>)
  movs r3, #0
 800052a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800052c:	e001      	b.n	8000532 <LoopFillZerobss>

0800052e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800052e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000530:	3204      	adds	r2, #4

08000532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000534:	d3fb      	bcc.n	800052e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000536:	f000 fa5b 	bl	80009f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800053a:	f7ff fe19 	bl	8000170 <main>

0800053e <LoopForever>:

LoopForever:
  b LoopForever
 800053e:	e7fe      	b.n	800053e <LoopForever>
  ldr   r0, =_estack
 8000540:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000548:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800054c:	08000ef8 	.word	0x08000ef8
  ldr r2, =_sbss
 8000550:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000554:	200001c8 	.word	0x200001c8

08000558 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000558:	e7fe      	b.n	8000558 <ADC1_2_IRQHandler>
	...

0800055c <std>:
 800055c:	2300      	movs	r3, #0
 800055e:	b510      	push	{r4, lr}
 8000560:	4604      	mov	r4, r0
 8000562:	e9c0 3300 	strd	r3, r3, [r0]
 8000566:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800056a:	6083      	str	r3, [r0, #8]
 800056c:	8181      	strh	r1, [r0, #12]
 800056e:	6643      	str	r3, [r0, #100]	; 0x64
 8000570:	81c2      	strh	r2, [r0, #14]
 8000572:	6183      	str	r3, [r0, #24]
 8000574:	4619      	mov	r1, r3
 8000576:	2208      	movs	r2, #8
 8000578:	305c      	adds	r0, #92	; 0x5c
 800057a:	f000 f9e5 	bl	8000948 <memset>
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <std+0x58>)
 8000580:	6224      	str	r4, [r4, #32]
 8000582:	6263      	str	r3, [r4, #36]	; 0x24
 8000584:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <std+0x5c>)
 8000586:	62a3      	str	r3, [r4, #40]	; 0x28
 8000588:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <std+0x60>)
 800058a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <std+0x64>)
 800058e:	6323      	str	r3, [r4, #48]	; 0x30
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <std+0x68>)
 8000592:	429c      	cmp	r4, r3
 8000594:	d006      	beq.n	80005a4 <std+0x48>
 8000596:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800059a:	4294      	cmp	r4, r2
 800059c:	d002      	beq.n	80005a4 <std+0x48>
 800059e:	33d0      	adds	r3, #208	; 0xd0
 80005a0:	429c      	cmp	r4, r3
 80005a2:	d105      	bne.n	80005b0 <std+0x54>
 80005a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80005a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005ac:	f000 ba44 	b.w	8000a38 <__retarget_lock_init_recursive>
 80005b0:	bd10      	pop	{r4, pc}
 80005b2:	bf00      	nop
 80005b4:	08000799 	.word	0x08000799
 80005b8:	080007bb 	.word	0x080007bb
 80005bc:	080007f3 	.word	0x080007f3
 80005c0:	08000817 	.word	0x08000817
 80005c4:	2000007c 	.word	0x2000007c

080005c8 <stdio_exit_handler>:
 80005c8:	4a02      	ldr	r2, [pc, #8]	; (80005d4 <stdio_exit_handler+0xc>)
 80005ca:	4903      	ldr	r1, [pc, #12]	; (80005d8 <stdio_exit_handler+0x10>)
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <stdio_exit_handler+0x14>)
 80005ce:	f000 b869 	b.w	80006a4 <_fwalk_sglue>
 80005d2:	bf00      	nop
 80005d4:	20000000 	.word	0x20000000
 80005d8:	08000d2d 	.word	0x08000d2d
 80005dc:	2000000c 	.word	0x2000000c

080005e0 <cleanup_stdio>:
 80005e0:	6841      	ldr	r1, [r0, #4]
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <cleanup_stdio+0x34>)
 80005e4:	b510      	push	{r4, lr}
 80005e6:	4299      	cmp	r1, r3
 80005e8:	4604      	mov	r4, r0
 80005ea:	d001      	beq.n	80005f0 <cleanup_stdio+0x10>
 80005ec:	f000 fb9e 	bl	8000d2c <_fflush_r>
 80005f0:	68a1      	ldr	r1, [r4, #8]
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <cleanup_stdio+0x38>)
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d002      	beq.n	80005fe <cleanup_stdio+0x1e>
 80005f8:	4620      	mov	r0, r4
 80005fa:	f000 fb97 	bl	8000d2c <_fflush_r>
 80005fe:	68e1      	ldr	r1, [r4, #12]
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <cleanup_stdio+0x3c>)
 8000602:	4299      	cmp	r1, r3
 8000604:	d004      	beq.n	8000610 <cleanup_stdio+0x30>
 8000606:	4620      	mov	r0, r4
 8000608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800060c:	f000 bb8e 	b.w	8000d2c <_fflush_r>
 8000610:	bd10      	pop	{r4, pc}
 8000612:	bf00      	nop
 8000614:	2000007c 	.word	0x2000007c
 8000618:	200000e4 	.word	0x200000e4
 800061c:	2000014c 	.word	0x2000014c

08000620 <global_stdio_init.part.0>:
 8000620:	b510      	push	{r4, lr}
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <global_stdio_init.part.0+0x30>)
 8000624:	4c0b      	ldr	r4, [pc, #44]	; (8000654 <global_stdio_init.part.0+0x34>)
 8000626:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <global_stdio_init.part.0+0x38>)
 8000628:	4620      	mov	r0, r4
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	2104      	movs	r1, #4
 800062e:	2200      	movs	r2, #0
 8000630:	f7ff ff94 	bl	800055c <std>
 8000634:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000638:	2201      	movs	r2, #1
 800063a:	2109      	movs	r1, #9
 800063c:	f7ff ff8e 	bl	800055c <std>
 8000640:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000644:	2202      	movs	r2, #2
 8000646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800064a:	2112      	movs	r1, #18
 800064c:	f7ff bf86 	b.w	800055c <std>
 8000650:	200001b4 	.word	0x200001b4
 8000654:	2000007c 	.word	0x2000007c
 8000658:	080005c9 	.word	0x080005c9

0800065c <__sfp_lock_acquire>:
 800065c:	4801      	ldr	r0, [pc, #4]	; (8000664 <__sfp_lock_acquire+0x8>)
 800065e:	f000 b9ec 	b.w	8000a3a <__retarget_lock_acquire_recursive>
 8000662:	bf00      	nop
 8000664:	200001bd 	.word	0x200001bd

08000668 <__sfp_lock_release>:
 8000668:	4801      	ldr	r0, [pc, #4]	; (8000670 <__sfp_lock_release+0x8>)
 800066a:	f000 b9e7 	b.w	8000a3c <__retarget_lock_release_recursive>
 800066e:	bf00      	nop
 8000670:	200001bd 	.word	0x200001bd

08000674 <__sinit>:
 8000674:	b510      	push	{r4, lr}
 8000676:	4604      	mov	r4, r0
 8000678:	f7ff fff0 	bl	800065c <__sfp_lock_acquire>
 800067c:	6a23      	ldr	r3, [r4, #32]
 800067e:	b11b      	cbz	r3, 8000688 <__sinit+0x14>
 8000680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000684:	f7ff bff0 	b.w	8000668 <__sfp_lock_release>
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <__sinit+0x28>)
 800068a:	6223      	str	r3, [r4, #32]
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <__sinit+0x2c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d1f5      	bne.n	8000680 <__sinit+0xc>
 8000694:	f7ff ffc4 	bl	8000620 <global_stdio_init.part.0>
 8000698:	e7f2      	b.n	8000680 <__sinit+0xc>
 800069a:	bf00      	nop
 800069c:	080005e1 	.word	0x080005e1
 80006a0:	200001b4 	.word	0x200001b4

080006a4 <_fwalk_sglue>:
 80006a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006a8:	4607      	mov	r7, r0
 80006aa:	4688      	mov	r8, r1
 80006ac:	4614      	mov	r4, r2
 80006ae:	2600      	movs	r6, #0
 80006b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80006b4:	f1b9 0901 	subs.w	r9, r9, #1
 80006b8:	d505      	bpl.n	80006c6 <_fwalk_sglue+0x22>
 80006ba:	6824      	ldr	r4, [r4, #0]
 80006bc:	2c00      	cmp	r4, #0
 80006be:	d1f7      	bne.n	80006b0 <_fwalk_sglue+0xc>
 80006c0:	4630      	mov	r0, r6
 80006c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006c6:	89ab      	ldrh	r3, [r5, #12]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d907      	bls.n	80006dc <_fwalk_sglue+0x38>
 80006cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80006d0:	3301      	adds	r3, #1
 80006d2:	d003      	beq.n	80006dc <_fwalk_sglue+0x38>
 80006d4:	4629      	mov	r1, r5
 80006d6:	4638      	mov	r0, r7
 80006d8:	47c0      	blx	r8
 80006da:	4306      	orrs	r6, r0
 80006dc:	3568      	adds	r5, #104	; 0x68
 80006de:	e7e9      	b.n	80006b4 <_fwalk_sglue+0x10>

080006e0 <_puts_r>:
 80006e0:	6a03      	ldr	r3, [r0, #32]
 80006e2:	b570      	push	{r4, r5, r6, lr}
 80006e4:	4605      	mov	r5, r0
 80006e6:	460e      	mov	r6, r1
 80006e8:	6884      	ldr	r4, [r0, #8]
 80006ea:	b90b      	cbnz	r3, 80006f0 <_puts_r+0x10>
 80006ec:	f7ff ffc2 	bl	8000674 <__sinit>
 80006f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80006f2:	07db      	lsls	r3, r3, #31
 80006f4:	d405      	bmi.n	8000702 <_puts_r+0x22>
 80006f6:	89a3      	ldrh	r3, [r4, #12]
 80006f8:	0598      	lsls	r0, r3, #22
 80006fa:	d402      	bmi.n	8000702 <_puts_r+0x22>
 80006fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80006fe:	f000 f99c 	bl	8000a3a <__retarget_lock_acquire_recursive>
 8000702:	89a3      	ldrh	r3, [r4, #12]
 8000704:	0719      	lsls	r1, r3, #28
 8000706:	d513      	bpl.n	8000730 <_puts_r+0x50>
 8000708:	6923      	ldr	r3, [r4, #16]
 800070a:	b18b      	cbz	r3, 8000730 <_puts_r+0x50>
 800070c:	3e01      	subs	r6, #1
 800070e:	68a3      	ldr	r3, [r4, #8]
 8000710:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000714:	3b01      	subs	r3, #1
 8000716:	60a3      	str	r3, [r4, #8]
 8000718:	b9e9      	cbnz	r1, 8000756 <_puts_r+0x76>
 800071a:	2b00      	cmp	r3, #0
 800071c:	da2e      	bge.n	800077c <_puts_r+0x9c>
 800071e:	4622      	mov	r2, r4
 8000720:	210a      	movs	r1, #10
 8000722:	4628      	mov	r0, r5
 8000724:	f000 f87b 	bl	800081e <__swbuf_r>
 8000728:	3001      	adds	r0, #1
 800072a:	d007      	beq.n	800073c <_puts_r+0x5c>
 800072c:	250a      	movs	r5, #10
 800072e:	e007      	b.n	8000740 <_puts_r+0x60>
 8000730:	4621      	mov	r1, r4
 8000732:	4628      	mov	r0, r5
 8000734:	f000 f8b0 	bl	8000898 <__swsetup_r>
 8000738:	2800      	cmp	r0, #0
 800073a:	d0e7      	beq.n	800070c <_puts_r+0x2c>
 800073c:	f04f 35ff 	mov.w	r5, #4294967295
 8000740:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000742:	07da      	lsls	r2, r3, #31
 8000744:	d405      	bmi.n	8000752 <_puts_r+0x72>
 8000746:	89a3      	ldrh	r3, [r4, #12]
 8000748:	059b      	lsls	r3, r3, #22
 800074a:	d402      	bmi.n	8000752 <_puts_r+0x72>
 800074c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800074e:	f000 f975 	bl	8000a3c <__retarget_lock_release_recursive>
 8000752:	4628      	mov	r0, r5
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	2b00      	cmp	r3, #0
 8000758:	da04      	bge.n	8000764 <_puts_r+0x84>
 800075a:	69a2      	ldr	r2, [r4, #24]
 800075c:	429a      	cmp	r2, r3
 800075e:	dc06      	bgt.n	800076e <_puts_r+0x8e>
 8000760:	290a      	cmp	r1, #10
 8000762:	d004      	beq.n	800076e <_puts_r+0x8e>
 8000764:	6823      	ldr	r3, [r4, #0]
 8000766:	1c5a      	adds	r2, r3, #1
 8000768:	6022      	str	r2, [r4, #0]
 800076a:	7019      	strb	r1, [r3, #0]
 800076c:	e7cf      	b.n	800070e <_puts_r+0x2e>
 800076e:	4622      	mov	r2, r4
 8000770:	4628      	mov	r0, r5
 8000772:	f000 f854 	bl	800081e <__swbuf_r>
 8000776:	3001      	adds	r0, #1
 8000778:	d1c9      	bne.n	800070e <_puts_r+0x2e>
 800077a:	e7df      	b.n	800073c <_puts_r+0x5c>
 800077c:	250a      	movs	r5, #10
 800077e:	6823      	ldr	r3, [r4, #0]
 8000780:	1c5a      	adds	r2, r3, #1
 8000782:	6022      	str	r2, [r4, #0]
 8000784:	701d      	strb	r5, [r3, #0]
 8000786:	e7db      	b.n	8000740 <_puts_r+0x60>

08000788 <puts>:
 8000788:	4b02      	ldr	r3, [pc, #8]	; (8000794 <puts+0xc>)
 800078a:	4601      	mov	r1, r0
 800078c:	6818      	ldr	r0, [r3, #0]
 800078e:	f7ff bfa7 	b.w	80006e0 <_puts_r>
 8000792:	bf00      	nop
 8000794:	20000058 	.word	0x20000058

08000798 <__sread>:
 8000798:	b510      	push	{r4, lr}
 800079a:	460c      	mov	r4, r1
 800079c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007a0:	f000 f8fc 	bl	800099c <_read_r>
 80007a4:	2800      	cmp	r0, #0
 80007a6:	bfab      	itete	ge
 80007a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80007aa:	89a3      	ldrhlt	r3, [r4, #12]
 80007ac:	181b      	addge	r3, r3, r0
 80007ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80007b2:	bfac      	ite	ge
 80007b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80007b6:	81a3      	strhlt	r3, [r4, #12]
 80007b8:	bd10      	pop	{r4, pc}

080007ba <__swrite>:
 80007ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007be:	461f      	mov	r7, r3
 80007c0:	898b      	ldrh	r3, [r1, #12]
 80007c2:	4605      	mov	r5, r0
 80007c4:	05db      	lsls	r3, r3, #23
 80007c6:	460c      	mov	r4, r1
 80007c8:	4616      	mov	r6, r2
 80007ca:	d505      	bpl.n	80007d8 <__swrite+0x1e>
 80007cc:	2302      	movs	r3, #2
 80007ce:	2200      	movs	r2, #0
 80007d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007d4:	f000 f8d0 	bl	8000978 <_lseek_r>
 80007d8:	89a3      	ldrh	r3, [r4, #12]
 80007da:	4632      	mov	r2, r6
 80007dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007e0:	81a3      	strh	r3, [r4, #12]
 80007e2:	4628      	mov	r0, r5
 80007e4:	463b      	mov	r3, r7
 80007e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80007ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80007ee:	f000 b8e7 	b.w	80009c0 <_write_r>

080007f2 <__sseek>:
 80007f2:	b510      	push	{r4, lr}
 80007f4:	460c      	mov	r4, r1
 80007f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007fa:	f000 f8bd 	bl	8000978 <_lseek_r>
 80007fe:	1c43      	adds	r3, r0, #1
 8000800:	89a3      	ldrh	r3, [r4, #12]
 8000802:	bf15      	itete	ne
 8000804:	6560      	strne	r0, [r4, #84]	; 0x54
 8000806:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800080a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800080e:	81a3      	strheq	r3, [r4, #12]
 8000810:	bf18      	it	ne
 8000812:	81a3      	strhne	r3, [r4, #12]
 8000814:	bd10      	pop	{r4, pc}

08000816 <__sclose>:
 8000816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800081a:	f000 b89d 	b.w	8000958 <_close_r>

0800081e <__swbuf_r>:
 800081e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000820:	460e      	mov	r6, r1
 8000822:	4614      	mov	r4, r2
 8000824:	4605      	mov	r5, r0
 8000826:	b118      	cbz	r0, 8000830 <__swbuf_r+0x12>
 8000828:	6a03      	ldr	r3, [r0, #32]
 800082a:	b90b      	cbnz	r3, 8000830 <__swbuf_r+0x12>
 800082c:	f7ff ff22 	bl	8000674 <__sinit>
 8000830:	69a3      	ldr	r3, [r4, #24]
 8000832:	60a3      	str	r3, [r4, #8]
 8000834:	89a3      	ldrh	r3, [r4, #12]
 8000836:	071a      	lsls	r2, r3, #28
 8000838:	d525      	bpl.n	8000886 <__swbuf_r+0x68>
 800083a:	6923      	ldr	r3, [r4, #16]
 800083c:	b31b      	cbz	r3, 8000886 <__swbuf_r+0x68>
 800083e:	6823      	ldr	r3, [r4, #0]
 8000840:	6922      	ldr	r2, [r4, #16]
 8000842:	b2f6      	uxtb	r6, r6
 8000844:	1a98      	subs	r0, r3, r2
 8000846:	6963      	ldr	r3, [r4, #20]
 8000848:	4637      	mov	r7, r6
 800084a:	4283      	cmp	r3, r0
 800084c:	dc04      	bgt.n	8000858 <__swbuf_r+0x3a>
 800084e:	4621      	mov	r1, r4
 8000850:	4628      	mov	r0, r5
 8000852:	f000 fa6b 	bl	8000d2c <_fflush_r>
 8000856:	b9e0      	cbnz	r0, 8000892 <__swbuf_r+0x74>
 8000858:	68a3      	ldr	r3, [r4, #8]
 800085a:	3b01      	subs	r3, #1
 800085c:	60a3      	str	r3, [r4, #8]
 800085e:	6823      	ldr	r3, [r4, #0]
 8000860:	1c5a      	adds	r2, r3, #1
 8000862:	6022      	str	r2, [r4, #0]
 8000864:	701e      	strb	r6, [r3, #0]
 8000866:	6962      	ldr	r2, [r4, #20]
 8000868:	1c43      	adds	r3, r0, #1
 800086a:	429a      	cmp	r2, r3
 800086c:	d004      	beq.n	8000878 <__swbuf_r+0x5a>
 800086e:	89a3      	ldrh	r3, [r4, #12]
 8000870:	07db      	lsls	r3, r3, #31
 8000872:	d506      	bpl.n	8000882 <__swbuf_r+0x64>
 8000874:	2e0a      	cmp	r6, #10
 8000876:	d104      	bne.n	8000882 <__swbuf_r+0x64>
 8000878:	4621      	mov	r1, r4
 800087a:	4628      	mov	r0, r5
 800087c:	f000 fa56 	bl	8000d2c <_fflush_r>
 8000880:	b938      	cbnz	r0, 8000892 <__swbuf_r+0x74>
 8000882:	4638      	mov	r0, r7
 8000884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000886:	4621      	mov	r1, r4
 8000888:	4628      	mov	r0, r5
 800088a:	f000 f805 	bl	8000898 <__swsetup_r>
 800088e:	2800      	cmp	r0, #0
 8000890:	d0d5      	beq.n	800083e <__swbuf_r+0x20>
 8000892:	f04f 37ff 	mov.w	r7, #4294967295
 8000896:	e7f4      	b.n	8000882 <__swbuf_r+0x64>

08000898 <__swsetup_r>:
 8000898:	b538      	push	{r3, r4, r5, lr}
 800089a:	4b2a      	ldr	r3, [pc, #168]	; (8000944 <__swsetup_r+0xac>)
 800089c:	4605      	mov	r5, r0
 800089e:	6818      	ldr	r0, [r3, #0]
 80008a0:	460c      	mov	r4, r1
 80008a2:	b118      	cbz	r0, 80008ac <__swsetup_r+0x14>
 80008a4:	6a03      	ldr	r3, [r0, #32]
 80008a6:	b90b      	cbnz	r3, 80008ac <__swsetup_r+0x14>
 80008a8:	f7ff fee4 	bl	8000674 <__sinit>
 80008ac:	89a3      	ldrh	r3, [r4, #12]
 80008ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80008b2:	0718      	lsls	r0, r3, #28
 80008b4:	d422      	bmi.n	80008fc <__swsetup_r+0x64>
 80008b6:	06d9      	lsls	r1, r3, #27
 80008b8:	d407      	bmi.n	80008ca <__swsetup_r+0x32>
 80008ba:	2309      	movs	r3, #9
 80008bc:	602b      	str	r3, [r5, #0]
 80008be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80008c2:	f04f 30ff 	mov.w	r0, #4294967295
 80008c6:	81a3      	strh	r3, [r4, #12]
 80008c8:	e034      	b.n	8000934 <__swsetup_r+0x9c>
 80008ca:	0758      	lsls	r0, r3, #29
 80008cc:	d512      	bpl.n	80008f4 <__swsetup_r+0x5c>
 80008ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008d0:	b141      	cbz	r1, 80008e4 <__swsetup_r+0x4c>
 80008d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80008d6:	4299      	cmp	r1, r3
 80008d8:	d002      	beq.n	80008e0 <__swsetup_r+0x48>
 80008da:	4628      	mov	r0, r5
 80008dc:	f000 f8b0 	bl	8000a40 <_free_r>
 80008e0:	2300      	movs	r3, #0
 80008e2:	6363      	str	r3, [r4, #52]	; 0x34
 80008e4:	89a3      	ldrh	r3, [r4, #12]
 80008e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80008ea:	81a3      	strh	r3, [r4, #12]
 80008ec:	2300      	movs	r3, #0
 80008ee:	6063      	str	r3, [r4, #4]
 80008f0:	6923      	ldr	r3, [r4, #16]
 80008f2:	6023      	str	r3, [r4, #0]
 80008f4:	89a3      	ldrh	r3, [r4, #12]
 80008f6:	f043 0308 	orr.w	r3, r3, #8
 80008fa:	81a3      	strh	r3, [r4, #12]
 80008fc:	6923      	ldr	r3, [r4, #16]
 80008fe:	b94b      	cbnz	r3, 8000914 <__swsetup_r+0x7c>
 8000900:	89a3      	ldrh	r3, [r4, #12]
 8000902:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800090a:	d003      	beq.n	8000914 <__swsetup_r+0x7c>
 800090c:	4621      	mov	r1, r4
 800090e:	4628      	mov	r0, r5
 8000910:	f000 fa59 	bl	8000dc6 <__smakebuf_r>
 8000914:	89a0      	ldrh	r0, [r4, #12]
 8000916:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800091a:	f010 0301 	ands.w	r3, r0, #1
 800091e:	d00a      	beq.n	8000936 <__swsetup_r+0x9e>
 8000920:	2300      	movs	r3, #0
 8000922:	60a3      	str	r3, [r4, #8]
 8000924:	6963      	ldr	r3, [r4, #20]
 8000926:	425b      	negs	r3, r3
 8000928:	61a3      	str	r3, [r4, #24]
 800092a:	6923      	ldr	r3, [r4, #16]
 800092c:	b943      	cbnz	r3, 8000940 <__swsetup_r+0xa8>
 800092e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000932:	d1c4      	bne.n	80008be <__swsetup_r+0x26>
 8000934:	bd38      	pop	{r3, r4, r5, pc}
 8000936:	0781      	lsls	r1, r0, #30
 8000938:	bf58      	it	pl
 800093a:	6963      	ldrpl	r3, [r4, #20]
 800093c:	60a3      	str	r3, [r4, #8]
 800093e:	e7f4      	b.n	800092a <__swsetup_r+0x92>
 8000940:	2000      	movs	r0, #0
 8000942:	e7f7      	b.n	8000934 <__swsetup_r+0x9c>
 8000944:	20000058 	.word	0x20000058

08000948 <memset>:
 8000948:	4603      	mov	r3, r0
 800094a:	4402      	add	r2, r0
 800094c:	4293      	cmp	r3, r2
 800094e:	d100      	bne.n	8000952 <memset+0xa>
 8000950:	4770      	bx	lr
 8000952:	f803 1b01 	strb.w	r1, [r3], #1
 8000956:	e7f9      	b.n	800094c <memset+0x4>

08000958 <_close_r>:
 8000958:	b538      	push	{r3, r4, r5, lr}
 800095a:	2300      	movs	r3, #0
 800095c:	4d05      	ldr	r5, [pc, #20]	; (8000974 <_close_r+0x1c>)
 800095e:	4604      	mov	r4, r0
 8000960:	4608      	mov	r0, r1
 8000962:	602b      	str	r3, [r5, #0]
 8000964:	f7ff fcbf 	bl	80002e6 <_close>
 8000968:	1c43      	adds	r3, r0, #1
 800096a:	d102      	bne.n	8000972 <_close_r+0x1a>
 800096c:	682b      	ldr	r3, [r5, #0]
 800096e:	b103      	cbz	r3, 8000972 <_close_r+0x1a>
 8000970:	6023      	str	r3, [r4, #0]
 8000972:	bd38      	pop	{r3, r4, r5, pc}
 8000974:	200001b8 	.word	0x200001b8

08000978 <_lseek_r>:
 8000978:	b538      	push	{r3, r4, r5, lr}
 800097a:	4604      	mov	r4, r0
 800097c:	4608      	mov	r0, r1
 800097e:	4611      	mov	r1, r2
 8000980:	2200      	movs	r2, #0
 8000982:	4d05      	ldr	r5, [pc, #20]	; (8000998 <_lseek_r+0x20>)
 8000984:	602a      	str	r2, [r5, #0]
 8000986:	461a      	mov	r2, r3
 8000988:	f7ff fcd1 	bl	800032e <_lseek>
 800098c:	1c43      	adds	r3, r0, #1
 800098e:	d102      	bne.n	8000996 <_lseek_r+0x1e>
 8000990:	682b      	ldr	r3, [r5, #0]
 8000992:	b103      	cbz	r3, 8000996 <_lseek_r+0x1e>
 8000994:	6023      	str	r3, [r4, #0]
 8000996:	bd38      	pop	{r3, r4, r5, pc}
 8000998:	200001b8 	.word	0x200001b8

0800099c <_read_r>:
 800099c:	b538      	push	{r3, r4, r5, lr}
 800099e:	4604      	mov	r4, r0
 80009a0:	4608      	mov	r0, r1
 80009a2:	4611      	mov	r1, r2
 80009a4:	2200      	movs	r2, #0
 80009a6:	4d05      	ldr	r5, [pc, #20]	; (80009bc <_read_r+0x20>)
 80009a8:	602a      	str	r2, [r5, #0]
 80009aa:	461a      	mov	r2, r3
 80009ac:	f7ff fc62 	bl	8000274 <_read>
 80009b0:	1c43      	adds	r3, r0, #1
 80009b2:	d102      	bne.n	80009ba <_read_r+0x1e>
 80009b4:	682b      	ldr	r3, [r5, #0]
 80009b6:	b103      	cbz	r3, 80009ba <_read_r+0x1e>
 80009b8:	6023      	str	r3, [r4, #0]
 80009ba:	bd38      	pop	{r3, r4, r5, pc}
 80009bc:	200001b8 	.word	0x200001b8

080009c0 <_write_r>:
 80009c0:	b538      	push	{r3, r4, r5, lr}
 80009c2:	4604      	mov	r4, r0
 80009c4:	4608      	mov	r0, r1
 80009c6:	4611      	mov	r1, r2
 80009c8:	2200      	movs	r2, #0
 80009ca:	4d05      	ldr	r5, [pc, #20]	; (80009e0 <_write_r+0x20>)
 80009cc:	602a      	str	r2, [r5, #0]
 80009ce:	461a      	mov	r2, r3
 80009d0:	f7ff fc6d 	bl	80002ae <_write>
 80009d4:	1c43      	adds	r3, r0, #1
 80009d6:	d102      	bne.n	80009de <_write_r+0x1e>
 80009d8:	682b      	ldr	r3, [r5, #0]
 80009da:	b103      	cbz	r3, 80009de <_write_r+0x1e>
 80009dc:	6023      	str	r3, [r4, #0]
 80009de:	bd38      	pop	{r3, r4, r5, pc}
 80009e0:	200001b8 	.word	0x200001b8

080009e4 <__errno>:
 80009e4:	4b01      	ldr	r3, [pc, #4]	; (80009ec <__errno+0x8>)
 80009e6:	6818      	ldr	r0, [r3, #0]
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000058 	.word	0x20000058

080009f0 <__libc_init_array>:
 80009f0:	b570      	push	{r4, r5, r6, lr}
 80009f2:	2600      	movs	r6, #0
 80009f4:	4d0c      	ldr	r5, [pc, #48]	; (8000a28 <__libc_init_array+0x38>)
 80009f6:	4c0d      	ldr	r4, [pc, #52]	; (8000a2c <__libc_init_array+0x3c>)
 80009f8:	1b64      	subs	r4, r4, r5
 80009fa:	10a4      	asrs	r4, r4, #2
 80009fc:	42a6      	cmp	r6, r4
 80009fe:	d109      	bne.n	8000a14 <__libc_init_array+0x24>
 8000a00:	f000 fa50 	bl	8000ea4 <_init>
 8000a04:	2600      	movs	r6, #0
 8000a06:	4d0a      	ldr	r5, [pc, #40]	; (8000a30 <__libc_init_array+0x40>)
 8000a08:	4c0a      	ldr	r4, [pc, #40]	; (8000a34 <__libc_init_array+0x44>)
 8000a0a:	1b64      	subs	r4, r4, r5
 8000a0c:	10a4      	asrs	r4, r4, #2
 8000a0e:	42a6      	cmp	r6, r4
 8000a10:	d105      	bne.n	8000a1e <__libc_init_array+0x2e>
 8000a12:	bd70      	pop	{r4, r5, r6, pc}
 8000a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a18:	4798      	blx	r3
 8000a1a:	3601      	adds	r6, #1
 8000a1c:	e7ee      	b.n	80009fc <__libc_init_array+0xc>
 8000a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a22:	4798      	blx	r3
 8000a24:	3601      	adds	r6, #1
 8000a26:	e7f2      	b.n	8000a0e <__libc_init_array+0x1e>
 8000a28:	08000ef0 	.word	0x08000ef0
 8000a2c:	08000ef0 	.word	0x08000ef0
 8000a30:	08000ef0 	.word	0x08000ef0
 8000a34:	08000ef4 	.word	0x08000ef4

08000a38 <__retarget_lock_init_recursive>:
 8000a38:	4770      	bx	lr

08000a3a <__retarget_lock_acquire_recursive>:
 8000a3a:	4770      	bx	lr

08000a3c <__retarget_lock_release_recursive>:
 8000a3c:	4770      	bx	lr
	...

08000a40 <_free_r>:
 8000a40:	b538      	push	{r3, r4, r5, lr}
 8000a42:	4605      	mov	r5, r0
 8000a44:	2900      	cmp	r1, #0
 8000a46:	d040      	beq.n	8000aca <_free_r+0x8a>
 8000a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a4c:	1f0c      	subs	r4, r1, #4
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	bfb8      	it	lt
 8000a52:	18e4      	addlt	r4, r4, r3
 8000a54:	f000 f8dc 	bl	8000c10 <__malloc_lock>
 8000a58:	4a1c      	ldr	r2, [pc, #112]	; (8000acc <_free_r+0x8c>)
 8000a5a:	6813      	ldr	r3, [r2, #0]
 8000a5c:	b933      	cbnz	r3, 8000a6c <_free_r+0x2c>
 8000a5e:	6063      	str	r3, [r4, #4]
 8000a60:	6014      	str	r4, [r2, #0]
 8000a62:	4628      	mov	r0, r5
 8000a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a68:	f000 b8d8 	b.w	8000c1c <__malloc_unlock>
 8000a6c:	42a3      	cmp	r3, r4
 8000a6e:	d908      	bls.n	8000a82 <_free_r+0x42>
 8000a70:	6820      	ldr	r0, [r4, #0]
 8000a72:	1821      	adds	r1, r4, r0
 8000a74:	428b      	cmp	r3, r1
 8000a76:	bf01      	itttt	eq
 8000a78:	6819      	ldreq	r1, [r3, #0]
 8000a7a:	685b      	ldreq	r3, [r3, #4]
 8000a7c:	1809      	addeq	r1, r1, r0
 8000a7e:	6021      	streq	r1, [r4, #0]
 8000a80:	e7ed      	b.n	8000a5e <_free_r+0x1e>
 8000a82:	461a      	mov	r2, r3
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	b10b      	cbz	r3, 8000a8c <_free_r+0x4c>
 8000a88:	42a3      	cmp	r3, r4
 8000a8a:	d9fa      	bls.n	8000a82 <_free_r+0x42>
 8000a8c:	6811      	ldr	r1, [r2, #0]
 8000a8e:	1850      	adds	r0, r2, r1
 8000a90:	42a0      	cmp	r0, r4
 8000a92:	d10b      	bne.n	8000aac <_free_r+0x6c>
 8000a94:	6820      	ldr	r0, [r4, #0]
 8000a96:	4401      	add	r1, r0
 8000a98:	1850      	adds	r0, r2, r1
 8000a9a:	4283      	cmp	r3, r0
 8000a9c:	6011      	str	r1, [r2, #0]
 8000a9e:	d1e0      	bne.n	8000a62 <_free_r+0x22>
 8000aa0:	6818      	ldr	r0, [r3, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	4408      	add	r0, r1
 8000aa6:	6010      	str	r0, [r2, #0]
 8000aa8:	6053      	str	r3, [r2, #4]
 8000aaa:	e7da      	b.n	8000a62 <_free_r+0x22>
 8000aac:	d902      	bls.n	8000ab4 <_free_r+0x74>
 8000aae:	230c      	movs	r3, #12
 8000ab0:	602b      	str	r3, [r5, #0]
 8000ab2:	e7d6      	b.n	8000a62 <_free_r+0x22>
 8000ab4:	6820      	ldr	r0, [r4, #0]
 8000ab6:	1821      	adds	r1, r4, r0
 8000ab8:	428b      	cmp	r3, r1
 8000aba:	bf01      	itttt	eq
 8000abc:	6819      	ldreq	r1, [r3, #0]
 8000abe:	685b      	ldreq	r3, [r3, #4]
 8000ac0:	1809      	addeq	r1, r1, r0
 8000ac2:	6021      	streq	r1, [r4, #0]
 8000ac4:	6063      	str	r3, [r4, #4]
 8000ac6:	6054      	str	r4, [r2, #4]
 8000ac8:	e7cb      	b.n	8000a62 <_free_r+0x22>
 8000aca:	bd38      	pop	{r3, r4, r5, pc}
 8000acc:	200001c0 	.word	0x200001c0

08000ad0 <sbrk_aligned>:
 8000ad0:	b570      	push	{r4, r5, r6, lr}
 8000ad2:	4e0e      	ldr	r6, [pc, #56]	; (8000b0c <sbrk_aligned+0x3c>)
 8000ad4:	460c      	mov	r4, r1
 8000ad6:	6831      	ldr	r1, [r6, #0]
 8000ad8:	4605      	mov	r5, r0
 8000ada:	b911      	cbnz	r1, 8000ae2 <sbrk_aligned+0x12>
 8000adc:	f000 f9d2 	bl	8000e84 <_sbrk_r>
 8000ae0:	6030      	str	r0, [r6, #0]
 8000ae2:	4621      	mov	r1, r4
 8000ae4:	4628      	mov	r0, r5
 8000ae6:	f000 f9cd 	bl	8000e84 <_sbrk_r>
 8000aea:	1c43      	adds	r3, r0, #1
 8000aec:	d00a      	beq.n	8000b04 <sbrk_aligned+0x34>
 8000aee:	1cc4      	adds	r4, r0, #3
 8000af0:	f024 0403 	bic.w	r4, r4, #3
 8000af4:	42a0      	cmp	r0, r4
 8000af6:	d007      	beq.n	8000b08 <sbrk_aligned+0x38>
 8000af8:	1a21      	subs	r1, r4, r0
 8000afa:	4628      	mov	r0, r5
 8000afc:	f000 f9c2 	bl	8000e84 <_sbrk_r>
 8000b00:	3001      	adds	r0, #1
 8000b02:	d101      	bne.n	8000b08 <sbrk_aligned+0x38>
 8000b04:	f04f 34ff 	mov.w	r4, #4294967295
 8000b08:	4620      	mov	r0, r4
 8000b0a:	bd70      	pop	{r4, r5, r6, pc}
 8000b0c:	200001c4 	.word	0x200001c4

08000b10 <_malloc_r>:
 8000b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b14:	1ccd      	adds	r5, r1, #3
 8000b16:	f025 0503 	bic.w	r5, r5, #3
 8000b1a:	3508      	adds	r5, #8
 8000b1c:	2d0c      	cmp	r5, #12
 8000b1e:	bf38      	it	cc
 8000b20:	250c      	movcc	r5, #12
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	4607      	mov	r7, r0
 8000b26:	db01      	blt.n	8000b2c <_malloc_r+0x1c>
 8000b28:	42a9      	cmp	r1, r5
 8000b2a:	d905      	bls.n	8000b38 <_malloc_r+0x28>
 8000b2c:	230c      	movs	r3, #12
 8000b2e:	2600      	movs	r6, #0
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	4630      	mov	r0, r6
 8000b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000c0c <_malloc_r+0xfc>
 8000b3c:	f000 f868 	bl	8000c10 <__malloc_lock>
 8000b40:	f8d8 3000 	ldr.w	r3, [r8]
 8000b44:	461c      	mov	r4, r3
 8000b46:	bb5c      	cbnz	r4, 8000ba0 <_malloc_r+0x90>
 8000b48:	4629      	mov	r1, r5
 8000b4a:	4638      	mov	r0, r7
 8000b4c:	f7ff ffc0 	bl	8000ad0 <sbrk_aligned>
 8000b50:	1c43      	adds	r3, r0, #1
 8000b52:	4604      	mov	r4, r0
 8000b54:	d155      	bne.n	8000c02 <_malloc_r+0xf2>
 8000b56:	f8d8 4000 	ldr.w	r4, [r8]
 8000b5a:	4626      	mov	r6, r4
 8000b5c:	2e00      	cmp	r6, #0
 8000b5e:	d145      	bne.n	8000bec <_malloc_r+0xdc>
 8000b60:	2c00      	cmp	r4, #0
 8000b62:	d048      	beq.n	8000bf6 <_malloc_r+0xe6>
 8000b64:	6823      	ldr	r3, [r4, #0]
 8000b66:	4631      	mov	r1, r6
 8000b68:	4638      	mov	r0, r7
 8000b6a:	eb04 0903 	add.w	r9, r4, r3
 8000b6e:	f000 f989 	bl	8000e84 <_sbrk_r>
 8000b72:	4581      	cmp	r9, r0
 8000b74:	d13f      	bne.n	8000bf6 <_malloc_r+0xe6>
 8000b76:	6821      	ldr	r1, [r4, #0]
 8000b78:	4638      	mov	r0, r7
 8000b7a:	1a6d      	subs	r5, r5, r1
 8000b7c:	4629      	mov	r1, r5
 8000b7e:	f7ff ffa7 	bl	8000ad0 <sbrk_aligned>
 8000b82:	3001      	adds	r0, #1
 8000b84:	d037      	beq.n	8000bf6 <_malloc_r+0xe6>
 8000b86:	6823      	ldr	r3, [r4, #0]
 8000b88:	442b      	add	r3, r5
 8000b8a:	6023      	str	r3, [r4, #0]
 8000b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d038      	beq.n	8000c06 <_malloc_r+0xf6>
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	42a2      	cmp	r2, r4
 8000b98:	d12b      	bne.n	8000bf2 <_malloc_r+0xe2>
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	e00f      	b.n	8000bc0 <_malloc_r+0xb0>
 8000ba0:	6822      	ldr	r2, [r4, #0]
 8000ba2:	1b52      	subs	r2, r2, r5
 8000ba4:	d41f      	bmi.n	8000be6 <_malloc_r+0xd6>
 8000ba6:	2a0b      	cmp	r2, #11
 8000ba8:	d917      	bls.n	8000bda <_malloc_r+0xca>
 8000baa:	1961      	adds	r1, r4, r5
 8000bac:	42a3      	cmp	r3, r4
 8000bae:	6025      	str	r5, [r4, #0]
 8000bb0:	bf18      	it	ne
 8000bb2:	6059      	strne	r1, [r3, #4]
 8000bb4:	6863      	ldr	r3, [r4, #4]
 8000bb6:	bf08      	it	eq
 8000bb8:	f8c8 1000 	streq.w	r1, [r8]
 8000bbc:	5162      	str	r2, [r4, r5]
 8000bbe:	604b      	str	r3, [r1, #4]
 8000bc0:	4638      	mov	r0, r7
 8000bc2:	f104 060b 	add.w	r6, r4, #11
 8000bc6:	f000 f829 	bl	8000c1c <__malloc_unlock>
 8000bca:	f026 0607 	bic.w	r6, r6, #7
 8000bce:	1d23      	adds	r3, r4, #4
 8000bd0:	1af2      	subs	r2, r6, r3
 8000bd2:	d0ae      	beq.n	8000b32 <_malloc_r+0x22>
 8000bd4:	1b9b      	subs	r3, r3, r6
 8000bd6:	50a3      	str	r3, [r4, r2]
 8000bd8:	e7ab      	b.n	8000b32 <_malloc_r+0x22>
 8000bda:	42a3      	cmp	r3, r4
 8000bdc:	6862      	ldr	r2, [r4, #4]
 8000bde:	d1dd      	bne.n	8000b9c <_malloc_r+0x8c>
 8000be0:	f8c8 2000 	str.w	r2, [r8]
 8000be4:	e7ec      	b.n	8000bc0 <_malloc_r+0xb0>
 8000be6:	4623      	mov	r3, r4
 8000be8:	6864      	ldr	r4, [r4, #4]
 8000bea:	e7ac      	b.n	8000b46 <_malloc_r+0x36>
 8000bec:	4634      	mov	r4, r6
 8000bee:	6876      	ldr	r6, [r6, #4]
 8000bf0:	e7b4      	b.n	8000b5c <_malloc_r+0x4c>
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	e7cc      	b.n	8000b90 <_malloc_r+0x80>
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	4638      	mov	r0, r7
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	f000 f80e 	bl	8000c1c <__malloc_unlock>
 8000c00:	e797      	b.n	8000b32 <_malloc_r+0x22>
 8000c02:	6025      	str	r5, [r4, #0]
 8000c04:	e7dc      	b.n	8000bc0 <_malloc_r+0xb0>
 8000c06:	605b      	str	r3, [r3, #4]
 8000c08:	deff      	udf	#255	; 0xff
 8000c0a:	bf00      	nop
 8000c0c:	200001c0 	.word	0x200001c0

08000c10 <__malloc_lock>:
 8000c10:	4801      	ldr	r0, [pc, #4]	; (8000c18 <__malloc_lock+0x8>)
 8000c12:	f7ff bf12 	b.w	8000a3a <__retarget_lock_acquire_recursive>
 8000c16:	bf00      	nop
 8000c18:	200001bc 	.word	0x200001bc

08000c1c <__malloc_unlock>:
 8000c1c:	4801      	ldr	r0, [pc, #4]	; (8000c24 <__malloc_unlock+0x8>)
 8000c1e:	f7ff bf0d 	b.w	8000a3c <__retarget_lock_release_recursive>
 8000c22:	bf00      	nop
 8000c24:	200001bc 	.word	0x200001bc

08000c28 <__sflush_r>:
 8000c28:	898a      	ldrh	r2, [r1, #12]
 8000c2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c2c:	4605      	mov	r5, r0
 8000c2e:	0710      	lsls	r0, r2, #28
 8000c30:	460c      	mov	r4, r1
 8000c32:	d457      	bmi.n	8000ce4 <__sflush_r+0xbc>
 8000c34:	684b      	ldr	r3, [r1, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	dc04      	bgt.n	8000c44 <__sflush_r+0x1c>
 8000c3a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	dc01      	bgt.n	8000c44 <__sflush_r+0x1c>
 8000c40:	2000      	movs	r0, #0
 8000c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d0fa      	beq.n	8000c40 <__sflush_r+0x18>
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000c50:	682f      	ldr	r7, [r5, #0]
 8000c52:	6a21      	ldr	r1, [r4, #32]
 8000c54:	602b      	str	r3, [r5, #0]
 8000c56:	d032      	beq.n	8000cbe <__sflush_r+0x96>
 8000c58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000c5a:	89a3      	ldrh	r3, [r4, #12]
 8000c5c:	075a      	lsls	r2, r3, #29
 8000c5e:	d505      	bpl.n	8000c6c <__sflush_r+0x44>
 8000c60:	6863      	ldr	r3, [r4, #4]
 8000c62:	1ac0      	subs	r0, r0, r3
 8000c64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c66:	b10b      	cbz	r3, 8000c6c <__sflush_r+0x44>
 8000c68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c6a:	1ac0      	subs	r0, r0, r3
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4602      	mov	r2, r0
 8000c70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c72:	4628      	mov	r0, r5
 8000c74:	6a21      	ldr	r1, [r4, #32]
 8000c76:	47b0      	blx	r6
 8000c78:	1c43      	adds	r3, r0, #1
 8000c7a:	89a3      	ldrh	r3, [r4, #12]
 8000c7c:	d106      	bne.n	8000c8c <__sflush_r+0x64>
 8000c7e:	6829      	ldr	r1, [r5, #0]
 8000c80:	291d      	cmp	r1, #29
 8000c82:	d82b      	bhi.n	8000cdc <__sflush_r+0xb4>
 8000c84:	4a28      	ldr	r2, [pc, #160]	; (8000d28 <__sflush_r+0x100>)
 8000c86:	410a      	asrs	r2, r1
 8000c88:	07d6      	lsls	r6, r2, #31
 8000c8a:	d427      	bmi.n	8000cdc <__sflush_r+0xb4>
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	6062      	str	r2, [r4, #4]
 8000c90:	6922      	ldr	r2, [r4, #16]
 8000c92:	04d9      	lsls	r1, r3, #19
 8000c94:	6022      	str	r2, [r4, #0]
 8000c96:	d504      	bpl.n	8000ca2 <__sflush_r+0x7a>
 8000c98:	1c42      	adds	r2, r0, #1
 8000c9a:	d101      	bne.n	8000ca0 <__sflush_r+0x78>
 8000c9c:	682b      	ldr	r3, [r5, #0]
 8000c9e:	b903      	cbnz	r3, 8000ca2 <__sflush_r+0x7a>
 8000ca0:	6560      	str	r0, [r4, #84]	; 0x54
 8000ca2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ca4:	602f      	str	r7, [r5, #0]
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d0ca      	beq.n	8000c40 <__sflush_r+0x18>
 8000caa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	d002      	beq.n	8000cb8 <__sflush_r+0x90>
 8000cb2:	4628      	mov	r0, r5
 8000cb4:	f7ff fec4 	bl	8000a40 <_free_r>
 8000cb8:	2000      	movs	r0, #0
 8000cba:	6360      	str	r0, [r4, #52]	; 0x34
 8000cbc:	e7c1      	b.n	8000c42 <__sflush_r+0x1a>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	4628      	mov	r0, r5
 8000cc2:	47b0      	blx	r6
 8000cc4:	1c41      	adds	r1, r0, #1
 8000cc6:	d1c8      	bne.n	8000c5a <__sflush_r+0x32>
 8000cc8:	682b      	ldr	r3, [r5, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d0c5      	beq.n	8000c5a <__sflush_r+0x32>
 8000cce:	2b1d      	cmp	r3, #29
 8000cd0:	d001      	beq.n	8000cd6 <__sflush_r+0xae>
 8000cd2:	2b16      	cmp	r3, #22
 8000cd4:	d101      	bne.n	8000cda <__sflush_r+0xb2>
 8000cd6:	602f      	str	r7, [r5, #0]
 8000cd8:	e7b2      	b.n	8000c40 <__sflush_r+0x18>
 8000cda:	89a3      	ldrh	r3, [r4, #12]
 8000cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce0:	81a3      	strh	r3, [r4, #12]
 8000ce2:	e7ae      	b.n	8000c42 <__sflush_r+0x1a>
 8000ce4:	690f      	ldr	r7, [r1, #16]
 8000ce6:	2f00      	cmp	r7, #0
 8000ce8:	d0aa      	beq.n	8000c40 <__sflush_r+0x18>
 8000cea:	0793      	lsls	r3, r2, #30
 8000cec:	bf18      	it	ne
 8000cee:	2300      	movne	r3, #0
 8000cf0:	680e      	ldr	r6, [r1, #0]
 8000cf2:	bf08      	it	eq
 8000cf4:	694b      	ldreq	r3, [r1, #20]
 8000cf6:	1bf6      	subs	r6, r6, r7
 8000cf8:	600f      	str	r7, [r1, #0]
 8000cfa:	608b      	str	r3, [r1, #8]
 8000cfc:	2e00      	cmp	r6, #0
 8000cfe:	dd9f      	ble.n	8000c40 <__sflush_r+0x18>
 8000d00:	4633      	mov	r3, r6
 8000d02:	463a      	mov	r2, r7
 8000d04:	4628      	mov	r0, r5
 8000d06:	6a21      	ldr	r1, [r4, #32]
 8000d08:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000d0c:	47e0      	blx	ip
 8000d0e:	2800      	cmp	r0, #0
 8000d10:	dc06      	bgt.n	8000d20 <__sflush_r+0xf8>
 8000d12:	89a3      	ldrh	r3, [r4, #12]
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d1c:	81a3      	strh	r3, [r4, #12]
 8000d1e:	e790      	b.n	8000c42 <__sflush_r+0x1a>
 8000d20:	4407      	add	r7, r0
 8000d22:	1a36      	subs	r6, r6, r0
 8000d24:	e7ea      	b.n	8000cfc <__sflush_r+0xd4>
 8000d26:	bf00      	nop
 8000d28:	dfbffffe 	.word	0xdfbffffe

08000d2c <_fflush_r>:
 8000d2c:	b538      	push	{r3, r4, r5, lr}
 8000d2e:	690b      	ldr	r3, [r1, #16]
 8000d30:	4605      	mov	r5, r0
 8000d32:	460c      	mov	r4, r1
 8000d34:	b913      	cbnz	r3, 8000d3c <_fflush_r+0x10>
 8000d36:	2500      	movs	r5, #0
 8000d38:	4628      	mov	r0, r5
 8000d3a:	bd38      	pop	{r3, r4, r5, pc}
 8000d3c:	b118      	cbz	r0, 8000d46 <_fflush_r+0x1a>
 8000d3e:	6a03      	ldr	r3, [r0, #32]
 8000d40:	b90b      	cbnz	r3, 8000d46 <_fflush_r+0x1a>
 8000d42:	f7ff fc97 	bl	8000674 <__sinit>
 8000d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d0f3      	beq.n	8000d36 <_fflush_r+0xa>
 8000d4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000d50:	07d0      	lsls	r0, r2, #31
 8000d52:	d404      	bmi.n	8000d5e <_fflush_r+0x32>
 8000d54:	0599      	lsls	r1, r3, #22
 8000d56:	d402      	bmi.n	8000d5e <_fflush_r+0x32>
 8000d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d5a:	f7ff fe6e 	bl	8000a3a <__retarget_lock_acquire_recursive>
 8000d5e:	4628      	mov	r0, r5
 8000d60:	4621      	mov	r1, r4
 8000d62:	f7ff ff61 	bl	8000c28 <__sflush_r>
 8000d66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000d68:	4605      	mov	r5, r0
 8000d6a:	07da      	lsls	r2, r3, #31
 8000d6c:	d4e4      	bmi.n	8000d38 <_fflush_r+0xc>
 8000d6e:	89a3      	ldrh	r3, [r4, #12]
 8000d70:	059b      	lsls	r3, r3, #22
 8000d72:	d4e1      	bmi.n	8000d38 <_fflush_r+0xc>
 8000d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d76:	f7ff fe61 	bl	8000a3c <__retarget_lock_release_recursive>
 8000d7a:	e7dd      	b.n	8000d38 <_fflush_r+0xc>

08000d7c <__swhatbuf_r>:
 8000d7c:	b570      	push	{r4, r5, r6, lr}
 8000d7e:	460c      	mov	r4, r1
 8000d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d84:	4615      	mov	r5, r2
 8000d86:	2900      	cmp	r1, #0
 8000d88:	461e      	mov	r6, r3
 8000d8a:	b096      	sub	sp, #88	; 0x58
 8000d8c:	da0c      	bge.n	8000da8 <__swhatbuf_r+0x2c>
 8000d8e:	89a3      	ldrh	r3, [r4, #12]
 8000d90:	2100      	movs	r1, #0
 8000d92:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000d96:	bf0c      	ite	eq
 8000d98:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000d9c:	2340      	movne	r3, #64	; 0x40
 8000d9e:	2000      	movs	r0, #0
 8000da0:	6031      	str	r1, [r6, #0]
 8000da2:	602b      	str	r3, [r5, #0]
 8000da4:	b016      	add	sp, #88	; 0x58
 8000da6:	bd70      	pop	{r4, r5, r6, pc}
 8000da8:	466a      	mov	r2, sp
 8000daa:	f000 f849 	bl	8000e40 <_fstat_r>
 8000dae:	2800      	cmp	r0, #0
 8000db0:	dbed      	blt.n	8000d8e <__swhatbuf_r+0x12>
 8000db2:	9901      	ldr	r1, [sp, #4]
 8000db4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000db8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000dbc:	4259      	negs	r1, r3
 8000dbe:	4159      	adcs	r1, r3
 8000dc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dc4:	e7eb      	b.n	8000d9e <__swhatbuf_r+0x22>

08000dc6 <__smakebuf_r>:
 8000dc6:	898b      	ldrh	r3, [r1, #12]
 8000dc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000dca:	079d      	lsls	r5, r3, #30
 8000dcc:	4606      	mov	r6, r0
 8000dce:	460c      	mov	r4, r1
 8000dd0:	d507      	bpl.n	8000de2 <__smakebuf_r+0x1c>
 8000dd2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000dd6:	6023      	str	r3, [r4, #0]
 8000dd8:	6123      	str	r3, [r4, #16]
 8000dda:	2301      	movs	r3, #1
 8000ddc:	6163      	str	r3, [r4, #20]
 8000dde:	b002      	add	sp, #8
 8000de0:	bd70      	pop	{r4, r5, r6, pc}
 8000de2:	466a      	mov	r2, sp
 8000de4:	ab01      	add	r3, sp, #4
 8000de6:	f7ff ffc9 	bl	8000d7c <__swhatbuf_r>
 8000dea:	9900      	ldr	r1, [sp, #0]
 8000dec:	4605      	mov	r5, r0
 8000dee:	4630      	mov	r0, r6
 8000df0:	f7ff fe8e 	bl	8000b10 <_malloc_r>
 8000df4:	b948      	cbnz	r0, 8000e0a <__smakebuf_r+0x44>
 8000df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000dfa:	059a      	lsls	r2, r3, #22
 8000dfc:	d4ef      	bmi.n	8000dde <__smakebuf_r+0x18>
 8000dfe:	f023 0303 	bic.w	r3, r3, #3
 8000e02:	f043 0302 	orr.w	r3, r3, #2
 8000e06:	81a3      	strh	r3, [r4, #12]
 8000e08:	e7e3      	b.n	8000dd2 <__smakebuf_r+0xc>
 8000e0a:	89a3      	ldrh	r3, [r4, #12]
 8000e0c:	6020      	str	r0, [r4, #0]
 8000e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e12:	81a3      	strh	r3, [r4, #12]
 8000e14:	9b00      	ldr	r3, [sp, #0]
 8000e16:	6120      	str	r0, [r4, #16]
 8000e18:	6163      	str	r3, [r4, #20]
 8000e1a:	9b01      	ldr	r3, [sp, #4]
 8000e1c:	b15b      	cbz	r3, 8000e36 <__smakebuf_r+0x70>
 8000e1e:	4630      	mov	r0, r6
 8000e20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e24:	f000 f81e 	bl	8000e64 <_isatty_r>
 8000e28:	b128      	cbz	r0, 8000e36 <__smakebuf_r+0x70>
 8000e2a:	89a3      	ldrh	r3, [r4, #12]
 8000e2c:	f023 0303 	bic.w	r3, r3, #3
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	81a3      	strh	r3, [r4, #12]
 8000e36:	89a3      	ldrh	r3, [r4, #12]
 8000e38:	431d      	orrs	r5, r3
 8000e3a:	81a5      	strh	r5, [r4, #12]
 8000e3c:	e7cf      	b.n	8000dde <__smakebuf_r+0x18>
	...

08000e40 <_fstat_r>:
 8000e40:	b538      	push	{r3, r4, r5, lr}
 8000e42:	2300      	movs	r3, #0
 8000e44:	4d06      	ldr	r5, [pc, #24]	; (8000e60 <_fstat_r+0x20>)
 8000e46:	4604      	mov	r4, r0
 8000e48:	4608      	mov	r0, r1
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	602b      	str	r3, [r5, #0]
 8000e4e:	f7ff fa55 	bl	80002fc <_fstat>
 8000e52:	1c43      	adds	r3, r0, #1
 8000e54:	d102      	bne.n	8000e5c <_fstat_r+0x1c>
 8000e56:	682b      	ldr	r3, [r5, #0]
 8000e58:	b103      	cbz	r3, 8000e5c <_fstat_r+0x1c>
 8000e5a:	6023      	str	r3, [r4, #0]
 8000e5c:	bd38      	pop	{r3, r4, r5, pc}
 8000e5e:	bf00      	nop
 8000e60:	200001b8 	.word	0x200001b8

08000e64 <_isatty_r>:
 8000e64:	b538      	push	{r3, r4, r5, lr}
 8000e66:	2300      	movs	r3, #0
 8000e68:	4d05      	ldr	r5, [pc, #20]	; (8000e80 <_isatty_r+0x1c>)
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	4608      	mov	r0, r1
 8000e6e:	602b      	str	r3, [r5, #0]
 8000e70:	f7ff fa53 	bl	800031a <_isatty>
 8000e74:	1c43      	adds	r3, r0, #1
 8000e76:	d102      	bne.n	8000e7e <_isatty_r+0x1a>
 8000e78:	682b      	ldr	r3, [r5, #0]
 8000e7a:	b103      	cbz	r3, 8000e7e <_isatty_r+0x1a>
 8000e7c:	6023      	str	r3, [r4, #0]
 8000e7e:	bd38      	pop	{r3, r4, r5, pc}
 8000e80:	200001b8 	.word	0x200001b8

08000e84 <_sbrk_r>:
 8000e84:	b538      	push	{r3, r4, r5, lr}
 8000e86:	2300      	movs	r3, #0
 8000e88:	4d05      	ldr	r5, [pc, #20]	; (8000ea0 <_sbrk_r+0x1c>)
 8000e8a:	4604      	mov	r4, r0
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	602b      	str	r3, [r5, #0]
 8000e90:	f7ff fa5a 	bl	8000348 <_sbrk>
 8000e94:	1c43      	adds	r3, r0, #1
 8000e96:	d102      	bne.n	8000e9e <_sbrk_r+0x1a>
 8000e98:	682b      	ldr	r3, [r5, #0]
 8000e9a:	b103      	cbz	r3, 8000e9e <_sbrk_r+0x1a>
 8000e9c:	6023      	str	r3, [r4, #0]
 8000e9e:	bd38      	pop	{r3, r4, r5, pc}
 8000ea0:	200001b8 	.word	0x200001b8

08000ea4 <_init>:
 8000ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ea6:	bf00      	nop
 8000ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eaa:	bc08      	pop	{r3}
 8000eac:	469e      	mov	lr, r3
 8000eae:	4770      	bx	lr

08000eb0 <_fini>:
 8000eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb2:	bf00      	nop
 8000eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eb6:	bc08      	pop	{r3}
 8000eb8:	469e      	mov	lr, r3
 8000eba:	4770      	bx	lr
