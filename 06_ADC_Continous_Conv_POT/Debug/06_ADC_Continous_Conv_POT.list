
06_ADC_Continous_Conv_POT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001408  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001538  08001538  00011538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800158c  0800158c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800158c  0800158c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800158c  0800158c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800158c  0800158c  0001158c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001590  08001590  00011590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  080015f0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080015f0  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001285  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000743  00000000  00000000  0002134d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001c8  00000000  00000000  00021a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000130  00000000  00000000  00021c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001205c  00000000  00000000  00021d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002a48  00000000  00000000  00033de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005a16c  00000000  00000000  0003682c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000cf8  00000000  00000000  00090998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00091690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000005c 	.word	0x2000005c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001520 	.word	0x08001520

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000060 	.word	0x20000060
 800016c:	08001520 	.word	0x08001520

08000170 <ADC1_Continous_Conv_Init>:
	while (!(ADC1->SR & ADC_SR_EOC))
		;
	return ADC1->DR;
}

void ADC1_Continous_Conv_Init(void) {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//PA1 ADC12_IN1
	//set clock access to gpioa
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000174:	4b19      	ldr	r3, [pc, #100]	; (80001dc <ADC1_Continous_Conv_Init+0x6c>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a18      	ldr	r2, [pc, #96]	; (80001dc <ADC1_Continous_Conv_Init+0x6c>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	//Enable analog input mode
	GPIOA->CRL &= ~GPIO_CRL_MODE1;
 8000180:	4b17      	ldr	r3, [pc, #92]	; (80001e0 <ADC1_Continous_Conv_Init+0x70>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a16      	ldr	r2, [pc, #88]	; (80001e0 <ADC1_Continous_Conv_Init+0x70>)
 8000186:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800018a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF1;
 800018c:	4b14      	ldr	r3, [pc, #80]	; (80001e0 <ADC1_Continous_Conv_Init+0x70>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a13      	ldr	r2, [pc, #76]	; (80001e0 <ADC1_Continous_Conv_Init+0x70>)
 8000192:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000196:	6013      	str	r3, [r2, #0]

	//enable adc1 clock
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000198:	4b10      	ldr	r3, [pc, #64]	; (80001dc <ADC1_Continous_Conv_Init+0x6c>)
 800019a:	699b      	ldr	r3, [r3, #24]
 800019c:	4a0f      	ldr	r2, [pc, #60]	; (80001dc <ADC1_Continous_Conv_Init+0x6c>)
 800019e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001a2:	6193      	str	r3, [r2, #24]

	//set the sequence channel 1 as 1st
	ADC1->SQR3 |= ADC_SQR3_SQ1_0;
 80001a4:	4b0f      	ldr	r3, [pc, #60]	; (80001e4 <ADC1_Continous_Conv_Init+0x74>)
 80001a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001a8:	4a0e      	ldr	r2, [pc, #56]	; (80001e4 <ADC1_Continous_Conv_Init+0x74>)
 80001aa:	f043 0301 	orr.w	r3, r3, #1
 80001ae:	6353      	str	r3, [r2, #52]	; 0x34

	//set 1 conversions
	ADC1->SQR1 &= ~ADC_SQR1_L;
 80001b0:	4b0c      	ldr	r3, [pc, #48]	; (80001e4 <ADC1_Continous_Conv_Init+0x74>)
 80001b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80001b4:	4a0b      	ldr	r2, [pc, #44]	; (80001e4 <ADC1_Continous_Conv_Init+0x74>)
 80001b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001ba:	62d3      	str	r3, [r2, #44]	; 0x2c

	//wakeup adc
	ADC1->CR2 |= ADC_CR2_ADON;
 80001bc:	4b09      	ldr	r3, [pc, #36]	; (80001e4 <ADC1_Continous_Conv_Init+0x74>)
 80001be:	689b      	ldr	r3, [r3, #8]
 80001c0:	4a08      	ldr	r2, [pc, #32]	; (80001e4 <ADC1_Continous_Conv_Init+0x74>)
 80001c2:	f043 0301 	orr.w	r3, r3, #1
 80001c6:	6093      	str	r3, [r2, #8]

	ADC1->CR2 |= ADC_CR2_CONT;
 80001c8:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <ADC1_Continous_Conv_Init+0x74>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4a05      	ldr	r2, [pc, #20]	; (80001e4 <ADC1_Continous_Conv_Init+0x74>)
 80001ce:	f043 0302 	orr.w	r3, r3, #2
 80001d2:	6093      	str	r3, [r2, #8]

}
 80001d4:	bf00      	nop
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	40021000 	.word	0x40021000
 80001e0:	40010800 	.word	0x40010800
 80001e4:	40012400 	.word	0x40012400

080001e8 <ADC1_Continous_Conv_Init_Read>:

uint16_t ADC1_Continous_Conv_Init_Read(void) {
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	//need to enable 2nd time of the adc to start


	ADC1->CR2 |= ADC_CR2_ADON;
 80001ec:	4b0c      	ldr	r3, [pc, #48]	; (8000220 <ADC1_Continous_Conv_Init_Read+0x38>)
 80001ee:	689b      	ldr	r3, [r3, #8]
 80001f0:	4a0b      	ldr	r2, [pc, #44]	; (8000220 <ADC1_Continous_Conv_Init_Read+0x38>)
 80001f2:	f043 0301 	orr.w	r3, r3, #1
 80001f6:	6093      	str	r3, [r2, #8]
	//start conversion of regular channels
	ADC1->CR2 |= ADC_CR2_SWSTART;
 80001f8:	4b09      	ldr	r3, [pc, #36]	; (8000220 <ADC1_Continous_Conv_Init_Read+0x38>)
 80001fa:	689b      	ldr	r3, [r3, #8]
 80001fc:	4a08      	ldr	r2, [pc, #32]	; (8000220 <ADC1_Continous_Conv_Init_Read+0x38>)
 80001fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000202:	6093      	str	r3, [r2, #8]
	//wait until the conversion stop
	while (!(ADC1->SR & ADC_SR_EOC))
 8000204:	bf00      	nop
 8000206:	4b06      	ldr	r3, [pc, #24]	; (8000220 <ADC1_Continous_Conv_Init_Read+0x38>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f003 0302 	and.w	r3, r3, #2
 800020e:	2b00      	cmp	r3, #0
 8000210:	d0f9      	beq.n	8000206 <ADC1_Continous_Conv_Init_Read+0x1e>
		;
	return ADC1->DR;
 8000212:	4b03      	ldr	r3, [pc, #12]	; (8000220 <ADC1_Continous_Conv_Init_Read+0x38>)
 8000214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000216:	b29b      	uxth	r3, r3
}
 8000218:	4618      	mov	r0, r3
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr
 8000220:	40012400 	.word	0x40012400

08000224 <main>:
#include "adc.h"

int16_t val;
int16_t voltage;

int main(void) {
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0

	//set sysclock to 72MHZ
	HSE_PLL_SYS_CLK_MAX();
 8000228:	f000 f834 	bl	8000294 <HSE_PLL_SYS_CLK_MAX>
	//Enable PC13 LED
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 800022c:	4b14      	ldr	r3, [pc, #80]	; (8000280 <main+0x5c>)
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	4a13      	ldr	r2, [pc, #76]	; (8000280 <main+0x5c>)
 8000232:	f043 0310 	orr.w	r3, r3, #16
 8000236:	6193      	str	r3, [r2, #24]
	GPIOC->CRH |= GPIO_CRH_MODE13;
 8000238:	4b12      	ldr	r3, [pc, #72]	; (8000284 <main+0x60>)
 800023a:	685b      	ldr	r3, [r3, #4]
 800023c:	4a11      	ldr	r2, [pc, #68]	; (8000284 <main+0x60>)
 800023e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000242:	6053      	str	r3, [r2, #4]
	ADC1_Continous_Conv_Init();
 8000244:	f7ff ff94 	bl	8000170 <ADC1_Continous_Conv_Init>
	UART1_Init();
 8000248:	f000 f93c 	bl	80004c4 <UART1_Init>
	GPIOC->ODR |= GPIO_ODR_ODR13;
 800024c:	4b0d      	ldr	r3, [pc, #52]	; (8000284 <main+0x60>)
 800024e:	68db      	ldr	r3, [r3, #12]
 8000250:	4a0c      	ldr	r2, [pc, #48]	; (8000284 <main+0x60>)
 8000252:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000256:	60d3      	str	r3, [r2, #12]
	printf("ADC Testing\r\n");
 8000258:	480b      	ldr	r0, [pc, #44]	; (8000288 <main+0x64>)
 800025a:	f000 faef 	bl	800083c <puts>

	while (1) {

		//val = ADC1_Single_Conv_Init_Read();
		val = ADC1_Continous_Conv_Init_Read();
 800025e:	f7ff ffc3 	bl	80001e8 <ADC1_Continous_Conv_Init_Read>
 8000262:	4603      	mov	r3, r0
 8000264:	b21a      	sxth	r2, r3
 8000266:	4b09      	ldr	r3, [pc, #36]	; (800028c <main+0x68>)
 8000268:	801a      	strh	r2, [r3, #0]
		//volateg step size = 3.3v/4096
		//voltage = (3.3 / 4096.0) *val;
		printf("Pot Value : %d\r\n", val);
 800026a:	4b08      	ldr	r3, [pc, #32]	; (800028c <main+0x68>)
 800026c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000270:	4619      	mov	r1, r3
 8000272:	4807      	ldr	r0, [pc, #28]	; (8000290 <main+0x6c>)
 8000274:	f000 fa7c 	bl	8000770 <iprintf>
		DelayMS(100);
 8000278:	2064      	movs	r0, #100	; 0x64
 800027a:	f000 f8f5 	bl	8000468 <DelayMS>
		val = ADC1_Continous_Conv_Init_Read();
 800027e:	e7ee      	b.n	800025e <main+0x3a>
 8000280:	40021000 	.word	0x40021000
 8000284:	40011000 	.word	0x40011000
 8000288:	08001538 	.word	0x08001538
 800028c:	20000078 	.word	0x20000078
 8000290:	08001548 	.word	0x08001548

08000294 <HSE_PLL_SYS_CLK_MAX>:
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSE);

}

void HSE_PLL_SYS_CLK_MAX(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON;
 8000298:	4b21      	ldr	r3, [pc, #132]	; (8000320 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a20      	ldr	r2, [pc, #128]	; (8000320 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 800029e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002a2:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80002a4:	bf00      	nop
 80002a6:	4b1e      	ldr	r3, [pc, #120]	; (8000320 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d0f9      	beq.n	80002a6 <HSE_PLL_SYS_CLK_MAX+0x12>
		;

	FLASH->ACR |=FLASH_ACR_LATENCY_2 |FLASH_ACR_PRFTBE;
 80002b2:	4b1c      	ldr	r3, [pc, #112]	; (8000324 <HSE_PLL_SYS_CLK_MAX+0x90>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a1b      	ldr	r2, [pc, #108]	; (8000324 <HSE_PLL_SYS_CLK_MAX+0x90>)
 80002b8:	f043 0314 	orr.w	r3, r3, #20
 80002bc:	6013      	str	r3, [r2, #0]


	RCC->CFGR |= RCC_CFGR_PLLSRC;
 80002be:	4b18      	ldr	r3, [pc, #96]	; (8000320 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	4a17      	ldr	r2, [pc, #92]	; (8000320 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80002c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002c8:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLMULL9;
 80002ca:	4b15      	ldr	r3, [pc, #84]	; (8000320 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80002cc:	685b      	ldr	r3, [r3, #4]
 80002ce:	4a14      	ldr	r2, [pc, #80]	; (8000320 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80002d0:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80002d4:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 80002d6:	4b12      	ldr	r3, [pc, #72]	; (8000320 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	4a11      	ldr	r2, [pc, #68]	; (8000320 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80002dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e0:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_ADCPRE_DIV6;
 80002e2:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80002e4:	685b      	ldr	r3, [r3, #4]
 80002e6:	4a0e      	ldr	r2, [pc, #56]	; (8000320 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80002e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002ec:	6053      	str	r3, [r2, #4]

	RCC->CR |= RCC_CR_PLLON;
 80002ee:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a0b      	ldr	r2, [pc, #44]	; (8000320 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80002f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002f8:	6013      	str	r3, [r2, #0]

	//RCC->CFGR &= ~RCC_CFGR_SW;
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002fa:	4b09      	ldr	r3, [pc, #36]	; (8000320 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 80002fc:	685b      	ldr	r3, [r3, #4]
 80002fe:	4a08      	ldr	r2, [pc, #32]	; (8000320 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 8000300:	f043 0302 	orr.w	r3, r3, #2
 8000304:	6053      	str	r3, [r2, #4]

	while ((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000306:	bf00      	nop
 8000308:	4b05      	ldr	r3, [pc, #20]	; (8000320 <HSE_PLL_SYS_CLK_MAX+0x8c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000310:	2b00      	cmp	r3, #0
 8000312:	d0f9      	beq.n	8000308 <HSE_PLL_SYS_CLK_MAX+0x74>
		;
}
 8000314:	bf00      	nop
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40021000 	.word	0x40021000
 8000324:	40022000 	.word	0x40022000

08000328 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
 800032e:	60f8      	str	r0, [r7, #12]
 8000330:	60b9      	str	r1, [r7, #8]
 8000332:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000334:	2300      	movs	r3, #0
 8000336:	617b      	str	r3, [r7, #20]
 8000338:	e00a      	b.n	8000350 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800033a:	f3af 8000 	nop.w
 800033e:	4601      	mov	r1, r0
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	1c5a      	adds	r2, r3, #1
 8000344:	60ba      	str	r2, [r7, #8]
 8000346:	b2ca      	uxtb	r2, r1
 8000348:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800034a:	697b      	ldr	r3, [r7, #20]
 800034c:	3301      	adds	r3, #1
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	697a      	ldr	r2, [r7, #20]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	429a      	cmp	r2, r3
 8000356:	dbf0      	blt.n	800033a <_read+0x12>
  }

  return len;
 8000358:	687b      	ldr	r3, [r7, #4]
}
 800035a:	4618      	mov	r0, r3
 800035c:	3718      	adds	r7, #24
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}

08000362 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000362:	b580      	push	{r7, lr}
 8000364:	b086      	sub	sp, #24
 8000366:	af00      	add	r7, sp, #0
 8000368:	60f8      	str	r0, [r7, #12]
 800036a:	60b9      	str	r1, [r7, #8]
 800036c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800036e:	2300      	movs	r3, #0
 8000370:	617b      	str	r3, [r7, #20]
 8000372:	e009      	b.n	8000388 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	1c5a      	adds	r2, r3, #1
 8000378:	60ba      	str	r2, [r7, #8]
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	4618      	mov	r0, r3
 800037e:	f000 f8fd 	bl	800057c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	3301      	adds	r3, #1
 8000386:	617b      	str	r3, [r7, #20]
 8000388:	697a      	ldr	r2, [r7, #20]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	429a      	cmp	r2, r3
 800038e:	dbf1      	blt.n	8000374 <_write+0x12>
  }
  return len;
 8000390:	687b      	ldr	r3, [r7, #4]
}
 8000392:	4618      	mov	r0, r3
 8000394:	3718      	adds	r7, #24
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}

0800039a <_close>:

int _close(int file)
{
 800039a:	b480      	push	{r7}
 800039c:	b083      	sub	sp, #12
 800039e:	af00      	add	r7, sp, #0
 80003a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr

080003b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003c0:	605a      	str	r2, [r3, #4]
  return 0;
 80003c2:	2300      	movs	r3, #0
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr

080003ce <_isatty>:

int _isatty(int file)
{
 80003ce:	b480      	push	{r7}
 80003d0:	b083      	sub	sp, #12
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003d6:	2301      	movs	r3, #1
}
 80003d8:	4618      	mov	r0, r3
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	bc80      	pop	{r7}
 80003e0:	4770      	bx	lr

080003e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003e2:	b480      	push	{r7}
 80003e4:	b085      	sub	sp, #20
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	60f8      	str	r0, [r7, #12]
 80003ea:	60b9      	str	r1, [r7, #8]
 80003ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003ee:	2300      	movs	r3, #0
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	3714      	adds	r7, #20
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bc80      	pop	{r7}
 80003f8:	4770      	bx	lr
	...

080003fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b086      	sub	sp, #24
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000404:	4a14      	ldr	r2, [pc, #80]	; (8000458 <_sbrk+0x5c>)
 8000406:	4b15      	ldr	r3, [pc, #84]	; (800045c <_sbrk+0x60>)
 8000408:	1ad3      	subs	r3, r2, r3
 800040a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000410:	4b13      	ldr	r3, [pc, #76]	; (8000460 <_sbrk+0x64>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d102      	bne.n	800041e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000418:	4b11      	ldr	r3, [pc, #68]	; (8000460 <_sbrk+0x64>)
 800041a:	4a12      	ldr	r2, [pc, #72]	; (8000464 <_sbrk+0x68>)
 800041c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800041e:	4b10      	ldr	r3, [pc, #64]	; (8000460 <_sbrk+0x64>)
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4413      	add	r3, r2
 8000426:	693a      	ldr	r2, [r7, #16]
 8000428:	429a      	cmp	r2, r3
 800042a:	d207      	bcs.n	800043c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800042c:	f000 fb34 	bl	8000a98 <__errno>
 8000430:	4603      	mov	r3, r0
 8000432:	220c      	movs	r2, #12
 8000434:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000436:	f04f 33ff 	mov.w	r3, #4294967295
 800043a:	e009      	b.n	8000450 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800043c:	4b08      	ldr	r3, [pc, #32]	; (8000460 <_sbrk+0x64>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000442:	4b07      	ldr	r3, [pc, #28]	; (8000460 <_sbrk+0x64>)
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4413      	add	r3, r2
 800044a:	4a05      	ldr	r2, [pc, #20]	; (8000460 <_sbrk+0x64>)
 800044c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800044e:	68fb      	ldr	r3, [r7, #12]
}
 8000450:	4618      	mov	r0, r3
 8000452:	3718      	adds	r7, #24
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20005000 	.word	0x20005000
 800045c:	00000400 	.word	0x00000400
 8000460:	2000007c 	.word	0x2000007c
 8000464:	200001d0 	.word	0x200001d0

08000468 <DelayMS>:


#define CORE_CLOCK_FREQ 72000000

void DelayMS(uint32_t delay)
{
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
	SysTick->LOAD = (CORE_CLOCK_FREQ/1000) - 1;
 8000470:	4b12      	ldr	r3, [pc, #72]	; (80004bc <DelayMS+0x54>)
 8000472:	4a13      	ldr	r2, [pc, #76]	; (80004c0 <DelayMS+0x58>)
 8000474:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; //set the current value of the systick;
 8000476:	4b11      	ldr	r3, [pc, #68]	; (80004bc <DelayMS+0x54>)
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk ; //set processor clock source and enable systick
 800047c:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <DelayMS+0x54>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a0e      	ldr	r2, [pc, #56]	; (80004bc <DelayMS+0x54>)
 8000482:	f043 0305 	orr.w	r3, r3, #5
 8000486:	6013      	str	r3, [r2, #0]
	
	for(uint32_t i =0;i<delay;i++)
 8000488:	2300      	movs	r3, #0
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	e009      	b.n	80004a2 <DelayMS+0x3a>
	{
		while(((SysTick->CTRL)&SysTick_CTRL_COUNTFLAG_Msk) == 0);
 800048e:	bf00      	nop
 8000490:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <DelayMS+0x54>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000498:	2b00      	cmp	r3, #0
 800049a:	d0f9      	beq.n	8000490 <DelayMS+0x28>
	for(uint32_t i =0;i<delay;i++)
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	3301      	adds	r3, #1
 80004a0:	60fb      	str	r3, [r7, #12]
 80004a2:	68fa      	ldr	r2, [r7, #12]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	429a      	cmp	r2, r3
 80004a8:	d3f1      	bcc.n	800048e <DelayMS+0x26>
	}
	SysTick->CTRL = 0;
 80004aa:	4b04      	ldr	r3, [pc, #16]	; (80004bc <DelayMS+0x54>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
}
 80004b0:	bf00      	nop
 80004b2:	3714      	adds	r7, #20
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bc80      	pop	{r7}
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	e000e010 	.word	0xe000e010
 80004c0:	0001193f 	.word	0x0001193f

080004c4 <UART1_Init>:
 *      Author: Janith Sinhapura
 */
#include "stm32f1xx.h"
#include "stdio.h"

void UART1_Init(void) {
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
	//uart1 is under apb2 bus
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80004c8:	4b1e      	ldr	r3, [pc, #120]	; (8000544 <UART1_Init+0x80>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a1d      	ldr	r2, [pc, #116]	; (8000544 <UART1_Init+0x80>)
 80004ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004d2:	6193      	str	r3, [r2, #24]

	//uart1 TX-PA9
	//uart1	RX-PA10
	//Enable gpio pins for uart1 in apb2 bus
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80004d4:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <UART1_Init+0x80>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a1a      	ldr	r2, [pc, #104]	; (8000544 <UART1_Init+0x80>)
 80004da:	f043 0304 	orr.w	r3, r3, #4
 80004de:	6193      	str	r3, [r2, #24]

	//enable gpio alternate funtions
	GPIOA->CRH |= GPIO_CRH_MODE9 ;
 80004e0:	4b19      	ldr	r3, [pc, #100]	; (8000548 <UART1_Init+0x84>)
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	4a18      	ldr	r2, [pc, #96]	; (8000548 <UART1_Init+0x84>)
 80004e6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80004ea:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF9_1 | GPIO_CRH_CNF10_0;
 80004ec:	4b16      	ldr	r3, [pc, #88]	; (8000548 <UART1_Init+0x84>)
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	4a15      	ldr	r2, [pc, #84]	; (8000548 <UART1_Init+0x84>)
 80004f2:	f443 6390 	orr.w	r3, r3, #1152	; 0x480
 80004f6:	6053      	str	r3, [r2, #4]

	//enable uart1
	USART1->CR1 |= USART_CR1_UE;
 80004f8:	4b14      	ldr	r3, [pc, #80]	; (800054c <UART1_Init+0x88>)
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	4a13      	ldr	r2, [pc, #76]	; (800054c <UART1_Init+0x88>)
 80004fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000502:	60d3      	str	r3, [r2, #12]

	//8 data bits
	USART1->CR1 &= ~USART_CR1_M;
 8000504:	4b11      	ldr	r3, [pc, #68]	; (800054c <UART1_Init+0x88>)
 8000506:	68db      	ldr	r3, [r3, #12]
 8000508:	4a10      	ldr	r2, [pc, #64]	; (800054c <UART1_Init+0x88>)
 800050a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800050e:	60d3      	str	r3, [r2, #12]

	//1 stop bits
	USART1->CR2 &=~USART_CR2_STOP;
 8000510:	4b0e      	ldr	r3, [pc, #56]	; (800054c <UART1_Init+0x88>)
 8000512:	691b      	ldr	r3, [r3, #16]
 8000514:	4a0d      	ldr	r2, [pc, #52]	; (800054c <UART1_Init+0x88>)
 8000516:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800051a:	6113      	str	r3, [r2, #16]

	//set baud rate to 115200
	//mantissa is 39 = 0x27
	//fractional part is 0.0625 ~ 0.06 = 0x06
	USART1->BRR = (0x27U << 4) | (0x6<< 0);
 800051c:	4b0b      	ldr	r3, [pc, #44]	; (800054c <UART1_Init+0x88>)
 800051e:	f240 2276 	movw	r2, #630	; 0x276
 8000522:	609a      	str	r2, [r3, #8]

	//enable tx
	USART1->CR1 |= USART_CR1_TE;
 8000524:	4b09      	ldr	r3, [pc, #36]	; (800054c <UART1_Init+0x88>)
 8000526:	68db      	ldr	r3, [r3, #12]
 8000528:	4a08      	ldr	r2, [pc, #32]	; (800054c <UART1_Init+0x88>)
 800052a:	f043 0308 	orr.w	r3, r3, #8
 800052e:	60d3      	str	r3, [r2, #12]

	//enable rx
	USART1->CR1 |= USART_CR1_RE;
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <UART1_Init+0x88>)
 8000532:	68db      	ldr	r3, [r3, #12]
 8000534:	4a05      	ldr	r2, [pc, #20]	; (800054c <UART1_Init+0x88>)
 8000536:	f043 0304 	orr.w	r3, r3, #4
 800053a:	60d3      	str	r3, [r2, #12]


}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr
 8000544:	40021000 	.word	0x40021000
 8000548:	40010800 	.word	0x40010800
 800054c:	40013800 	.word	0x40013800

08000550 <UART1_Write_Char>:

void UART1_Write_Char(char data)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
	//check data is transmitted out from the data register
	while((USART1->SR & USART_SR_TXE)==0);
 800055a:	bf00      	nop
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <UART1_Write_Char+0x28>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000564:	2b00      	cmp	r3, #0
 8000566:	d0f9      	beq.n	800055c <UART1_Write_Char+0xc>
	USART1->DR = data;
 8000568:	4a03      	ldr	r2, [pc, #12]	; (8000578 <UART1_Write_Char+0x28>)
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	6053      	str	r3, [r2, #4]


}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	40013800 	.word	0x40013800

0800057c <__io_putchar>:
char UART1_Read_Char(void){
	while(!(USART1->SR & USART_SR_RXNE));
	return USART1->DR;
}

char __io_putchar(char ch){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
	UART1_Write_Char(ch);
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff ffe1 	bl	8000550 <UART1_Write_Char>
	return ch;
 800058e:	79fb      	ldrb	r3, [r7, #7]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000598:	480d      	ldr	r0, [pc, #52]	; (80005d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800059a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800059c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80005a2:	490d      	ldr	r1, [pc, #52]	; (80005d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a4:	4a0d      	ldr	r2, [pc, #52]	; (80005dc <LoopForever+0xe>)
  movs r3, #0
 80005a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a8:	e002      	b.n	80005b0 <LoopCopyDataInit>

080005aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ae:	3304      	adds	r3, #4

080005b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b4:	d3f9      	bcc.n	80005aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005b6:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005b8:	4c0a      	ldr	r4, [pc, #40]	; (80005e4 <LoopForever+0x16>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005bc:	e001      	b.n	80005c2 <LoopFillZerobss>

080005be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c0:	3204      	adds	r2, #4

080005c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c4:	d3fb      	bcc.n	80005be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005c6:	f000 fa6d 	bl	8000aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ca:	f7ff fe2b 	bl	8000224 <main>

080005ce <LoopForever>:

LoopForever:
  b LoopForever
 80005ce:	e7fe      	b.n	80005ce <LoopForever>
  ldr   r0, =_estack
 80005d0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80005d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005dc:	08001594 	.word	0x08001594
  ldr r2, =_sbss
 80005e0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80005e4:	200001cc 	.word	0x200001cc

080005e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e8:	e7fe      	b.n	80005e8 <ADC1_2_IRQHandler>
	...

080005ec <std>:
 80005ec:	2300      	movs	r3, #0
 80005ee:	b510      	push	{r4, lr}
 80005f0:	4604      	mov	r4, r0
 80005f2:	e9c0 3300 	strd	r3, r3, [r0]
 80005f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80005fa:	6083      	str	r3, [r0, #8]
 80005fc:	8181      	strh	r1, [r0, #12]
 80005fe:	6643      	str	r3, [r0, #100]	; 0x64
 8000600:	81c2      	strh	r2, [r0, #14]
 8000602:	6183      	str	r3, [r0, #24]
 8000604:	4619      	mov	r1, r3
 8000606:	2208      	movs	r2, #8
 8000608:	305c      	adds	r0, #92	; 0x5c
 800060a:	f000 f9f7 	bl	80009fc <memset>
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <std+0x58>)
 8000610:	6224      	str	r4, [r4, #32]
 8000612:	6263      	str	r3, [r4, #36]	; 0x24
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <std+0x5c>)
 8000616:	62a3      	str	r3, [r4, #40]	; 0x28
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <std+0x60>)
 800061a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <std+0x64>)
 800061e:	6323      	str	r3, [r4, #48]	; 0x30
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <std+0x68>)
 8000622:	429c      	cmp	r4, r3
 8000624:	d006      	beq.n	8000634 <std+0x48>
 8000626:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800062a:	4294      	cmp	r4, r2
 800062c:	d002      	beq.n	8000634 <std+0x48>
 800062e:	33d0      	adds	r3, #208	; 0xd0
 8000630:	429c      	cmp	r4, r3
 8000632:	d105      	bne.n	8000640 <std+0x54>
 8000634:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800063c:	f000 ba56 	b.w	8000aec <__retarget_lock_init_recursive>
 8000640:	bd10      	pop	{r4, pc}
 8000642:	bf00      	nop
 8000644:	0800084d 	.word	0x0800084d
 8000648:	0800086f 	.word	0x0800086f
 800064c:	080008a7 	.word	0x080008a7
 8000650:	080008cb 	.word	0x080008cb
 8000654:	20000080 	.word	0x20000080

08000658 <stdio_exit_handler>:
 8000658:	4a02      	ldr	r2, [pc, #8]	; (8000664 <stdio_exit_handler+0xc>)
 800065a:	4903      	ldr	r1, [pc, #12]	; (8000668 <stdio_exit_handler+0x10>)
 800065c:	4803      	ldr	r0, [pc, #12]	; (800066c <stdio_exit_handler+0x14>)
 800065e:	f000 b869 	b.w	8000734 <_fwalk_sglue>
 8000662:	bf00      	nop
 8000664:	20000000 	.word	0x20000000
 8000668:	0800138d 	.word	0x0800138d
 800066c:	2000000c 	.word	0x2000000c

08000670 <cleanup_stdio>:
 8000670:	6841      	ldr	r1, [r0, #4]
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <cleanup_stdio+0x34>)
 8000674:	b510      	push	{r4, lr}
 8000676:	4299      	cmp	r1, r3
 8000678:	4604      	mov	r4, r0
 800067a:	d001      	beq.n	8000680 <cleanup_stdio+0x10>
 800067c:	f000 fe86 	bl	800138c <_fflush_r>
 8000680:	68a1      	ldr	r1, [r4, #8]
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <cleanup_stdio+0x38>)
 8000684:	4299      	cmp	r1, r3
 8000686:	d002      	beq.n	800068e <cleanup_stdio+0x1e>
 8000688:	4620      	mov	r0, r4
 800068a:	f000 fe7f 	bl	800138c <_fflush_r>
 800068e:	68e1      	ldr	r1, [r4, #12]
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <cleanup_stdio+0x3c>)
 8000692:	4299      	cmp	r1, r3
 8000694:	d004      	beq.n	80006a0 <cleanup_stdio+0x30>
 8000696:	4620      	mov	r0, r4
 8000698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800069c:	f000 be76 	b.w	800138c <_fflush_r>
 80006a0:	bd10      	pop	{r4, pc}
 80006a2:	bf00      	nop
 80006a4:	20000080 	.word	0x20000080
 80006a8:	200000e8 	.word	0x200000e8
 80006ac:	20000150 	.word	0x20000150

080006b0 <global_stdio_init.part.0>:
 80006b0:	b510      	push	{r4, lr}
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <global_stdio_init.part.0+0x30>)
 80006b4:	4c0b      	ldr	r4, [pc, #44]	; (80006e4 <global_stdio_init.part.0+0x34>)
 80006b6:	4a0c      	ldr	r2, [pc, #48]	; (80006e8 <global_stdio_init.part.0+0x38>)
 80006b8:	4620      	mov	r0, r4
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	2104      	movs	r1, #4
 80006be:	2200      	movs	r2, #0
 80006c0:	f7ff ff94 	bl	80005ec <std>
 80006c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80006c8:	2201      	movs	r2, #1
 80006ca:	2109      	movs	r1, #9
 80006cc:	f7ff ff8e 	bl	80005ec <std>
 80006d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80006d4:	2202      	movs	r2, #2
 80006d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006da:	2112      	movs	r1, #18
 80006dc:	f7ff bf86 	b.w	80005ec <std>
 80006e0:	200001b8 	.word	0x200001b8
 80006e4:	20000080 	.word	0x20000080
 80006e8:	08000659 	.word	0x08000659

080006ec <__sfp_lock_acquire>:
 80006ec:	4801      	ldr	r0, [pc, #4]	; (80006f4 <__sfp_lock_acquire+0x8>)
 80006ee:	f000 b9fe 	b.w	8000aee <__retarget_lock_acquire_recursive>
 80006f2:	bf00      	nop
 80006f4:	200001c1 	.word	0x200001c1

080006f8 <__sfp_lock_release>:
 80006f8:	4801      	ldr	r0, [pc, #4]	; (8000700 <__sfp_lock_release+0x8>)
 80006fa:	f000 b9f9 	b.w	8000af0 <__retarget_lock_release_recursive>
 80006fe:	bf00      	nop
 8000700:	200001c1 	.word	0x200001c1

08000704 <__sinit>:
 8000704:	b510      	push	{r4, lr}
 8000706:	4604      	mov	r4, r0
 8000708:	f7ff fff0 	bl	80006ec <__sfp_lock_acquire>
 800070c:	6a23      	ldr	r3, [r4, #32]
 800070e:	b11b      	cbz	r3, 8000718 <__sinit+0x14>
 8000710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000714:	f7ff bff0 	b.w	80006f8 <__sfp_lock_release>
 8000718:	4b04      	ldr	r3, [pc, #16]	; (800072c <__sinit+0x28>)
 800071a:	6223      	str	r3, [r4, #32]
 800071c:	4b04      	ldr	r3, [pc, #16]	; (8000730 <__sinit+0x2c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d1f5      	bne.n	8000710 <__sinit+0xc>
 8000724:	f7ff ffc4 	bl	80006b0 <global_stdio_init.part.0>
 8000728:	e7f2      	b.n	8000710 <__sinit+0xc>
 800072a:	bf00      	nop
 800072c:	08000671 	.word	0x08000671
 8000730:	200001b8 	.word	0x200001b8

08000734 <_fwalk_sglue>:
 8000734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000738:	4607      	mov	r7, r0
 800073a:	4688      	mov	r8, r1
 800073c:	4614      	mov	r4, r2
 800073e:	2600      	movs	r6, #0
 8000740:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000744:	f1b9 0901 	subs.w	r9, r9, #1
 8000748:	d505      	bpl.n	8000756 <_fwalk_sglue+0x22>
 800074a:	6824      	ldr	r4, [r4, #0]
 800074c:	2c00      	cmp	r4, #0
 800074e:	d1f7      	bne.n	8000740 <_fwalk_sglue+0xc>
 8000750:	4630      	mov	r0, r6
 8000752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000756:	89ab      	ldrh	r3, [r5, #12]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d907      	bls.n	800076c <_fwalk_sglue+0x38>
 800075c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000760:	3301      	adds	r3, #1
 8000762:	d003      	beq.n	800076c <_fwalk_sglue+0x38>
 8000764:	4629      	mov	r1, r5
 8000766:	4638      	mov	r0, r7
 8000768:	47c0      	blx	r8
 800076a:	4306      	orrs	r6, r0
 800076c:	3568      	adds	r5, #104	; 0x68
 800076e:	e7e9      	b.n	8000744 <_fwalk_sglue+0x10>

08000770 <iprintf>:
 8000770:	b40f      	push	{r0, r1, r2, r3}
 8000772:	b507      	push	{r0, r1, r2, lr}
 8000774:	4906      	ldr	r1, [pc, #24]	; (8000790 <iprintf+0x20>)
 8000776:	ab04      	add	r3, sp, #16
 8000778:	6808      	ldr	r0, [r1, #0]
 800077a:	f853 2b04 	ldr.w	r2, [r3], #4
 800077e:	6881      	ldr	r1, [r0, #8]
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	f000 fad3 	bl	8000d2c <_vfiprintf_r>
 8000786:	b003      	add	sp, #12
 8000788:	f85d eb04 	ldr.w	lr, [sp], #4
 800078c:	b004      	add	sp, #16
 800078e:	4770      	bx	lr
 8000790:	20000058 	.word	0x20000058

08000794 <_puts_r>:
 8000794:	6a03      	ldr	r3, [r0, #32]
 8000796:	b570      	push	{r4, r5, r6, lr}
 8000798:	4605      	mov	r5, r0
 800079a:	460e      	mov	r6, r1
 800079c:	6884      	ldr	r4, [r0, #8]
 800079e:	b90b      	cbnz	r3, 80007a4 <_puts_r+0x10>
 80007a0:	f7ff ffb0 	bl	8000704 <__sinit>
 80007a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007a6:	07db      	lsls	r3, r3, #31
 80007a8:	d405      	bmi.n	80007b6 <_puts_r+0x22>
 80007aa:	89a3      	ldrh	r3, [r4, #12]
 80007ac:	0598      	lsls	r0, r3, #22
 80007ae:	d402      	bmi.n	80007b6 <_puts_r+0x22>
 80007b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007b2:	f000 f99c 	bl	8000aee <__retarget_lock_acquire_recursive>
 80007b6:	89a3      	ldrh	r3, [r4, #12]
 80007b8:	0719      	lsls	r1, r3, #28
 80007ba:	d513      	bpl.n	80007e4 <_puts_r+0x50>
 80007bc:	6923      	ldr	r3, [r4, #16]
 80007be:	b18b      	cbz	r3, 80007e4 <_puts_r+0x50>
 80007c0:	3e01      	subs	r6, #1
 80007c2:	68a3      	ldr	r3, [r4, #8]
 80007c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80007c8:	3b01      	subs	r3, #1
 80007ca:	60a3      	str	r3, [r4, #8]
 80007cc:	b9e9      	cbnz	r1, 800080a <_puts_r+0x76>
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	da2e      	bge.n	8000830 <_puts_r+0x9c>
 80007d2:	4622      	mov	r2, r4
 80007d4:	210a      	movs	r1, #10
 80007d6:	4628      	mov	r0, r5
 80007d8:	f000 f87b 	bl	80008d2 <__swbuf_r>
 80007dc:	3001      	adds	r0, #1
 80007de:	d007      	beq.n	80007f0 <_puts_r+0x5c>
 80007e0:	250a      	movs	r5, #10
 80007e2:	e007      	b.n	80007f4 <_puts_r+0x60>
 80007e4:	4621      	mov	r1, r4
 80007e6:	4628      	mov	r0, r5
 80007e8:	f000 f8b0 	bl	800094c <__swsetup_r>
 80007ec:	2800      	cmp	r0, #0
 80007ee:	d0e7      	beq.n	80007c0 <_puts_r+0x2c>
 80007f0:	f04f 35ff 	mov.w	r5, #4294967295
 80007f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007f6:	07da      	lsls	r2, r3, #31
 80007f8:	d405      	bmi.n	8000806 <_puts_r+0x72>
 80007fa:	89a3      	ldrh	r3, [r4, #12]
 80007fc:	059b      	lsls	r3, r3, #22
 80007fe:	d402      	bmi.n	8000806 <_puts_r+0x72>
 8000800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000802:	f000 f975 	bl	8000af0 <__retarget_lock_release_recursive>
 8000806:	4628      	mov	r0, r5
 8000808:	bd70      	pop	{r4, r5, r6, pc}
 800080a:	2b00      	cmp	r3, #0
 800080c:	da04      	bge.n	8000818 <_puts_r+0x84>
 800080e:	69a2      	ldr	r2, [r4, #24]
 8000810:	429a      	cmp	r2, r3
 8000812:	dc06      	bgt.n	8000822 <_puts_r+0x8e>
 8000814:	290a      	cmp	r1, #10
 8000816:	d004      	beq.n	8000822 <_puts_r+0x8e>
 8000818:	6823      	ldr	r3, [r4, #0]
 800081a:	1c5a      	adds	r2, r3, #1
 800081c:	6022      	str	r2, [r4, #0]
 800081e:	7019      	strb	r1, [r3, #0]
 8000820:	e7cf      	b.n	80007c2 <_puts_r+0x2e>
 8000822:	4622      	mov	r2, r4
 8000824:	4628      	mov	r0, r5
 8000826:	f000 f854 	bl	80008d2 <__swbuf_r>
 800082a:	3001      	adds	r0, #1
 800082c:	d1c9      	bne.n	80007c2 <_puts_r+0x2e>
 800082e:	e7df      	b.n	80007f0 <_puts_r+0x5c>
 8000830:	250a      	movs	r5, #10
 8000832:	6823      	ldr	r3, [r4, #0]
 8000834:	1c5a      	adds	r2, r3, #1
 8000836:	6022      	str	r2, [r4, #0]
 8000838:	701d      	strb	r5, [r3, #0]
 800083a:	e7db      	b.n	80007f4 <_puts_r+0x60>

0800083c <puts>:
 800083c:	4b02      	ldr	r3, [pc, #8]	; (8000848 <puts+0xc>)
 800083e:	4601      	mov	r1, r0
 8000840:	6818      	ldr	r0, [r3, #0]
 8000842:	f7ff bfa7 	b.w	8000794 <_puts_r>
 8000846:	bf00      	nop
 8000848:	20000058 	.word	0x20000058

0800084c <__sread>:
 800084c:	b510      	push	{r4, lr}
 800084e:	460c      	mov	r4, r1
 8000850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000854:	f000 f8fc 	bl	8000a50 <_read_r>
 8000858:	2800      	cmp	r0, #0
 800085a:	bfab      	itete	ge
 800085c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800085e:	89a3      	ldrhlt	r3, [r4, #12]
 8000860:	181b      	addge	r3, r3, r0
 8000862:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000866:	bfac      	ite	ge
 8000868:	6563      	strge	r3, [r4, #84]	; 0x54
 800086a:	81a3      	strhlt	r3, [r4, #12]
 800086c:	bd10      	pop	{r4, pc}

0800086e <__swrite>:
 800086e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000872:	461f      	mov	r7, r3
 8000874:	898b      	ldrh	r3, [r1, #12]
 8000876:	4605      	mov	r5, r0
 8000878:	05db      	lsls	r3, r3, #23
 800087a:	460c      	mov	r4, r1
 800087c:	4616      	mov	r6, r2
 800087e:	d505      	bpl.n	800088c <__swrite+0x1e>
 8000880:	2302      	movs	r3, #2
 8000882:	2200      	movs	r2, #0
 8000884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000888:	f000 f8d0 	bl	8000a2c <_lseek_r>
 800088c:	89a3      	ldrh	r3, [r4, #12]
 800088e:	4632      	mov	r2, r6
 8000890:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000894:	81a3      	strh	r3, [r4, #12]
 8000896:	4628      	mov	r0, r5
 8000898:	463b      	mov	r3, r7
 800089a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800089e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008a2:	f000 b8e7 	b.w	8000a74 <_write_r>

080008a6 <__sseek>:
 80008a6:	b510      	push	{r4, lr}
 80008a8:	460c      	mov	r4, r1
 80008aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008ae:	f000 f8bd 	bl	8000a2c <_lseek_r>
 80008b2:	1c43      	adds	r3, r0, #1
 80008b4:	89a3      	ldrh	r3, [r4, #12]
 80008b6:	bf15      	itete	ne
 80008b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80008ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80008be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80008c2:	81a3      	strheq	r3, [r4, #12]
 80008c4:	bf18      	it	ne
 80008c6:	81a3      	strhne	r3, [r4, #12]
 80008c8:	bd10      	pop	{r4, pc}

080008ca <__sclose>:
 80008ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008ce:	f000 b89d 	b.w	8000a0c <_close_r>

080008d2 <__swbuf_r>:
 80008d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008d4:	460e      	mov	r6, r1
 80008d6:	4614      	mov	r4, r2
 80008d8:	4605      	mov	r5, r0
 80008da:	b118      	cbz	r0, 80008e4 <__swbuf_r+0x12>
 80008dc:	6a03      	ldr	r3, [r0, #32]
 80008de:	b90b      	cbnz	r3, 80008e4 <__swbuf_r+0x12>
 80008e0:	f7ff ff10 	bl	8000704 <__sinit>
 80008e4:	69a3      	ldr	r3, [r4, #24]
 80008e6:	60a3      	str	r3, [r4, #8]
 80008e8:	89a3      	ldrh	r3, [r4, #12]
 80008ea:	071a      	lsls	r2, r3, #28
 80008ec:	d525      	bpl.n	800093a <__swbuf_r+0x68>
 80008ee:	6923      	ldr	r3, [r4, #16]
 80008f0:	b31b      	cbz	r3, 800093a <__swbuf_r+0x68>
 80008f2:	6823      	ldr	r3, [r4, #0]
 80008f4:	6922      	ldr	r2, [r4, #16]
 80008f6:	b2f6      	uxtb	r6, r6
 80008f8:	1a98      	subs	r0, r3, r2
 80008fa:	6963      	ldr	r3, [r4, #20]
 80008fc:	4637      	mov	r7, r6
 80008fe:	4283      	cmp	r3, r0
 8000900:	dc04      	bgt.n	800090c <__swbuf_r+0x3a>
 8000902:	4621      	mov	r1, r4
 8000904:	4628      	mov	r0, r5
 8000906:	f000 fd41 	bl	800138c <_fflush_r>
 800090a:	b9e0      	cbnz	r0, 8000946 <__swbuf_r+0x74>
 800090c:	68a3      	ldr	r3, [r4, #8]
 800090e:	3b01      	subs	r3, #1
 8000910:	60a3      	str	r3, [r4, #8]
 8000912:	6823      	ldr	r3, [r4, #0]
 8000914:	1c5a      	adds	r2, r3, #1
 8000916:	6022      	str	r2, [r4, #0]
 8000918:	701e      	strb	r6, [r3, #0]
 800091a:	6962      	ldr	r2, [r4, #20]
 800091c:	1c43      	adds	r3, r0, #1
 800091e:	429a      	cmp	r2, r3
 8000920:	d004      	beq.n	800092c <__swbuf_r+0x5a>
 8000922:	89a3      	ldrh	r3, [r4, #12]
 8000924:	07db      	lsls	r3, r3, #31
 8000926:	d506      	bpl.n	8000936 <__swbuf_r+0x64>
 8000928:	2e0a      	cmp	r6, #10
 800092a:	d104      	bne.n	8000936 <__swbuf_r+0x64>
 800092c:	4621      	mov	r1, r4
 800092e:	4628      	mov	r0, r5
 8000930:	f000 fd2c 	bl	800138c <_fflush_r>
 8000934:	b938      	cbnz	r0, 8000946 <__swbuf_r+0x74>
 8000936:	4638      	mov	r0, r7
 8000938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800093a:	4621      	mov	r1, r4
 800093c:	4628      	mov	r0, r5
 800093e:	f000 f805 	bl	800094c <__swsetup_r>
 8000942:	2800      	cmp	r0, #0
 8000944:	d0d5      	beq.n	80008f2 <__swbuf_r+0x20>
 8000946:	f04f 37ff 	mov.w	r7, #4294967295
 800094a:	e7f4      	b.n	8000936 <__swbuf_r+0x64>

0800094c <__swsetup_r>:
 800094c:	b538      	push	{r3, r4, r5, lr}
 800094e:	4b2a      	ldr	r3, [pc, #168]	; (80009f8 <__swsetup_r+0xac>)
 8000950:	4605      	mov	r5, r0
 8000952:	6818      	ldr	r0, [r3, #0]
 8000954:	460c      	mov	r4, r1
 8000956:	b118      	cbz	r0, 8000960 <__swsetup_r+0x14>
 8000958:	6a03      	ldr	r3, [r0, #32]
 800095a:	b90b      	cbnz	r3, 8000960 <__swsetup_r+0x14>
 800095c:	f7ff fed2 	bl	8000704 <__sinit>
 8000960:	89a3      	ldrh	r3, [r4, #12]
 8000962:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000966:	0718      	lsls	r0, r3, #28
 8000968:	d422      	bmi.n	80009b0 <__swsetup_r+0x64>
 800096a:	06d9      	lsls	r1, r3, #27
 800096c:	d407      	bmi.n	800097e <__swsetup_r+0x32>
 800096e:	2309      	movs	r3, #9
 8000970:	602b      	str	r3, [r5, #0]
 8000972:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000976:	f04f 30ff 	mov.w	r0, #4294967295
 800097a:	81a3      	strh	r3, [r4, #12]
 800097c:	e034      	b.n	80009e8 <__swsetup_r+0x9c>
 800097e:	0758      	lsls	r0, r3, #29
 8000980:	d512      	bpl.n	80009a8 <__swsetup_r+0x5c>
 8000982:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000984:	b141      	cbz	r1, 8000998 <__swsetup_r+0x4c>
 8000986:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800098a:	4299      	cmp	r1, r3
 800098c:	d002      	beq.n	8000994 <__swsetup_r+0x48>
 800098e:	4628      	mov	r0, r5
 8000990:	f000 f8b0 	bl	8000af4 <_free_r>
 8000994:	2300      	movs	r3, #0
 8000996:	6363      	str	r3, [r4, #52]	; 0x34
 8000998:	89a3      	ldrh	r3, [r4, #12]
 800099a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800099e:	81a3      	strh	r3, [r4, #12]
 80009a0:	2300      	movs	r3, #0
 80009a2:	6063      	str	r3, [r4, #4]
 80009a4:	6923      	ldr	r3, [r4, #16]
 80009a6:	6023      	str	r3, [r4, #0]
 80009a8:	89a3      	ldrh	r3, [r4, #12]
 80009aa:	f043 0308 	orr.w	r3, r3, #8
 80009ae:	81a3      	strh	r3, [r4, #12]
 80009b0:	6923      	ldr	r3, [r4, #16]
 80009b2:	b94b      	cbnz	r3, 80009c8 <__swsetup_r+0x7c>
 80009b4:	89a3      	ldrh	r3, [r4, #12]
 80009b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80009ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009be:	d003      	beq.n	80009c8 <__swsetup_r+0x7c>
 80009c0:	4621      	mov	r1, r4
 80009c2:	4628      	mov	r0, r5
 80009c4:	f000 fd2f 	bl	8001426 <__smakebuf_r>
 80009c8:	89a0      	ldrh	r0, [r4, #12]
 80009ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80009ce:	f010 0301 	ands.w	r3, r0, #1
 80009d2:	d00a      	beq.n	80009ea <__swsetup_r+0x9e>
 80009d4:	2300      	movs	r3, #0
 80009d6:	60a3      	str	r3, [r4, #8]
 80009d8:	6963      	ldr	r3, [r4, #20]
 80009da:	425b      	negs	r3, r3
 80009dc:	61a3      	str	r3, [r4, #24]
 80009de:	6923      	ldr	r3, [r4, #16]
 80009e0:	b943      	cbnz	r3, 80009f4 <__swsetup_r+0xa8>
 80009e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80009e6:	d1c4      	bne.n	8000972 <__swsetup_r+0x26>
 80009e8:	bd38      	pop	{r3, r4, r5, pc}
 80009ea:	0781      	lsls	r1, r0, #30
 80009ec:	bf58      	it	pl
 80009ee:	6963      	ldrpl	r3, [r4, #20]
 80009f0:	60a3      	str	r3, [r4, #8]
 80009f2:	e7f4      	b.n	80009de <__swsetup_r+0x92>
 80009f4:	2000      	movs	r0, #0
 80009f6:	e7f7      	b.n	80009e8 <__swsetup_r+0x9c>
 80009f8:	20000058 	.word	0x20000058

080009fc <memset>:
 80009fc:	4603      	mov	r3, r0
 80009fe:	4402      	add	r2, r0
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d100      	bne.n	8000a06 <memset+0xa>
 8000a04:	4770      	bx	lr
 8000a06:	f803 1b01 	strb.w	r1, [r3], #1
 8000a0a:	e7f9      	b.n	8000a00 <memset+0x4>

08000a0c <_close_r>:
 8000a0c:	b538      	push	{r3, r4, r5, lr}
 8000a0e:	2300      	movs	r3, #0
 8000a10:	4d05      	ldr	r5, [pc, #20]	; (8000a28 <_close_r+0x1c>)
 8000a12:	4604      	mov	r4, r0
 8000a14:	4608      	mov	r0, r1
 8000a16:	602b      	str	r3, [r5, #0]
 8000a18:	f7ff fcbf 	bl	800039a <_close>
 8000a1c:	1c43      	adds	r3, r0, #1
 8000a1e:	d102      	bne.n	8000a26 <_close_r+0x1a>
 8000a20:	682b      	ldr	r3, [r5, #0]
 8000a22:	b103      	cbz	r3, 8000a26 <_close_r+0x1a>
 8000a24:	6023      	str	r3, [r4, #0]
 8000a26:	bd38      	pop	{r3, r4, r5, pc}
 8000a28:	200001bc 	.word	0x200001bc

08000a2c <_lseek_r>:
 8000a2c:	b538      	push	{r3, r4, r5, lr}
 8000a2e:	4604      	mov	r4, r0
 8000a30:	4608      	mov	r0, r1
 8000a32:	4611      	mov	r1, r2
 8000a34:	2200      	movs	r2, #0
 8000a36:	4d05      	ldr	r5, [pc, #20]	; (8000a4c <_lseek_r+0x20>)
 8000a38:	602a      	str	r2, [r5, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	f7ff fcd1 	bl	80003e2 <_lseek>
 8000a40:	1c43      	adds	r3, r0, #1
 8000a42:	d102      	bne.n	8000a4a <_lseek_r+0x1e>
 8000a44:	682b      	ldr	r3, [r5, #0]
 8000a46:	b103      	cbz	r3, 8000a4a <_lseek_r+0x1e>
 8000a48:	6023      	str	r3, [r4, #0]
 8000a4a:	bd38      	pop	{r3, r4, r5, pc}
 8000a4c:	200001bc 	.word	0x200001bc

08000a50 <_read_r>:
 8000a50:	b538      	push	{r3, r4, r5, lr}
 8000a52:	4604      	mov	r4, r0
 8000a54:	4608      	mov	r0, r1
 8000a56:	4611      	mov	r1, r2
 8000a58:	2200      	movs	r2, #0
 8000a5a:	4d05      	ldr	r5, [pc, #20]	; (8000a70 <_read_r+0x20>)
 8000a5c:	602a      	str	r2, [r5, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	f7ff fc62 	bl	8000328 <_read>
 8000a64:	1c43      	adds	r3, r0, #1
 8000a66:	d102      	bne.n	8000a6e <_read_r+0x1e>
 8000a68:	682b      	ldr	r3, [r5, #0]
 8000a6a:	b103      	cbz	r3, 8000a6e <_read_r+0x1e>
 8000a6c:	6023      	str	r3, [r4, #0]
 8000a6e:	bd38      	pop	{r3, r4, r5, pc}
 8000a70:	200001bc 	.word	0x200001bc

08000a74 <_write_r>:
 8000a74:	b538      	push	{r3, r4, r5, lr}
 8000a76:	4604      	mov	r4, r0
 8000a78:	4608      	mov	r0, r1
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	4d05      	ldr	r5, [pc, #20]	; (8000a94 <_write_r+0x20>)
 8000a80:	602a      	str	r2, [r5, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	f7ff fc6d 	bl	8000362 <_write>
 8000a88:	1c43      	adds	r3, r0, #1
 8000a8a:	d102      	bne.n	8000a92 <_write_r+0x1e>
 8000a8c:	682b      	ldr	r3, [r5, #0]
 8000a8e:	b103      	cbz	r3, 8000a92 <_write_r+0x1e>
 8000a90:	6023      	str	r3, [r4, #0]
 8000a92:	bd38      	pop	{r3, r4, r5, pc}
 8000a94:	200001bc 	.word	0x200001bc

08000a98 <__errno>:
 8000a98:	4b01      	ldr	r3, [pc, #4]	; (8000aa0 <__errno+0x8>)
 8000a9a:	6818      	ldr	r0, [r3, #0]
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000058 	.word	0x20000058

08000aa4 <__libc_init_array>:
 8000aa4:	b570      	push	{r4, r5, r6, lr}
 8000aa6:	2600      	movs	r6, #0
 8000aa8:	4d0c      	ldr	r5, [pc, #48]	; (8000adc <__libc_init_array+0x38>)
 8000aaa:	4c0d      	ldr	r4, [pc, #52]	; (8000ae0 <__libc_init_array+0x3c>)
 8000aac:	1b64      	subs	r4, r4, r5
 8000aae:	10a4      	asrs	r4, r4, #2
 8000ab0:	42a6      	cmp	r6, r4
 8000ab2:	d109      	bne.n	8000ac8 <__libc_init_array+0x24>
 8000ab4:	f000 fd34 	bl	8001520 <_init>
 8000ab8:	2600      	movs	r6, #0
 8000aba:	4d0a      	ldr	r5, [pc, #40]	; (8000ae4 <__libc_init_array+0x40>)
 8000abc:	4c0a      	ldr	r4, [pc, #40]	; (8000ae8 <__libc_init_array+0x44>)
 8000abe:	1b64      	subs	r4, r4, r5
 8000ac0:	10a4      	asrs	r4, r4, #2
 8000ac2:	42a6      	cmp	r6, r4
 8000ac4:	d105      	bne.n	8000ad2 <__libc_init_array+0x2e>
 8000ac6:	bd70      	pop	{r4, r5, r6, pc}
 8000ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000acc:	4798      	blx	r3
 8000ace:	3601      	adds	r6, #1
 8000ad0:	e7ee      	b.n	8000ab0 <__libc_init_array+0xc>
 8000ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ad6:	4798      	blx	r3
 8000ad8:	3601      	adds	r6, #1
 8000ada:	e7f2      	b.n	8000ac2 <__libc_init_array+0x1e>
 8000adc:	0800158c 	.word	0x0800158c
 8000ae0:	0800158c 	.word	0x0800158c
 8000ae4:	0800158c 	.word	0x0800158c
 8000ae8:	08001590 	.word	0x08001590

08000aec <__retarget_lock_init_recursive>:
 8000aec:	4770      	bx	lr

08000aee <__retarget_lock_acquire_recursive>:
 8000aee:	4770      	bx	lr

08000af0 <__retarget_lock_release_recursive>:
 8000af0:	4770      	bx	lr
	...

08000af4 <_free_r>:
 8000af4:	b538      	push	{r3, r4, r5, lr}
 8000af6:	4605      	mov	r5, r0
 8000af8:	2900      	cmp	r1, #0
 8000afa:	d040      	beq.n	8000b7e <_free_r+0x8a>
 8000afc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b00:	1f0c      	subs	r4, r1, #4
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	bfb8      	it	lt
 8000b06:	18e4      	addlt	r4, r4, r3
 8000b08:	f000 f8dc 	bl	8000cc4 <__malloc_lock>
 8000b0c:	4a1c      	ldr	r2, [pc, #112]	; (8000b80 <_free_r+0x8c>)
 8000b0e:	6813      	ldr	r3, [r2, #0]
 8000b10:	b933      	cbnz	r3, 8000b20 <_free_r+0x2c>
 8000b12:	6063      	str	r3, [r4, #4]
 8000b14:	6014      	str	r4, [r2, #0]
 8000b16:	4628      	mov	r0, r5
 8000b18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b1c:	f000 b8d8 	b.w	8000cd0 <__malloc_unlock>
 8000b20:	42a3      	cmp	r3, r4
 8000b22:	d908      	bls.n	8000b36 <_free_r+0x42>
 8000b24:	6820      	ldr	r0, [r4, #0]
 8000b26:	1821      	adds	r1, r4, r0
 8000b28:	428b      	cmp	r3, r1
 8000b2a:	bf01      	itttt	eq
 8000b2c:	6819      	ldreq	r1, [r3, #0]
 8000b2e:	685b      	ldreq	r3, [r3, #4]
 8000b30:	1809      	addeq	r1, r1, r0
 8000b32:	6021      	streq	r1, [r4, #0]
 8000b34:	e7ed      	b.n	8000b12 <_free_r+0x1e>
 8000b36:	461a      	mov	r2, r3
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	b10b      	cbz	r3, 8000b40 <_free_r+0x4c>
 8000b3c:	42a3      	cmp	r3, r4
 8000b3e:	d9fa      	bls.n	8000b36 <_free_r+0x42>
 8000b40:	6811      	ldr	r1, [r2, #0]
 8000b42:	1850      	adds	r0, r2, r1
 8000b44:	42a0      	cmp	r0, r4
 8000b46:	d10b      	bne.n	8000b60 <_free_r+0x6c>
 8000b48:	6820      	ldr	r0, [r4, #0]
 8000b4a:	4401      	add	r1, r0
 8000b4c:	1850      	adds	r0, r2, r1
 8000b4e:	4283      	cmp	r3, r0
 8000b50:	6011      	str	r1, [r2, #0]
 8000b52:	d1e0      	bne.n	8000b16 <_free_r+0x22>
 8000b54:	6818      	ldr	r0, [r3, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	4408      	add	r0, r1
 8000b5a:	6010      	str	r0, [r2, #0]
 8000b5c:	6053      	str	r3, [r2, #4]
 8000b5e:	e7da      	b.n	8000b16 <_free_r+0x22>
 8000b60:	d902      	bls.n	8000b68 <_free_r+0x74>
 8000b62:	230c      	movs	r3, #12
 8000b64:	602b      	str	r3, [r5, #0]
 8000b66:	e7d6      	b.n	8000b16 <_free_r+0x22>
 8000b68:	6820      	ldr	r0, [r4, #0]
 8000b6a:	1821      	adds	r1, r4, r0
 8000b6c:	428b      	cmp	r3, r1
 8000b6e:	bf01      	itttt	eq
 8000b70:	6819      	ldreq	r1, [r3, #0]
 8000b72:	685b      	ldreq	r3, [r3, #4]
 8000b74:	1809      	addeq	r1, r1, r0
 8000b76:	6021      	streq	r1, [r4, #0]
 8000b78:	6063      	str	r3, [r4, #4]
 8000b7a:	6054      	str	r4, [r2, #4]
 8000b7c:	e7cb      	b.n	8000b16 <_free_r+0x22>
 8000b7e:	bd38      	pop	{r3, r4, r5, pc}
 8000b80:	200001c4 	.word	0x200001c4

08000b84 <sbrk_aligned>:
 8000b84:	b570      	push	{r4, r5, r6, lr}
 8000b86:	4e0e      	ldr	r6, [pc, #56]	; (8000bc0 <sbrk_aligned+0x3c>)
 8000b88:	460c      	mov	r4, r1
 8000b8a:	6831      	ldr	r1, [r6, #0]
 8000b8c:	4605      	mov	r5, r0
 8000b8e:	b911      	cbnz	r1, 8000b96 <sbrk_aligned+0x12>
 8000b90:	f000 fca8 	bl	80014e4 <_sbrk_r>
 8000b94:	6030      	str	r0, [r6, #0]
 8000b96:	4621      	mov	r1, r4
 8000b98:	4628      	mov	r0, r5
 8000b9a:	f000 fca3 	bl	80014e4 <_sbrk_r>
 8000b9e:	1c43      	adds	r3, r0, #1
 8000ba0:	d00a      	beq.n	8000bb8 <sbrk_aligned+0x34>
 8000ba2:	1cc4      	adds	r4, r0, #3
 8000ba4:	f024 0403 	bic.w	r4, r4, #3
 8000ba8:	42a0      	cmp	r0, r4
 8000baa:	d007      	beq.n	8000bbc <sbrk_aligned+0x38>
 8000bac:	1a21      	subs	r1, r4, r0
 8000bae:	4628      	mov	r0, r5
 8000bb0:	f000 fc98 	bl	80014e4 <_sbrk_r>
 8000bb4:	3001      	adds	r0, #1
 8000bb6:	d101      	bne.n	8000bbc <sbrk_aligned+0x38>
 8000bb8:	f04f 34ff 	mov.w	r4, #4294967295
 8000bbc:	4620      	mov	r0, r4
 8000bbe:	bd70      	pop	{r4, r5, r6, pc}
 8000bc0:	200001c8 	.word	0x200001c8

08000bc4 <_malloc_r>:
 8000bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bc8:	1ccd      	adds	r5, r1, #3
 8000bca:	f025 0503 	bic.w	r5, r5, #3
 8000bce:	3508      	adds	r5, #8
 8000bd0:	2d0c      	cmp	r5, #12
 8000bd2:	bf38      	it	cc
 8000bd4:	250c      	movcc	r5, #12
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	4607      	mov	r7, r0
 8000bda:	db01      	blt.n	8000be0 <_malloc_r+0x1c>
 8000bdc:	42a9      	cmp	r1, r5
 8000bde:	d905      	bls.n	8000bec <_malloc_r+0x28>
 8000be0:	230c      	movs	r3, #12
 8000be2:	2600      	movs	r6, #0
 8000be4:	603b      	str	r3, [r7, #0]
 8000be6:	4630      	mov	r0, r6
 8000be8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000cc0 <_malloc_r+0xfc>
 8000bf0:	f000 f868 	bl	8000cc4 <__malloc_lock>
 8000bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8000bf8:	461c      	mov	r4, r3
 8000bfa:	bb5c      	cbnz	r4, 8000c54 <_malloc_r+0x90>
 8000bfc:	4629      	mov	r1, r5
 8000bfe:	4638      	mov	r0, r7
 8000c00:	f7ff ffc0 	bl	8000b84 <sbrk_aligned>
 8000c04:	1c43      	adds	r3, r0, #1
 8000c06:	4604      	mov	r4, r0
 8000c08:	d155      	bne.n	8000cb6 <_malloc_r+0xf2>
 8000c0a:	f8d8 4000 	ldr.w	r4, [r8]
 8000c0e:	4626      	mov	r6, r4
 8000c10:	2e00      	cmp	r6, #0
 8000c12:	d145      	bne.n	8000ca0 <_malloc_r+0xdc>
 8000c14:	2c00      	cmp	r4, #0
 8000c16:	d048      	beq.n	8000caa <_malloc_r+0xe6>
 8000c18:	6823      	ldr	r3, [r4, #0]
 8000c1a:	4631      	mov	r1, r6
 8000c1c:	4638      	mov	r0, r7
 8000c1e:	eb04 0903 	add.w	r9, r4, r3
 8000c22:	f000 fc5f 	bl	80014e4 <_sbrk_r>
 8000c26:	4581      	cmp	r9, r0
 8000c28:	d13f      	bne.n	8000caa <_malloc_r+0xe6>
 8000c2a:	6821      	ldr	r1, [r4, #0]
 8000c2c:	4638      	mov	r0, r7
 8000c2e:	1a6d      	subs	r5, r5, r1
 8000c30:	4629      	mov	r1, r5
 8000c32:	f7ff ffa7 	bl	8000b84 <sbrk_aligned>
 8000c36:	3001      	adds	r0, #1
 8000c38:	d037      	beq.n	8000caa <_malloc_r+0xe6>
 8000c3a:	6823      	ldr	r3, [r4, #0]
 8000c3c:	442b      	add	r3, r5
 8000c3e:	6023      	str	r3, [r4, #0]
 8000c40:	f8d8 3000 	ldr.w	r3, [r8]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d038      	beq.n	8000cba <_malloc_r+0xf6>
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	42a2      	cmp	r2, r4
 8000c4c:	d12b      	bne.n	8000ca6 <_malloc_r+0xe2>
 8000c4e:	2200      	movs	r2, #0
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	e00f      	b.n	8000c74 <_malloc_r+0xb0>
 8000c54:	6822      	ldr	r2, [r4, #0]
 8000c56:	1b52      	subs	r2, r2, r5
 8000c58:	d41f      	bmi.n	8000c9a <_malloc_r+0xd6>
 8000c5a:	2a0b      	cmp	r2, #11
 8000c5c:	d917      	bls.n	8000c8e <_malloc_r+0xca>
 8000c5e:	1961      	adds	r1, r4, r5
 8000c60:	42a3      	cmp	r3, r4
 8000c62:	6025      	str	r5, [r4, #0]
 8000c64:	bf18      	it	ne
 8000c66:	6059      	strne	r1, [r3, #4]
 8000c68:	6863      	ldr	r3, [r4, #4]
 8000c6a:	bf08      	it	eq
 8000c6c:	f8c8 1000 	streq.w	r1, [r8]
 8000c70:	5162      	str	r2, [r4, r5]
 8000c72:	604b      	str	r3, [r1, #4]
 8000c74:	4638      	mov	r0, r7
 8000c76:	f104 060b 	add.w	r6, r4, #11
 8000c7a:	f000 f829 	bl	8000cd0 <__malloc_unlock>
 8000c7e:	f026 0607 	bic.w	r6, r6, #7
 8000c82:	1d23      	adds	r3, r4, #4
 8000c84:	1af2      	subs	r2, r6, r3
 8000c86:	d0ae      	beq.n	8000be6 <_malloc_r+0x22>
 8000c88:	1b9b      	subs	r3, r3, r6
 8000c8a:	50a3      	str	r3, [r4, r2]
 8000c8c:	e7ab      	b.n	8000be6 <_malloc_r+0x22>
 8000c8e:	42a3      	cmp	r3, r4
 8000c90:	6862      	ldr	r2, [r4, #4]
 8000c92:	d1dd      	bne.n	8000c50 <_malloc_r+0x8c>
 8000c94:	f8c8 2000 	str.w	r2, [r8]
 8000c98:	e7ec      	b.n	8000c74 <_malloc_r+0xb0>
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	6864      	ldr	r4, [r4, #4]
 8000c9e:	e7ac      	b.n	8000bfa <_malloc_r+0x36>
 8000ca0:	4634      	mov	r4, r6
 8000ca2:	6876      	ldr	r6, [r6, #4]
 8000ca4:	e7b4      	b.n	8000c10 <_malloc_r+0x4c>
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	e7cc      	b.n	8000c44 <_malloc_r+0x80>
 8000caa:	230c      	movs	r3, #12
 8000cac:	4638      	mov	r0, r7
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	f000 f80e 	bl	8000cd0 <__malloc_unlock>
 8000cb4:	e797      	b.n	8000be6 <_malloc_r+0x22>
 8000cb6:	6025      	str	r5, [r4, #0]
 8000cb8:	e7dc      	b.n	8000c74 <_malloc_r+0xb0>
 8000cba:	605b      	str	r3, [r3, #4]
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	bf00      	nop
 8000cc0:	200001c4 	.word	0x200001c4

08000cc4 <__malloc_lock>:
 8000cc4:	4801      	ldr	r0, [pc, #4]	; (8000ccc <__malloc_lock+0x8>)
 8000cc6:	f7ff bf12 	b.w	8000aee <__retarget_lock_acquire_recursive>
 8000cca:	bf00      	nop
 8000ccc:	200001c0 	.word	0x200001c0

08000cd0 <__malloc_unlock>:
 8000cd0:	4801      	ldr	r0, [pc, #4]	; (8000cd8 <__malloc_unlock+0x8>)
 8000cd2:	f7ff bf0d 	b.w	8000af0 <__retarget_lock_release_recursive>
 8000cd6:	bf00      	nop
 8000cd8:	200001c0 	.word	0x200001c0

08000cdc <__sfputc_r>:
 8000cdc:	6893      	ldr	r3, [r2, #8]
 8000cde:	b410      	push	{r4}
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	6093      	str	r3, [r2, #8]
 8000ce6:	da07      	bge.n	8000cf8 <__sfputc_r+0x1c>
 8000ce8:	6994      	ldr	r4, [r2, #24]
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	db01      	blt.n	8000cf2 <__sfputc_r+0x16>
 8000cee:	290a      	cmp	r1, #10
 8000cf0:	d102      	bne.n	8000cf8 <__sfputc_r+0x1c>
 8000cf2:	bc10      	pop	{r4}
 8000cf4:	f7ff bded 	b.w	80008d2 <__swbuf_r>
 8000cf8:	6813      	ldr	r3, [r2, #0]
 8000cfa:	1c58      	adds	r0, r3, #1
 8000cfc:	6010      	str	r0, [r2, #0]
 8000cfe:	7019      	strb	r1, [r3, #0]
 8000d00:	4608      	mov	r0, r1
 8000d02:	bc10      	pop	{r4}
 8000d04:	4770      	bx	lr

08000d06 <__sfputs_r>:
 8000d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d08:	4606      	mov	r6, r0
 8000d0a:	460f      	mov	r7, r1
 8000d0c:	4614      	mov	r4, r2
 8000d0e:	18d5      	adds	r5, r2, r3
 8000d10:	42ac      	cmp	r4, r5
 8000d12:	d101      	bne.n	8000d18 <__sfputs_r+0x12>
 8000d14:	2000      	movs	r0, #0
 8000d16:	e007      	b.n	8000d28 <__sfputs_r+0x22>
 8000d18:	463a      	mov	r2, r7
 8000d1a:	4630      	mov	r0, r6
 8000d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d20:	f7ff ffdc 	bl	8000cdc <__sfputc_r>
 8000d24:	1c43      	adds	r3, r0, #1
 8000d26:	d1f3      	bne.n	8000d10 <__sfputs_r+0xa>
 8000d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d2c <_vfiprintf_r>:
 8000d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d30:	460d      	mov	r5, r1
 8000d32:	4614      	mov	r4, r2
 8000d34:	4698      	mov	r8, r3
 8000d36:	4606      	mov	r6, r0
 8000d38:	b09d      	sub	sp, #116	; 0x74
 8000d3a:	b118      	cbz	r0, 8000d44 <_vfiprintf_r+0x18>
 8000d3c:	6a03      	ldr	r3, [r0, #32]
 8000d3e:	b90b      	cbnz	r3, 8000d44 <_vfiprintf_r+0x18>
 8000d40:	f7ff fce0 	bl	8000704 <__sinit>
 8000d44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d46:	07d9      	lsls	r1, r3, #31
 8000d48:	d405      	bmi.n	8000d56 <_vfiprintf_r+0x2a>
 8000d4a:	89ab      	ldrh	r3, [r5, #12]
 8000d4c:	059a      	lsls	r2, r3, #22
 8000d4e:	d402      	bmi.n	8000d56 <_vfiprintf_r+0x2a>
 8000d50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d52:	f7ff fecc 	bl	8000aee <__retarget_lock_acquire_recursive>
 8000d56:	89ab      	ldrh	r3, [r5, #12]
 8000d58:	071b      	lsls	r3, r3, #28
 8000d5a:	d501      	bpl.n	8000d60 <_vfiprintf_r+0x34>
 8000d5c:	692b      	ldr	r3, [r5, #16]
 8000d5e:	b99b      	cbnz	r3, 8000d88 <_vfiprintf_r+0x5c>
 8000d60:	4629      	mov	r1, r5
 8000d62:	4630      	mov	r0, r6
 8000d64:	f7ff fdf2 	bl	800094c <__swsetup_r>
 8000d68:	b170      	cbz	r0, 8000d88 <_vfiprintf_r+0x5c>
 8000d6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d6c:	07dc      	lsls	r4, r3, #31
 8000d6e:	d504      	bpl.n	8000d7a <_vfiprintf_r+0x4e>
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	b01d      	add	sp, #116	; 0x74
 8000d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d7a:	89ab      	ldrh	r3, [r5, #12]
 8000d7c:	0598      	lsls	r0, r3, #22
 8000d7e:	d4f7      	bmi.n	8000d70 <_vfiprintf_r+0x44>
 8000d80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d82:	f7ff feb5 	bl	8000af0 <__retarget_lock_release_recursive>
 8000d86:	e7f3      	b.n	8000d70 <_vfiprintf_r+0x44>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8000d8c:	2320      	movs	r3, #32
 8000d8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000d92:	2330      	movs	r3, #48	; 0x30
 8000d94:	f04f 0901 	mov.w	r9, #1
 8000d98:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000f4c <_vfiprintf_r+0x220>
 8000da0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000da4:	4623      	mov	r3, r4
 8000da6:	469a      	mov	sl, r3
 8000da8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000dac:	b10a      	cbz	r2, 8000db2 <_vfiprintf_r+0x86>
 8000dae:	2a25      	cmp	r2, #37	; 0x25
 8000db0:	d1f9      	bne.n	8000da6 <_vfiprintf_r+0x7a>
 8000db2:	ebba 0b04 	subs.w	fp, sl, r4
 8000db6:	d00b      	beq.n	8000dd0 <_vfiprintf_r+0xa4>
 8000db8:	465b      	mov	r3, fp
 8000dba:	4622      	mov	r2, r4
 8000dbc:	4629      	mov	r1, r5
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	f7ff ffa1 	bl	8000d06 <__sfputs_r>
 8000dc4:	3001      	adds	r0, #1
 8000dc6:	f000 80a9 	beq.w	8000f1c <_vfiprintf_r+0x1f0>
 8000dca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000dcc:	445a      	add	r2, fp
 8000dce:	9209      	str	r2, [sp, #36]	; 0x24
 8000dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f000 80a1 	beq.w	8000f1c <_vfiprintf_r+0x1f0>
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8000de0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000de4:	f10a 0a01 	add.w	sl, sl, #1
 8000de8:	9304      	str	r3, [sp, #16]
 8000dea:	9307      	str	r3, [sp, #28]
 8000dec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000df0:	931a      	str	r3, [sp, #104]	; 0x68
 8000df2:	4654      	mov	r4, sl
 8000df4:	2205      	movs	r2, #5
 8000df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dfa:	4854      	ldr	r0, [pc, #336]	; (8000f4c <_vfiprintf_r+0x220>)
 8000dfc:	f000 fb82 	bl	8001504 <memchr>
 8000e00:	9a04      	ldr	r2, [sp, #16]
 8000e02:	b9d8      	cbnz	r0, 8000e3c <_vfiprintf_r+0x110>
 8000e04:	06d1      	lsls	r1, r2, #27
 8000e06:	bf44      	itt	mi
 8000e08:	2320      	movmi	r3, #32
 8000e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e0e:	0713      	lsls	r3, r2, #28
 8000e10:	bf44      	itt	mi
 8000e12:	232b      	movmi	r3, #43	; 0x2b
 8000e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e18:	f89a 3000 	ldrb.w	r3, [sl]
 8000e1c:	2b2a      	cmp	r3, #42	; 0x2a
 8000e1e:	d015      	beq.n	8000e4c <_vfiprintf_r+0x120>
 8000e20:	4654      	mov	r4, sl
 8000e22:	2000      	movs	r0, #0
 8000e24:	f04f 0c0a 	mov.w	ip, #10
 8000e28:	9a07      	ldr	r2, [sp, #28]
 8000e2a:	4621      	mov	r1, r4
 8000e2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e30:	3b30      	subs	r3, #48	; 0x30
 8000e32:	2b09      	cmp	r3, #9
 8000e34:	d94d      	bls.n	8000ed2 <_vfiprintf_r+0x1a6>
 8000e36:	b1b0      	cbz	r0, 8000e66 <_vfiprintf_r+0x13a>
 8000e38:	9207      	str	r2, [sp, #28]
 8000e3a:	e014      	b.n	8000e66 <_vfiprintf_r+0x13a>
 8000e3c:	eba0 0308 	sub.w	r3, r0, r8
 8000e40:	fa09 f303 	lsl.w	r3, r9, r3
 8000e44:	4313      	orrs	r3, r2
 8000e46:	46a2      	mov	sl, r4
 8000e48:	9304      	str	r3, [sp, #16]
 8000e4a:	e7d2      	b.n	8000df2 <_vfiprintf_r+0xc6>
 8000e4c:	9b03      	ldr	r3, [sp, #12]
 8000e4e:	1d19      	adds	r1, r3, #4
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	9103      	str	r1, [sp, #12]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	bfbb      	ittet	lt
 8000e58:	425b      	neglt	r3, r3
 8000e5a:	f042 0202 	orrlt.w	r2, r2, #2
 8000e5e:	9307      	strge	r3, [sp, #28]
 8000e60:	9307      	strlt	r3, [sp, #28]
 8000e62:	bfb8      	it	lt
 8000e64:	9204      	strlt	r2, [sp, #16]
 8000e66:	7823      	ldrb	r3, [r4, #0]
 8000e68:	2b2e      	cmp	r3, #46	; 0x2e
 8000e6a:	d10c      	bne.n	8000e86 <_vfiprintf_r+0x15a>
 8000e6c:	7863      	ldrb	r3, [r4, #1]
 8000e6e:	2b2a      	cmp	r3, #42	; 0x2a
 8000e70:	d134      	bne.n	8000edc <_vfiprintf_r+0x1b0>
 8000e72:	9b03      	ldr	r3, [sp, #12]
 8000e74:	3402      	adds	r4, #2
 8000e76:	1d1a      	adds	r2, r3, #4
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	9203      	str	r2, [sp, #12]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	bfb8      	it	lt
 8000e80:	f04f 33ff 	movlt.w	r3, #4294967295
 8000e84:	9305      	str	r3, [sp, #20]
 8000e86:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000f50 <_vfiprintf_r+0x224>
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	4650      	mov	r0, sl
 8000e8e:	7821      	ldrb	r1, [r4, #0]
 8000e90:	f000 fb38 	bl	8001504 <memchr>
 8000e94:	b138      	cbz	r0, 8000ea6 <_vfiprintf_r+0x17a>
 8000e96:	2240      	movs	r2, #64	; 0x40
 8000e98:	9b04      	ldr	r3, [sp, #16]
 8000e9a:	eba0 000a 	sub.w	r0, r0, sl
 8000e9e:	4082      	lsls	r2, r0
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	3401      	adds	r4, #1
 8000ea4:	9304      	str	r3, [sp, #16]
 8000ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000eaa:	2206      	movs	r2, #6
 8000eac:	4829      	ldr	r0, [pc, #164]	; (8000f54 <_vfiprintf_r+0x228>)
 8000eae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000eb2:	f000 fb27 	bl	8001504 <memchr>
 8000eb6:	2800      	cmp	r0, #0
 8000eb8:	d03f      	beq.n	8000f3a <_vfiprintf_r+0x20e>
 8000eba:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <_vfiprintf_r+0x22c>)
 8000ebc:	bb1b      	cbnz	r3, 8000f06 <_vfiprintf_r+0x1da>
 8000ebe:	9b03      	ldr	r3, [sp, #12]
 8000ec0:	3307      	adds	r3, #7
 8000ec2:	f023 0307 	bic.w	r3, r3, #7
 8000ec6:	3308      	adds	r3, #8
 8000ec8:	9303      	str	r3, [sp, #12]
 8000eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ecc:	443b      	add	r3, r7
 8000ece:	9309      	str	r3, [sp, #36]	; 0x24
 8000ed0:	e768      	b.n	8000da4 <_vfiprintf_r+0x78>
 8000ed2:	460c      	mov	r4, r1
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	fb0c 3202 	mla	r2, ip, r2, r3
 8000eda:	e7a6      	b.n	8000e2a <_vfiprintf_r+0xfe>
 8000edc:	2300      	movs	r3, #0
 8000ede:	f04f 0c0a 	mov.w	ip, #10
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	3401      	adds	r4, #1
 8000ee6:	9305      	str	r3, [sp, #20]
 8000ee8:	4620      	mov	r0, r4
 8000eea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000eee:	3a30      	subs	r2, #48	; 0x30
 8000ef0:	2a09      	cmp	r2, #9
 8000ef2:	d903      	bls.n	8000efc <_vfiprintf_r+0x1d0>
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0c6      	beq.n	8000e86 <_vfiprintf_r+0x15a>
 8000ef8:	9105      	str	r1, [sp, #20]
 8000efa:	e7c4      	b.n	8000e86 <_vfiprintf_r+0x15a>
 8000efc:	4604      	mov	r4, r0
 8000efe:	2301      	movs	r3, #1
 8000f00:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f04:	e7f0      	b.n	8000ee8 <_vfiprintf_r+0x1bc>
 8000f06:	ab03      	add	r3, sp, #12
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	462a      	mov	r2, r5
 8000f0c:	4630      	mov	r0, r6
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <_vfiprintf_r+0x230>)
 8000f10:	a904      	add	r1, sp, #16
 8000f12:	f3af 8000 	nop.w
 8000f16:	4607      	mov	r7, r0
 8000f18:	1c78      	adds	r0, r7, #1
 8000f1a:	d1d6      	bne.n	8000eca <_vfiprintf_r+0x19e>
 8000f1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f1e:	07d9      	lsls	r1, r3, #31
 8000f20:	d405      	bmi.n	8000f2e <_vfiprintf_r+0x202>
 8000f22:	89ab      	ldrh	r3, [r5, #12]
 8000f24:	059a      	lsls	r2, r3, #22
 8000f26:	d402      	bmi.n	8000f2e <_vfiprintf_r+0x202>
 8000f28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f2a:	f7ff fde1 	bl	8000af0 <__retarget_lock_release_recursive>
 8000f2e:	89ab      	ldrh	r3, [r5, #12]
 8000f30:	065b      	lsls	r3, r3, #25
 8000f32:	f53f af1d 	bmi.w	8000d70 <_vfiprintf_r+0x44>
 8000f36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f38:	e71c      	b.n	8000d74 <_vfiprintf_r+0x48>
 8000f3a:	ab03      	add	r3, sp, #12
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	462a      	mov	r2, r5
 8000f40:	4630      	mov	r0, r6
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <_vfiprintf_r+0x230>)
 8000f44:	a904      	add	r1, sp, #16
 8000f46:	f000 f87d 	bl	8001044 <_printf_i>
 8000f4a:	e7e4      	b.n	8000f16 <_vfiprintf_r+0x1ea>
 8000f4c:	08001559 	.word	0x08001559
 8000f50:	0800155f 	.word	0x0800155f
 8000f54:	08001563 	.word	0x08001563
 8000f58:	00000000 	.word	0x00000000
 8000f5c:	08000d07 	.word	0x08000d07

08000f60 <_printf_common>:
 8000f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f64:	4616      	mov	r6, r2
 8000f66:	4699      	mov	r9, r3
 8000f68:	688a      	ldr	r2, [r1, #8]
 8000f6a:	690b      	ldr	r3, [r1, #16]
 8000f6c:	4607      	mov	r7, r0
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	bfb8      	it	lt
 8000f72:	4613      	movlt	r3, r2
 8000f74:	6033      	str	r3, [r6, #0]
 8000f76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000f7a:	460c      	mov	r4, r1
 8000f7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000f80:	b10a      	cbz	r2, 8000f86 <_printf_common+0x26>
 8000f82:	3301      	adds	r3, #1
 8000f84:	6033      	str	r3, [r6, #0]
 8000f86:	6823      	ldr	r3, [r4, #0]
 8000f88:	0699      	lsls	r1, r3, #26
 8000f8a:	bf42      	ittt	mi
 8000f8c:	6833      	ldrmi	r3, [r6, #0]
 8000f8e:	3302      	addmi	r3, #2
 8000f90:	6033      	strmi	r3, [r6, #0]
 8000f92:	6825      	ldr	r5, [r4, #0]
 8000f94:	f015 0506 	ands.w	r5, r5, #6
 8000f98:	d106      	bne.n	8000fa8 <_printf_common+0x48>
 8000f9a:	f104 0a19 	add.w	sl, r4, #25
 8000f9e:	68e3      	ldr	r3, [r4, #12]
 8000fa0:	6832      	ldr	r2, [r6, #0]
 8000fa2:	1a9b      	subs	r3, r3, r2
 8000fa4:	42ab      	cmp	r3, r5
 8000fa6:	dc2b      	bgt.n	8001000 <_printf_common+0xa0>
 8000fa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000fac:	1e13      	subs	r3, r2, #0
 8000fae:	6822      	ldr	r2, [r4, #0]
 8000fb0:	bf18      	it	ne
 8000fb2:	2301      	movne	r3, #1
 8000fb4:	0692      	lsls	r2, r2, #26
 8000fb6:	d430      	bmi.n	800101a <_printf_common+0xba>
 8000fb8:	4649      	mov	r1, r9
 8000fba:	4638      	mov	r0, r7
 8000fbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000fc0:	47c0      	blx	r8
 8000fc2:	3001      	adds	r0, #1
 8000fc4:	d023      	beq.n	800100e <_printf_common+0xae>
 8000fc6:	6823      	ldr	r3, [r4, #0]
 8000fc8:	6922      	ldr	r2, [r4, #16]
 8000fca:	f003 0306 	and.w	r3, r3, #6
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	bf14      	ite	ne
 8000fd2:	2500      	movne	r5, #0
 8000fd4:	6833      	ldreq	r3, [r6, #0]
 8000fd6:	f04f 0600 	mov.w	r6, #0
 8000fda:	bf08      	it	eq
 8000fdc:	68e5      	ldreq	r5, [r4, #12]
 8000fde:	f104 041a 	add.w	r4, r4, #26
 8000fe2:	bf08      	it	eq
 8000fe4:	1aed      	subeq	r5, r5, r3
 8000fe6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8000fea:	bf08      	it	eq
 8000fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	bfc4      	itt	gt
 8000ff4:	1a9b      	subgt	r3, r3, r2
 8000ff6:	18ed      	addgt	r5, r5, r3
 8000ff8:	42b5      	cmp	r5, r6
 8000ffa:	d11a      	bne.n	8001032 <_printf_common+0xd2>
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	e008      	b.n	8001012 <_printf_common+0xb2>
 8001000:	2301      	movs	r3, #1
 8001002:	4652      	mov	r2, sl
 8001004:	4649      	mov	r1, r9
 8001006:	4638      	mov	r0, r7
 8001008:	47c0      	blx	r8
 800100a:	3001      	adds	r0, #1
 800100c:	d103      	bne.n	8001016 <_printf_common+0xb6>
 800100e:	f04f 30ff 	mov.w	r0, #4294967295
 8001012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001016:	3501      	adds	r5, #1
 8001018:	e7c1      	b.n	8000f9e <_printf_common+0x3e>
 800101a:	2030      	movs	r0, #48	; 0x30
 800101c:	18e1      	adds	r1, r4, r3
 800101e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001028:	4422      	add	r2, r4
 800102a:	3302      	adds	r3, #2
 800102c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001030:	e7c2      	b.n	8000fb8 <_printf_common+0x58>
 8001032:	2301      	movs	r3, #1
 8001034:	4622      	mov	r2, r4
 8001036:	4649      	mov	r1, r9
 8001038:	4638      	mov	r0, r7
 800103a:	47c0      	blx	r8
 800103c:	3001      	adds	r0, #1
 800103e:	d0e6      	beq.n	800100e <_printf_common+0xae>
 8001040:	3601      	adds	r6, #1
 8001042:	e7d9      	b.n	8000ff8 <_printf_common+0x98>

08001044 <_printf_i>:
 8001044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001048:	7e0f      	ldrb	r7, [r1, #24]
 800104a:	4691      	mov	r9, r2
 800104c:	2f78      	cmp	r7, #120	; 0x78
 800104e:	4680      	mov	r8, r0
 8001050:	460c      	mov	r4, r1
 8001052:	469a      	mov	sl, r3
 8001054:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001056:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800105a:	d807      	bhi.n	800106c <_printf_i+0x28>
 800105c:	2f62      	cmp	r7, #98	; 0x62
 800105e:	d80a      	bhi.n	8001076 <_printf_i+0x32>
 8001060:	2f00      	cmp	r7, #0
 8001062:	f000 80d5 	beq.w	8001210 <_printf_i+0x1cc>
 8001066:	2f58      	cmp	r7, #88	; 0x58
 8001068:	f000 80c1 	beq.w	80011ee <_printf_i+0x1aa>
 800106c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001070:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001074:	e03a      	b.n	80010ec <_printf_i+0xa8>
 8001076:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800107a:	2b15      	cmp	r3, #21
 800107c:	d8f6      	bhi.n	800106c <_printf_i+0x28>
 800107e:	a101      	add	r1, pc, #4	; (adr r1, 8001084 <_printf_i+0x40>)
 8001080:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001084:	080010dd 	.word	0x080010dd
 8001088:	080010f1 	.word	0x080010f1
 800108c:	0800106d 	.word	0x0800106d
 8001090:	0800106d 	.word	0x0800106d
 8001094:	0800106d 	.word	0x0800106d
 8001098:	0800106d 	.word	0x0800106d
 800109c:	080010f1 	.word	0x080010f1
 80010a0:	0800106d 	.word	0x0800106d
 80010a4:	0800106d 	.word	0x0800106d
 80010a8:	0800106d 	.word	0x0800106d
 80010ac:	0800106d 	.word	0x0800106d
 80010b0:	080011f7 	.word	0x080011f7
 80010b4:	0800111d 	.word	0x0800111d
 80010b8:	080011b1 	.word	0x080011b1
 80010bc:	0800106d 	.word	0x0800106d
 80010c0:	0800106d 	.word	0x0800106d
 80010c4:	08001219 	.word	0x08001219
 80010c8:	0800106d 	.word	0x0800106d
 80010cc:	0800111d 	.word	0x0800111d
 80010d0:	0800106d 	.word	0x0800106d
 80010d4:	0800106d 	.word	0x0800106d
 80010d8:	080011b9 	.word	0x080011b9
 80010dc:	682b      	ldr	r3, [r5, #0]
 80010de:	1d1a      	adds	r2, r3, #4
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	602a      	str	r2, [r5, #0]
 80010e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80010e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80010ec:	2301      	movs	r3, #1
 80010ee:	e0a0      	b.n	8001232 <_printf_i+0x1ee>
 80010f0:	6820      	ldr	r0, [r4, #0]
 80010f2:	682b      	ldr	r3, [r5, #0]
 80010f4:	0607      	lsls	r7, r0, #24
 80010f6:	f103 0104 	add.w	r1, r3, #4
 80010fa:	6029      	str	r1, [r5, #0]
 80010fc:	d501      	bpl.n	8001102 <_printf_i+0xbe>
 80010fe:	681e      	ldr	r6, [r3, #0]
 8001100:	e003      	b.n	800110a <_printf_i+0xc6>
 8001102:	0646      	lsls	r6, r0, #25
 8001104:	d5fb      	bpl.n	80010fe <_printf_i+0xba>
 8001106:	f9b3 6000 	ldrsh.w	r6, [r3]
 800110a:	2e00      	cmp	r6, #0
 800110c:	da03      	bge.n	8001116 <_printf_i+0xd2>
 800110e:	232d      	movs	r3, #45	; 0x2d
 8001110:	4276      	negs	r6, r6
 8001112:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001116:	230a      	movs	r3, #10
 8001118:	4859      	ldr	r0, [pc, #356]	; (8001280 <_printf_i+0x23c>)
 800111a:	e012      	b.n	8001142 <_printf_i+0xfe>
 800111c:	682b      	ldr	r3, [r5, #0]
 800111e:	6820      	ldr	r0, [r4, #0]
 8001120:	1d19      	adds	r1, r3, #4
 8001122:	6029      	str	r1, [r5, #0]
 8001124:	0605      	lsls	r5, r0, #24
 8001126:	d501      	bpl.n	800112c <_printf_i+0xe8>
 8001128:	681e      	ldr	r6, [r3, #0]
 800112a:	e002      	b.n	8001132 <_printf_i+0xee>
 800112c:	0641      	lsls	r1, r0, #25
 800112e:	d5fb      	bpl.n	8001128 <_printf_i+0xe4>
 8001130:	881e      	ldrh	r6, [r3, #0]
 8001132:	2f6f      	cmp	r7, #111	; 0x6f
 8001134:	bf0c      	ite	eq
 8001136:	2308      	moveq	r3, #8
 8001138:	230a      	movne	r3, #10
 800113a:	4851      	ldr	r0, [pc, #324]	; (8001280 <_printf_i+0x23c>)
 800113c:	2100      	movs	r1, #0
 800113e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001142:	6865      	ldr	r5, [r4, #4]
 8001144:	2d00      	cmp	r5, #0
 8001146:	bfa8      	it	ge
 8001148:	6821      	ldrge	r1, [r4, #0]
 800114a:	60a5      	str	r5, [r4, #8]
 800114c:	bfa4      	itt	ge
 800114e:	f021 0104 	bicge.w	r1, r1, #4
 8001152:	6021      	strge	r1, [r4, #0]
 8001154:	b90e      	cbnz	r6, 800115a <_printf_i+0x116>
 8001156:	2d00      	cmp	r5, #0
 8001158:	d04b      	beq.n	80011f2 <_printf_i+0x1ae>
 800115a:	4615      	mov	r5, r2
 800115c:	fbb6 f1f3 	udiv	r1, r6, r3
 8001160:	fb03 6711 	mls	r7, r3, r1, r6
 8001164:	5dc7      	ldrb	r7, [r0, r7]
 8001166:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800116a:	4637      	mov	r7, r6
 800116c:	42bb      	cmp	r3, r7
 800116e:	460e      	mov	r6, r1
 8001170:	d9f4      	bls.n	800115c <_printf_i+0x118>
 8001172:	2b08      	cmp	r3, #8
 8001174:	d10b      	bne.n	800118e <_printf_i+0x14a>
 8001176:	6823      	ldr	r3, [r4, #0]
 8001178:	07de      	lsls	r6, r3, #31
 800117a:	d508      	bpl.n	800118e <_printf_i+0x14a>
 800117c:	6923      	ldr	r3, [r4, #16]
 800117e:	6861      	ldr	r1, [r4, #4]
 8001180:	4299      	cmp	r1, r3
 8001182:	bfde      	ittt	le
 8001184:	2330      	movle	r3, #48	; 0x30
 8001186:	f805 3c01 	strble.w	r3, [r5, #-1]
 800118a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800118e:	1b52      	subs	r2, r2, r5
 8001190:	6122      	str	r2, [r4, #16]
 8001192:	464b      	mov	r3, r9
 8001194:	4621      	mov	r1, r4
 8001196:	4640      	mov	r0, r8
 8001198:	f8cd a000 	str.w	sl, [sp]
 800119c:	aa03      	add	r2, sp, #12
 800119e:	f7ff fedf 	bl	8000f60 <_printf_common>
 80011a2:	3001      	adds	r0, #1
 80011a4:	d14a      	bne.n	800123c <_printf_i+0x1f8>
 80011a6:	f04f 30ff 	mov.w	r0, #4294967295
 80011aa:	b004      	add	sp, #16
 80011ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011b0:	6823      	ldr	r3, [r4, #0]
 80011b2:	f043 0320 	orr.w	r3, r3, #32
 80011b6:	6023      	str	r3, [r4, #0]
 80011b8:	2778      	movs	r7, #120	; 0x78
 80011ba:	4832      	ldr	r0, [pc, #200]	; (8001284 <_printf_i+0x240>)
 80011bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80011c0:	6823      	ldr	r3, [r4, #0]
 80011c2:	6829      	ldr	r1, [r5, #0]
 80011c4:	061f      	lsls	r7, r3, #24
 80011c6:	f851 6b04 	ldr.w	r6, [r1], #4
 80011ca:	d402      	bmi.n	80011d2 <_printf_i+0x18e>
 80011cc:	065f      	lsls	r7, r3, #25
 80011ce:	bf48      	it	mi
 80011d0:	b2b6      	uxthmi	r6, r6
 80011d2:	07df      	lsls	r7, r3, #31
 80011d4:	bf48      	it	mi
 80011d6:	f043 0320 	orrmi.w	r3, r3, #32
 80011da:	6029      	str	r1, [r5, #0]
 80011dc:	bf48      	it	mi
 80011de:	6023      	strmi	r3, [r4, #0]
 80011e0:	b91e      	cbnz	r6, 80011ea <_printf_i+0x1a6>
 80011e2:	6823      	ldr	r3, [r4, #0]
 80011e4:	f023 0320 	bic.w	r3, r3, #32
 80011e8:	6023      	str	r3, [r4, #0]
 80011ea:	2310      	movs	r3, #16
 80011ec:	e7a6      	b.n	800113c <_printf_i+0xf8>
 80011ee:	4824      	ldr	r0, [pc, #144]	; (8001280 <_printf_i+0x23c>)
 80011f0:	e7e4      	b.n	80011bc <_printf_i+0x178>
 80011f2:	4615      	mov	r5, r2
 80011f4:	e7bd      	b.n	8001172 <_printf_i+0x12e>
 80011f6:	682b      	ldr	r3, [r5, #0]
 80011f8:	6826      	ldr	r6, [r4, #0]
 80011fa:	1d18      	adds	r0, r3, #4
 80011fc:	6961      	ldr	r1, [r4, #20]
 80011fe:	6028      	str	r0, [r5, #0]
 8001200:	0635      	lsls	r5, r6, #24
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	d501      	bpl.n	800120a <_printf_i+0x1c6>
 8001206:	6019      	str	r1, [r3, #0]
 8001208:	e002      	b.n	8001210 <_printf_i+0x1cc>
 800120a:	0670      	lsls	r0, r6, #25
 800120c:	d5fb      	bpl.n	8001206 <_printf_i+0x1c2>
 800120e:	8019      	strh	r1, [r3, #0]
 8001210:	2300      	movs	r3, #0
 8001212:	4615      	mov	r5, r2
 8001214:	6123      	str	r3, [r4, #16]
 8001216:	e7bc      	b.n	8001192 <_printf_i+0x14e>
 8001218:	682b      	ldr	r3, [r5, #0]
 800121a:	2100      	movs	r1, #0
 800121c:	1d1a      	adds	r2, r3, #4
 800121e:	602a      	str	r2, [r5, #0]
 8001220:	681d      	ldr	r5, [r3, #0]
 8001222:	6862      	ldr	r2, [r4, #4]
 8001224:	4628      	mov	r0, r5
 8001226:	f000 f96d 	bl	8001504 <memchr>
 800122a:	b108      	cbz	r0, 8001230 <_printf_i+0x1ec>
 800122c:	1b40      	subs	r0, r0, r5
 800122e:	6060      	str	r0, [r4, #4]
 8001230:	6863      	ldr	r3, [r4, #4]
 8001232:	6123      	str	r3, [r4, #16]
 8001234:	2300      	movs	r3, #0
 8001236:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800123a:	e7aa      	b.n	8001192 <_printf_i+0x14e>
 800123c:	462a      	mov	r2, r5
 800123e:	4649      	mov	r1, r9
 8001240:	4640      	mov	r0, r8
 8001242:	6923      	ldr	r3, [r4, #16]
 8001244:	47d0      	blx	sl
 8001246:	3001      	adds	r0, #1
 8001248:	d0ad      	beq.n	80011a6 <_printf_i+0x162>
 800124a:	6823      	ldr	r3, [r4, #0]
 800124c:	079b      	lsls	r3, r3, #30
 800124e:	d413      	bmi.n	8001278 <_printf_i+0x234>
 8001250:	68e0      	ldr	r0, [r4, #12]
 8001252:	9b03      	ldr	r3, [sp, #12]
 8001254:	4298      	cmp	r0, r3
 8001256:	bfb8      	it	lt
 8001258:	4618      	movlt	r0, r3
 800125a:	e7a6      	b.n	80011aa <_printf_i+0x166>
 800125c:	2301      	movs	r3, #1
 800125e:	4632      	mov	r2, r6
 8001260:	4649      	mov	r1, r9
 8001262:	4640      	mov	r0, r8
 8001264:	47d0      	blx	sl
 8001266:	3001      	adds	r0, #1
 8001268:	d09d      	beq.n	80011a6 <_printf_i+0x162>
 800126a:	3501      	adds	r5, #1
 800126c:	68e3      	ldr	r3, [r4, #12]
 800126e:	9903      	ldr	r1, [sp, #12]
 8001270:	1a5b      	subs	r3, r3, r1
 8001272:	42ab      	cmp	r3, r5
 8001274:	dcf2      	bgt.n	800125c <_printf_i+0x218>
 8001276:	e7eb      	b.n	8001250 <_printf_i+0x20c>
 8001278:	2500      	movs	r5, #0
 800127a:	f104 0619 	add.w	r6, r4, #25
 800127e:	e7f5      	b.n	800126c <_printf_i+0x228>
 8001280:	0800156a 	.word	0x0800156a
 8001284:	0800157b 	.word	0x0800157b

08001288 <__sflush_r>:
 8001288:	898a      	ldrh	r2, [r1, #12]
 800128a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800128c:	4605      	mov	r5, r0
 800128e:	0710      	lsls	r0, r2, #28
 8001290:	460c      	mov	r4, r1
 8001292:	d457      	bmi.n	8001344 <__sflush_r+0xbc>
 8001294:	684b      	ldr	r3, [r1, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	dc04      	bgt.n	80012a4 <__sflush_r+0x1c>
 800129a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800129c:	2b00      	cmp	r3, #0
 800129e:	dc01      	bgt.n	80012a4 <__sflush_r+0x1c>
 80012a0:	2000      	movs	r0, #0
 80012a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012a6:	2e00      	cmp	r6, #0
 80012a8:	d0fa      	beq.n	80012a0 <__sflush_r+0x18>
 80012aa:	2300      	movs	r3, #0
 80012ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80012b0:	682f      	ldr	r7, [r5, #0]
 80012b2:	6a21      	ldr	r1, [r4, #32]
 80012b4:	602b      	str	r3, [r5, #0]
 80012b6:	d032      	beq.n	800131e <__sflush_r+0x96>
 80012b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012ba:	89a3      	ldrh	r3, [r4, #12]
 80012bc:	075a      	lsls	r2, r3, #29
 80012be:	d505      	bpl.n	80012cc <__sflush_r+0x44>
 80012c0:	6863      	ldr	r3, [r4, #4]
 80012c2:	1ac0      	subs	r0, r0, r3
 80012c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012c6:	b10b      	cbz	r3, 80012cc <__sflush_r+0x44>
 80012c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012ca:	1ac0      	subs	r0, r0, r3
 80012cc:	2300      	movs	r3, #0
 80012ce:	4602      	mov	r2, r0
 80012d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012d2:	4628      	mov	r0, r5
 80012d4:	6a21      	ldr	r1, [r4, #32]
 80012d6:	47b0      	blx	r6
 80012d8:	1c43      	adds	r3, r0, #1
 80012da:	89a3      	ldrh	r3, [r4, #12]
 80012dc:	d106      	bne.n	80012ec <__sflush_r+0x64>
 80012de:	6829      	ldr	r1, [r5, #0]
 80012e0:	291d      	cmp	r1, #29
 80012e2:	d82b      	bhi.n	800133c <__sflush_r+0xb4>
 80012e4:	4a28      	ldr	r2, [pc, #160]	; (8001388 <__sflush_r+0x100>)
 80012e6:	410a      	asrs	r2, r1
 80012e8:	07d6      	lsls	r6, r2, #31
 80012ea:	d427      	bmi.n	800133c <__sflush_r+0xb4>
 80012ec:	2200      	movs	r2, #0
 80012ee:	6062      	str	r2, [r4, #4]
 80012f0:	6922      	ldr	r2, [r4, #16]
 80012f2:	04d9      	lsls	r1, r3, #19
 80012f4:	6022      	str	r2, [r4, #0]
 80012f6:	d504      	bpl.n	8001302 <__sflush_r+0x7a>
 80012f8:	1c42      	adds	r2, r0, #1
 80012fa:	d101      	bne.n	8001300 <__sflush_r+0x78>
 80012fc:	682b      	ldr	r3, [r5, #0]
 80012fe:	b903      	cbnz	r3, 8001302 <__sflush_r+0x7a>
 8001300:	6560      	str	r0, [r4, #84]	; 0x54
 8001302:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001304:	602f      	str	r7, [r5, #0]
 8001306:	2900      	cmp	r1, #0
 8001308:	d0ca      	beq.n	80012a0 <__sflush_r+0x18>
 800130a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800130e:	4299      	cmp	r1, r3
 8001310:	d002      	beq.n	8001318 <__sflush_r+0x90>
 8001312:	4628      	mov	r0, r5
 8001314:	f7ff fbee 	bl	8000af4 <_free_r>
 8001318:	2000      	movs	r0, #0
 800131a:	6360      	str	r0, [r4, #52]	; 0x34
 800131c:	e7c1      	b.n	80012a2 <__sflush_r+0x1a>
 800131e:	2301      	movs	r3, #1
 8001320:	4628      	mov	r0, r5
 8001322:	47b0      	blx	r6
 8001324:	1c41      	adds	r1, r0, #1
 8001326:	d1c8      	bne.n	80012ba <__sflush_r+0x32>
 8001328:	682b      	ldr	r3, [r5, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0c5      	beq.n	80012ba <__sflush_r+0x32>
 800132e:	2b1d      	cmp	r3, #29
 8001330:	d001      	beq.n	8001336 <__sflush_r+0xae>
 8001332:	2b16      	cmp	r3, #22
 8001334:	d101      	bne.n	800133a <__sflush_r+0xb2>
 8001336:	602f      	str	r7, [r5, #0]
 8001338:	e7b2      	b.n	80012a0 <__sflush_r+0x18>
 800133a:	89a3      	ldrh	r3, [r4, #12]
 800133c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001340:	81a3      	strh	r3, [r4, #12]
 8001342:	e7ae      	b.n	80012a2 <__sflush_r+0x1a>
 8001344:	690f      	ldr	r7, [r1, #16]
 8001346:	2f00      	cmp	r7, #0
 8001348:	d0aa      	beq.n	80012a0 <__sflush_r+0x18>
 800134a:	0793      	lsls	r3, r2, #30
 800134c:	bf18      	it	ne
 800134e:	2300      	movne	r3, #0
 8001350:	680e      	ldr	r6, [r1, #0]
 8001352:	bf08      	it	eq
 8001354:	694b      	ldreq	r3, [r1, #20]
 8001356:	1bf6      	subs	r6, r6, r7
 8001358:	600f      	str	r7, [r1, #0]
 800135a:	608b      	str	r3, [r1, #8]
 800135c:	2e00      	cmp	r6, #0
 800135e:	dd9f      	ble.n	80012a0 <__sflush_r+0x18>
 8001360:	4633      	mov	r3, r6
 8001362:	463a      	mov	r2, r7
 8001364:	4628      	mov	r0, r5
 8001366:	6a21      	ldr	r1, [r4, #32]
 8001368:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800136c:	47e0      	blx	ip
 800136e:	2800      	cmp	r0, #0
 8001370:	dc06      	bgt.n	8001380 <__sflush_r+0xf8>
 8001372:	89a3      	ldrh	r3, [r4, #12]
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800137c:	81a3      	strh	r3, [r4, #12]
 800137e:	e790      	b.n	80012a2 <__sflush_r+0x1a>
 8001380:	4407      	add	r7, r0
 8001382:	1a36      	subs	r6, r6, r0
 8001384:	e7ea      	b.n	800135c <__sflush_r+0xd4>
 8001386:	bf00      	nop
 8001388:	dfbffffe 	.word	0xdfbffffe

0800138c <_fflush_r>:
 800138c:	b538      	push	{r3, r4, r5, lr}
 800138e:	690b      	ldr	r3, [r1, #16]
 8001390:	4605      	mov	r5, r0
 8001392:	460c      	mov	r4, r1
 8001394:	b913      	cbnz	r3, 800139c <_fflush_r+0x10>
 8001396:	2500      	movs	r5, #0
 8001398:	4628      	mov	r0, r5
 800139a:	bd38      	pop	{r3, r4, r5, pc}
 800139c:	b118      	cbz	r0, 80013a6 <_fflush_r+0x1a>
 800139e:	6a03      	ldr	r3, [r0, #32]
 80013a0:	b90b      	cbnz	r3, 80013a6 <_fflush_r+0x1a>
 80013a2:	f7ff f9af 	bl	8000704 <__sinit>
 80013a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f3      	beq.n	8001396 <_fflush_r+0xa>
 80013ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80013b0:	07d0      	lsls	r0, r2, #31
 80013b2:	d404      	bmi.n	80013be <_fflush_r+0x32>
 80013b4:	0599      	lsls	r1, r3, #22
 80013b6:	d402      	bmi.n	80013be <_fflush_r+0x32>
 80013b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013ba:	f7ff fb98 	bl	8000aee <__retarget_lock_acquire_recursive>
 80013be:	4628      	mov	r0, r5
 80013c0:	4621      	mov	r1, r4
 80013c2:	f7ff ff61 	bl	8001288 <__sflush_r>
 80013c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013c8:	4605      	mov	r5, r0
 80013ca:	07da      	lsls	r2, r3, #31
 80013cc:	d4e4      	bmi.n	8001398 <_fflush_r+0xc>
 80013ce:	89a3      	ldrh	r3, [r4, #12]
 80013d0:	059b      	lsls	r3, r3, #22
 80013d2:	d4e1      	bmi.n	8001398 <_fflush_r+0xc>
 80013d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013d6:	f7ff fb8b 	bl	8000af0 <__retarget_lock_release_recursive>
 80013da:	e7dd      	b.n	8001398 <_fflush_r+0xc>

080013dc <__swhatbuf_r>:
 80013dc:	b570      	push	{r4, r5, r6, lr}
 80013de:	460c      	mov	r4, r1
 80013e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013e4:	4615      	mov	r5, r2
 80013e6:	2900      	cmp	r1, #0
 80013e8:	461e      	mov	r6, r3
 80013ea:	b096      	sub	sp, #88	; 0x58
 80013ec:	da0c      	bge.n	8001408 <__swhatbuf_r+0x2c>
 80013ee:	89a3      	ldrh	r3, [r4, #12]
 80013f0:	2100      	movs	r1, #0
 80013f2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80013f6:	bf0c      	ite	eq
 80013f8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80013fc:	2340      	movne	r3, #64	; 0x40
 80013fe:	2000      	movs	r0, #0
 8001400:	6031      	str	r1, [r6, #0]
 8001402:	602b      	str	r3, [r5, #0]
 8001404:	b016      	add	sp, #88	; 0x58
 8001406:	bd70      	pop	{r4, r5, r6, pc}
 8001408:	466a      	mov	r2, sp
 800140a:	f000 f849 	bl	80014a0 <_fstat_r>
 800140e:	2800      	cmp	r0, #0
 8001410:	dbed      	blt.n	80013ee <__swhatbuf_r+0x12>
 8001412:	9901      	ldr	r1, [sp, #4]
 8001414:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001418:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800141c:	4259      	negs	r1, r3
 800141e:	4159      	adcs	r1, r3
 8001420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001424:	e7eb      	b.n	80013fe <__swhatbuf_r+0x22>

08001426 <__smakebuf_r>:
 8001426:	898b      	ldrh	r3, [r1, #12]
 8001428:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800142a:	079d      	lsls	r5, r3, #30
 800142c:	4606      	mov	r6, r0
 800142e:	460c      	mov	r4, r1
 8001430:	d507      	bpl.n	8001442 <__smakebuf_r+0x1c>
 8001432:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001436:	6023      	str	r3, [r4, #0]
 8001438:	6123      	str	r3, [r4, #16]
 800143a:	2301      	movs	r3, #1
 800143c:	6163      	str	r3, [r4, #20]
 800143e:	b002      	add	sp, #8
 8001440:	bd70      	pop	{r4, r5, r6, pc}
 8001442:	466a      	mov	r2, sp
 8001444:	ab01      	add	r3, sp, #4
 8001446:	f7ff ffc9 	bl	80013dc <__swhatbuf_r>
 800144a:	9900      	ldr	r1, [sp, #0]
 800144c:	4605      	mov	r5, r0
 800144e:	4630      	mov	r0, r6
 8001450:	f7ff fbb8 	bl	8000bc4 <_malloc_r>
 8001454:	b948      	cbnz	r0, 800146a <__smakebuf_r+0x44>
 8001456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800145a:	059a      	lsls	r2, r3, #22
 800145c:	d4ef      	bmi.n	800143e <__smakebuf_r+0x18>
 800145e:	f023 0303 	bic.w	r3, r3, #3
 8001462:	f043 0302 	orr.w	r3, r3, #2
 8001466:	81a3      	strh	r3, [r4, #12]
 8001468:	e7e3      	b.n	8001432 <__smakebuf_r+0xc>
 800146a:	89a3      	ldrh	r3, [r4, #12]
 800146c:	6020      	str	r0, [r4, #0]
 800146e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001472:	81a3      	strh	r3, [r4, #12]
 8001474:	9b00      	ldr	r3, [sp, #0]
 8001476:	6120      	str	r0, [r4, #16]
 8001478:	6163      	str	r3, [r4, #20]
 800147a:	9b01      	ldr	r3, [sp, #4]
 800147c:	b15b      	cbz	r3, 8001496 <__smakebuf_r+0x70>
 800147e:	4630      	mov	r0, r6
 8001480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001484:	f000 f81e 	bl	80014c4 <_isatty_r>
 8001488:	b128      	cbz	r0, 8001496 <__smakebuf_r+0x70>
 800148a:	89a3      	ldrh	r3, [r4, #12]
 800148c:	f023 0303 	bic.w	r3, r3, #3
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	81a3      	strh	r3, [r4, #12]
 8001496:	89a3      	ldrh	r3, [r4, #12]
 8001498:	431d      	orrs	r5, r3
 800149a:	81a5      	strh	r5, [r4, #12]
 800149c:	e7cf      	b.n	800143e <__smakebuf_r+0x18>
	...

080014a0 <_fstat_r>:
 80014a0:	b538      	push	{r3, r4, r5, lr}
 80014a2:	2300      	movs	r3, #0
 80014a4:	4d06      	ldr	r5, [pc, #24]	; (80014c0 <_fstat_r+0x20>)
 80014a6:	4604      	mov	r4, r0
 80014a8:	4608      	mov	r0, r1
 80014aa:	4611      	mov	r1, r2
 80014ac:	602b      	str	r3, [r5, #0]
 80014ae:	f7fe ff7f 	bl	80003b0 <_fstat>
 80014b2:	1c43      	adds	r3, r0, #1
 80014b4:	d102      	bne.n	80014bc <_fstat_r+0x1c>
 80014b6:	682b      	ldr	r3, [r5, #0]
 80014b8:	b103      	cbz	r3, 80014bc <_fstat_r+0x1c>
 80014ba:	6023      	str	r3, [r4, #0]
 80014bc:	bd38      	pop	{r3, r4, r5, pc}
 80014be:	bf00      	nop
 80014c0:	200001bc 	.word	0x200001bc

080014c4 <_isatty_r>:
 80014c4:	b538      	push	{r3, r4, r5, lr}
 80014c6:	2300      	movs	r3, #0
 80014c8:	4d05      	ldr	r5, [pc, #20]	; (80014e0 <_isatty_r+0x1c>)
 80014ca:	4604      	mov	r4, r0
 80014cc:	4608      	mov	r0, r1
 80014ce:	602b      	str	r3, [r5, #0]
 80014d0:	f7fe ff7d 	bl	80003ce <_isatty>
 80014d4:	1c43      	adds	r3, r0, #1
 80014d6:	d102      	bne.n	80014de <_isatty_r+0x1a>
 80014d8:	682b      	ldr	r3, [r5, #0]
 80014da:	b103      	cbz	r3, 80014de <_isatty_r+0x1a>
 80014dc:	6023      	str	r3, [r4, #0]
 80014de:	bd38      	pop	{r3, r4, r5, pc}
 80014e0:	200001bc 	.word	0x200001bc

080014e4 <_sbrk_r>:
 80014e4:	b538      	push	{r3, r4, r5, lr}
 80014e6:	2300      	movs	r3, #0
 80014e8:	4d05      	ldr	r5, [pc, #20]	; (8001500 <_sbrk_r+0x1c>)
 80014ea:	4604      	mov	r4, r0
 80014ec:	4608      	mov	r0, r1
 80014ee:	602b      	str	r3, [r5, #0]
 80014f0:	f7fe ff84 	bl	80003fc <_sbrk>
 80014f4:	1c43      	adds	r3, r0, #1
 80014f6:	d102      	bne.n	80014fe <_sbrk_r+0x1a>
 80014f8:	682b      	ldr	r3, [r5, #0]
 80014fa:	b103      	cbz	r3, 80014fe <_sbrk_r+0x1a>
 80014fc:	6023      	str	r3, [r4, #0]
 80014fe:	bd38      	pop	{r3, r4, r5, pc}
 8001500:	200001bc 	.word	0x200001bc

08001504 <memchr>:
 8001504:	4603      	mov	r3, r0
 8001506:	b510      	push	{r4, lr}
 8001508:	b2c9      	uxtb	r1, r1
 800150a:	4402      	add	r2, r0
 800150c:	4293      	cmp	r3, r2
 800150e:	4618      	mov	r0, r3
 8001510:	d101      	bne.n	8001516 <memchr+0x12>
 8001512:	2000      	movs	r0, #0
 8001514:	e003      	b.n	800151e <memchr+0x1a>
 8001516:	7804      	ldrb	r4, [r0, #0]
 8001518:	3301      	adds	r3, #1
 800151a:	428c      	cmp	r4, r1
 800151c:	d1f6      	bne.n	800150c <memchr+0x8>
 800151e:	bd10      	pop	{r4, pc}

08001520 <_init>:
 8001520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001522:	bf00      	nop
 8001524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001526:	bc08      	pop	{r3}
 8001528:	469e      	mov	lr, r3
 800152a:	4770      	bx	lr

0800152c <_fini>:
 800152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800152e:	bf00      	nop
 8001530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001532:	bc08      	pop	{r3}
 8001534:	469e      	mov	lr, r3
 8001536:	4770      	bx	lr
